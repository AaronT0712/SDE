{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = chr => chr === ' ' || chr === '\\t';\nexport class CursorConfiguration {\n  static shouldRecreate(e) {\n    return e.hasChanged(142 /* EditorOption.layoutInfo */) || e.hasChanged(128 /* EditorOption.wordSeparators */) || e.hasChanged(36 /* EditorOption.emptySelectionClipboard */) || e.hasChanged(75 /* EditorOption.multiCursorMergeOverlapping */) || e.hasChanged(77 /* EditorOption.multiCursorPaste */) || e.hasChanged(78 /* EditorOption.multiCursorLimit */) || e.hasChanged(6 /* EditorOption.autoClosingBrackets */) || e.hasChanged(10 /* EditorOption.autoClosingQuotes */) || e.hasChanged(8 /* EditorOption.autoClosingDelete */) || e.hasChanged(9 /* EditorOption.autoClosingOvertype */) || e.hasChanged(13 /* EditorOption.autoSurround */) || e.hasChanged(126 /* EditorOption.useTabStops */) || e.hasChanged(49 /* EditorOption.fontInfo */) || e.hasChanged(89 /* EditorOption.readOnly */);\n  }\n\n  constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n    this.languageConfigurationService = languageConfigurationService;\n    this._cursorMoveConfigurationBrand = undefined;\n    this._languageId = languageId;\n    const options = configuration.options;\n    const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n    const fontInfo = options.get(49 /* EditorOption.fontInfo */);\n    this.readOnly = options.get(89 /* EditorOption.readOnly */);\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(114 /* EditorOption.stickyTabStops */);\n    this.lineHeight = fontInfo.lineHeight;\n    this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(126 /* EditorOption.useTabStops */);\n    this.wordSeparators = options.get(128 /* EditorOption.wordSeparators */);\n    this.emptySelectionClipboard = options.get(36 /* EditorOption.emptySelectionClipboard */);\n    this.copyWithSyntaxHighlighting = options.get(24 /* EditorOption.copyWithSyntaxHighlighting */);\n    this.multiCursorMergeOverlapping = options.get(75 /* EditorOption.multiCursorMergeOverlapping */);\n    this.multiCursorPaste = options.get(77 /* EditorOption.multiCursorPaste */);\n    this.multiCursorLimit = options.get(78 /* EditorOption.multiCursorLimit */);\n    this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n    this.autoClosingQuotes = options.get(10 /* EditorOption.autoClosingQuotes */);\n    this.autoClosingDelete = options.get(8 /* EditorOption.autoClosingDelete */);\n    this.autoClosingOvertype = options.get(9 /* EditorOption.autoClosingOvertype */);\n    this.autoSurround = options.get(13 /* EditorOption.autoSurround */);\n    this.autoIndent = options.get(11 /* EditorOption.autoIndent */);\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n      bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false)\n    };\n    this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n    const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n    if (surroundingPairs) {\n      for (const pair of surroundingPairs) {\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n  get electricChars() {\n    var _a;\n    if (!this._electricChars) {\n      this._electricChars = {};\n      const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n      if (electricChars) {\n        for (const char of electricChars) {\n          this._electricChars[char] = true;\n        }\n      }\n    }\n    return this._electricChars;\n  }\n  /**\n   * Should return opening bracket type to match indentation with\n   */\n  onElectricCharacter(character, context, column) {\n    const scopedLineTokens = createScopedLineTokens(context, column - 1);\n    const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n    if (!electricCharacterSupport) {\n      return null;\n    }\n    return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  }\n  normalizeIndentation(str) {\n    return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  }\n  _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n      case 'languageDefined':\n        return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n      case 'always':\n        return autoCloseAlways;\n      case 'never':\n        return autoCloseNever;\n    }\n  }\n  _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n    const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n    return c => autoCloseBeforeSet.indexOf(c) !== -1;\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n  visibleColumnFromColumn(model, position) {\n    return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n  columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n    const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n    const minColumn = model.getLineMinColumn(lineNumber);\n    if (result < minColumn) {\n      return minColumn;\n    }\n    const maxColumn = model.getLineMaxColumn(lineNumber);\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n    return result;\n  }\n}\nexport class CursorState {\n  static fromModelState(modelState) {\n    return new PartialModelCursorState(modelState);\n  }\n  static fromViewState(viewState) {\n    return new PartialViewCursorState(viewState);\n  }\n  static fromModelSelection(modelSelection) {\n    const selection = Selection.liftSelection(modelSelection);\n    const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n    return CursorState.fromModelState(modelState);\n  }\n  static fromModelSelections(modelSelections) {\n    const states = [];\n    for (let i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n    return states;\n  }\n  constructor(modelState, viewState) {\n    this._cursorStateBrand = undefined;\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n  equals(other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  }\n}\nexport class PartialModelCursorState {\n  constructor(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n}\nexport class PartialViewCursorState {\n  constructor(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n  constructor(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this.selectionStart = selectionStart;\n    this.selectionStartKind = selectionStartKind;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this._singleCursorStateBrand = undefined;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n  equals(other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.selectionStartKind === other.selectionStartKind && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  }\n  hasSelection() {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  }\n  move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  }\n  static _computeSelection(selectionStart, position) {\n    if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n      return Selection.fromPositions(selectionStart.getStartPosition(), position);\n    } else {\n      return Selection.fromPositions(selectionStart.getEndPosition(), position);\n    }\n  }\n}\nexport class EditOperationResult {\n  constructor(type, commands, opts) {\n    this._editOperationResultBrand = undefined;\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n}\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"names":["Position","Range","Selection","createScopedLineTokens","CursorColumns","normalizeIndentation","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","shouldRecreate","e","hasChanged","constructor","languageId","modelOptions","configuration","languageConfigurationService","_cursorMoveConfigurationBrand","undefined","_languageId","options","layoutInfo","get","fontInfo","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","typicalHalfwidthCharacterWidth","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","multiCursorLimit","autoClosingBrackets","autoClosingQuotes","autoClosingDelete","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getLanguageConfiguration","getAutoClosingPairs","getSurroundingPairs","pair","open","close","electricChars","_a","electricCharacter","getElectricCharacters","char","onElectricCharacter","character","context","column","scopedLineTokens","electricCharacterSupport","firstCharOffset","str","autoCloseConfig","forQuotes","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","visibleColumnFromColumn","model","position","getLineContent","lineNumber","columnFromVisibleColumn","visibleColumn","result","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","CursorState","fromModelState","modelState","PartialModelCursorState","fromViewState","viewState","PartialViewCursorState","fromModelSelection","modelSelection","selection","liftSelection","SingleCursorState","fromPositions","getSelectionStart","getPosition","fromModelSelections","modelSelections","states","i","len","length","_cursorStateBrand","equals","other","selectionStart","selectionStartKind","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","_singleCursorStateBrand","_computeSelection","equalsRange","hasSelection","isEmpty","move","inSelectionMode","isBeforeOrEqual","getStartPosition","getEndPosition","EditOperationResult","type","commands","opts","_editOperationResultBrand","shouldPushStackElementBefore","shouldPushStackElementAfter","isQuote","ch"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    static shouldRecreate(e) {\n        return (e.hasChanged(142 /* EditorOption.layoutInfo */)\n            || e.hasChanged(128 /* EditorOption.wordSeparators */)\n            || e.hasChanged(36 /* EditorOption.emptySelectionClipboard */)\n            || e.hasChanged(75 /* EditorOption.multiCursorMergeOverlapping */)\n            || e.hasChanged(77 /* EditorOption.multiCursorPaste */)\n            || e.hasChanged(78 /* EditorOption.multiCursorLimit */)\n            || e.hasChanged(6 /* EditorOption.autoClosingBrackets */)\n            || e.hasChanged(10 /* EditorOption.autoClosingQuotes */)\n            || e.hasChanged(8 /* EditorOption.autoClosingDelete */)\n            || e.hasChanged(9 /* EditorOption.autoClosingOvertype */)\n            || e.hasChanged(13 /* EditorOption.autoSurround */)\n            || e.hasChanged(126 /* EditorOption.useTabStops */)\n            || e.hasChanged(49 /* EditorOption.fontInfo */)\n            || e.hasChanged(89 /* EditorOption.readOnly */));\n    }\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n        const fontInfo = options.get(49 /* EditorOption.fontInfo */);\n        this.readOnly = options.get(89 /* EditorOption.readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(114 /* EditorOption.stickyTabStops */);\n        this.lineHeight = fontInfo.lineHeight;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(126 /* EditorOption.useTabStops */);\n        this.wordSeparators = options.get(128 /* EditorOption.wordSeparators */);\n        this.emptySelectionClipboard = options.get(36 /* EditorOption.emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(24 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(75 /* EditorOption.multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(77 /* EditorOption.multiCursorPaste */);\n        this.multiCursorLimit = options.get(78 /* EditorOption.multiCursorLimit */);\n        this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n        this.autoClosingQuotes = options.get(10 /* EditorOption.autoClosingQuotes */);\n        this.autoClosingDelete = options.get(8 /* EditorOption.autoClosingDelete */);\n        this.autoClosingOvertype = options.get(9 /* EditorOption.autoClosingOvertype */);\n        this.autoSurround = options.get(13 /* EditorOption.autoSurround */);\n        this.autoIndent = options.get(11 /* EditorOption.autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false)\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this.selectionStart = selectionStart;\n        this.selectionStartKind = selectionStartKind;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this._singleCursorStateBrand = undefined;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.selectionStartKind === other.selectionStartKind\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,MAAMC,eAAe,GAAGA,CAAA,KAAM,IAAI;AAClC,MAAMC,cAAc,GAAGA,CAAA,KAAM,KAAK;AAClC,MAAMC,yBAAyB,GAAIC,GAAG,IAAMA,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,IAAK;AACxE,OAAO,MAAMC,mBAAmB,CAAC;EAC7B,OAAOC,cAAcA,CAACC,CAAC,EAAE;IACrB,OAAQA,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAChDD,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,iCAAiC,CAAC,IACnDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,0CAA0C,CAAC,IAC3DD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,8CAA8C,CAAC,IAC/DD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,mCAAmC,CAAC,IACpDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,mCAAmC,CAAC,IACpDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,sCAAsC,CAAC,IACtDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,oCAAoC,CAAC,IACrDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,oCAAoC,CAAC,IACpDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,sCAAsC,CAAC,IACtDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,+BAA+B,CAAC,IAChDD,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,8BAA8B,CAAC,IAChDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,IAC5CD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC;EACvD;;EACAC,WAAWA,CAACC,UAAU,EAAEC,YAAY,EAAEC,aAAa,EAAEC,4BAA4B,EAAE;IAC/E,IAAI,CAACA,4BAA4B,GAAGA,4BAA4B;IAChE,IAAI,CAACC,6BAA6B,GAAGC,SAAS;IAC9C,IAAI,CAACC,WAAW,GAAGN,UAAU;IAC7B,MAAMO,OAAO,GAAGL,aAAa,CAACK,OAAO;IACrC,MAAMC,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,6BAA6B,CAAC;IACjE,MAAMC,QAAQ,GAAGH,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,2BAA2B,CAAC;IAC5D,IAAI,CAACE,QAAQ,GAAGJ,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,2BAA2B,CAAC;IAC3D,IAAI,CAACG,OAAO,GAAGX,YAAY,CAACW,OAAO;IACnC,IAAI,CAACC,UAAU,GAAGZ,YAAY,CAACY,UAAU;IACzC,IAAI,CAACC,YAAY,GAAGb,YAAY,CAACa,YAAY;IAC7C,IAAI,CAACC,cAAc,GAAGR,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,iCAAiC,CAAC;IACxE,IAAI,CAACO,UAAU,GAAGN,QAAQ,CAACM,UAAU;IACrC,IAAI,CAACC,8BAA8B,GAAGP,QAAQ,CAACO,8BAA8B;IAC7E,IAAI,CAACC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACb,UAAU,CAACc,MAAM,GAAG,IAAI,CAACN,UAAU,CAAC,GAAG,CAAC,CAAC;IAChF,IAAI,CAACO,WAAW,GAAGhB,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,8BAA8B,CAAC;IAClE,IAAI,CAACe,cAAc,GAAGjB,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,iCAAiC,CAAC;IACxE,IAAI,CAACgB,uBAAuB,GAAGlB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,0CAA0C,CAAC;IACzF,IAAI,CAACiB,0BAA0B,GAAGnB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,6CAA6C,CAAC;IAC/F,IAAI,CAACkB,2BAA2B,GAAGpB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,8CAA8C,CAAC;IACjG,IAAI,CAACmB,gBAAgB,GAAGrB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,mCAAmC,CAAC;IAC3E,IAAI,CAACoB,gBAAgB,GAAGtB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,mCAAmC,CAAC;IAC3E,IAAI,CAACqB,mBAAmB,GAAGvB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,sCAAsC,CAAC;IAChF,IAAI,CAACsB,iBAAiB,GAAGxB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,oCAAoC,CAAC;IAC7E,IAAI,CAACuB,iBAAiB,GAAGzB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,oCAAoC,CAAC;IAC5E,IAAI,CAACwB,mBAAmB,GAAG1B,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,sCAAsC,CAAC;IAChF,IAAI,CAACyB,YAAY,GAAG3B,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,+BAA+B,CAAC;IACnE,IAAI,CAAC0B,UAAU,GAAG5B,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,6BAA6B,CAAC;IAC/D,IAAI,CAAC2B,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,qBAAqB,GAAG;MACzBC,KAAK,EAAE,IAAI,CAACC,mBAAmB,CAACxC,UAAU,EAAE,IAAI,CAAC+B,iBAAiB,EAAE,IAAI,CAAC;MACzEU,OAAO,EAAE,IAAI,CAACD,mBAAmB,CAACxC,UAAU,EAAE,IAAI,CAAC8B,mBAAmB,EAAE,KAAK;IACjF,CAAC;IACD,IAAI,CAACY,gBAAgB,GAAG,IAAI,CAACvC,4BAA4B,CAACwC,wBAAwB,CAAC3C,UAAU,CAAC,CAAC4C,mBAAmB,CAAC,CAAC;IACpH,MAAMR,gBAAgB,GAAG,IAAI,CAACjC,4BAA4B,CAACwC,wBAAwB,CAAC3C,UAAU,CAAC,CAAC6C,mBAAmB,CAAC,CAAC;IACrH,IAAIT,gBAAgB,EAAE;MAClB,KAAK,MAAMU,IAAI,IAAIV,gBAAgB,EAAE;QACjC,IAAI,CAACA,gBAAgB,CAACU,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACE,KAAK;MACjD;IACJ;EACJ;EACA,IAAIC,aAAaA,CAAA,EAAG;IAChB,IAAIC,EAAE;IACN,IAAI,CAAC,IAAI,CAACb,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,CAAC,CAAC;MACxB,MAAMY,aAAa,GAAG,CAACC,EAAE,GAAG,IAAI,CAAC/C,4BAA4B,CAACwC,wBAAwB,CAAC,IAAI,CAACrC,WAAW,CAAC,CAAC6C,iBAAiB,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,qBAAqB,CAAC,CAAC;MAC3L,IAAIH,aAAa,EAAE;QACf,KAAK,MAAMI,IAAI,IAAIJ,aAAa,EAAE;UAC9B,IAAI,CAACZ,cAAc,CAACgB,IAAI,CAAC,GAAG,IAAI;QACpC;MACJ;IACJ;IACA,OAAO,IAAI,CAAChB,cAAc;EAC9B;EACA;AACJ;AACA;EACIiB,mBAAmBA,CAACC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAC5C,MAAMC,gBAAgB,GAAGtE,sBAAsB,CAACoE,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC;IACpE,MAAME,wBAAwB,GAAG,IAAI,CAACxD,4BAA4B,CAACwC,wBAAwB,CAACe,gBAAgB,CAAC1D,UAAU,CAAC,CAACmD,iBAAiB;IAC1I,IAAI,CAACQ,wBAAwB,EAAE;MAC3B,OAAO,IAAI;IACf;IACA,OAAOA,wBAAwB,CAACL,mBAAmB,CAACC,SAAS,EAAEG,gBAAgB,EAAED,MAAM,GAAGC,gBAAgB,CAACE,eAAe,CAAC;EAC/H;EACAtE,oBAAoBA,CAACuE,GAAG,EAAE;IACtB,OAAOvE,oBAAoB,CAACuE,GAAG,EAAE,IAAI,CAAChD,UAAU,EAAE,IAAI,CAACC,YAAY,CAAC;EACxE;EACA0B,mBAAmBA,CAACxC,UAAU,EAAE8D,eAAe,EAAEC,SAAS,EAAE;IACxD,QAAQD,eAAe;MACnB,KAAK,kBAAkB;QACnB,OAAOrE,yBAAyB;MACpC,KAAK,iBAAiB;QAClB,OAAO,IAAI,CAACuE,kCAAkC,CAAChE,UAAU,EAAE+D,SAAS,CAAC;MACzE,KAAK,QAAQ;QACT,OAAOxE,eAAe;MAC1B,KAAK,OAAO;QACR,OAAOC,cAAc;IAC7B;EACJ;EACAwE,kCAAkCA,CAAChE,UAAU,EAAE+D,SAAS,EAAE;IACtD,MAAME,kBAAkB,GAAG,IAAI,CAAC9D,4BAA4B,CAACwC,wBAAwB,CAAC3C,UAAU,CAAC,CAACkE,qBAAqB,CAACH,SAAS,CAAC;IAClI,OAAOI,CAAC,IAAIF,kBAAkB,CAACG,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACIE,uBAAuBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrC,OAAOlF,aAAa,CAACgF,uBAAuB,CAACC,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC,EAAEF,QAAQ,CAACd,MAAM,EAAE,IAAI,CAAC7C,OAAO,CAAC;EAC1H;EACA;AACJ;AACA;AACA;EACI8D,uBAAuBA,CAACJ,KAAK,EAAEG,UAAU,EAAEE,aAAa,EAAE;IACtD,MAAMC,MAAM,GAAGvF,aAAa,CAACqF,uBAAuB,CAACJ,KAAK,CAACE,cAAc,CAACC,UAAU,CAAC,EAAEE,aAAa,EAAE,IAAI,CAAC/D,OAAO,CAAC;IACnH,MAAMiE,SAAS,GAAGP,KAAK,CAACQ,gBAAgB,CAACL,UAAU,CAAC;IACpD,IAAIG,MAAM,GAAGC,SAAS,EAAE;MACpB,OAAOA,SAAS;IACpB;IACA,MAAME,SAAS,GAAGT,KAAK,CAACU,gBAAgB,CAACP,UAAU,CAAC;IACpD,IAAIG,MAAM,GAAGG,SAAS,EAAE;MACpB,OAAOA,SAAS;IACpB;IACA,OAAOH,MAAM;EACjB;AACJ;AACA,OAAO,MAAMK,WAAW,CAAC;EACrB,OAAOC,cAAcA,CAACC,UAAU,EAAE;IAC9B,OAAO,IAAIC,uBAAuB,CAACD,UAAU,CAAC;EAClD;EACA,OAAOE,aAAaA,CAACC,SAAS,EAAE;IAC5B,OAAO,IAAIC,sBAAsB,CAACD,SAAS,CAAC;EAChD;EACA,OAAOE,kBAAkBA,CAACC,cAAc,EAAE;IACtC,MAAMC,SAAS,GAAGvG,SAAS,CAACwG,aAAa,CAACF,cAAc,CAAC;IACzD,MAAMN,UAAU,GAAG,IAAIS,iBAAiB,CAAC1G,KAAK,CAAC2G,aAAa,CAACH,SAAS,CAACI,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,iCAAiC,CAAC,EAAEJ,SAAS,CAACK,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9J,OAAOd,WAAW,CAACC,cAAc,CAACC,UAAU,CAAC;EACjD;EACA,OAAOa,mBAAmBA,CAACC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,eAAe,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACxDD,MAAM,CAACC,CAAC,CAAC,GAAG,IAAI,CAACX,kBAAkB,CAACS,eAAe,CAACE,CAAC,CAAC,CAAC;IAC3D;IACA,OAAOD,MAAM;EACjB;EACAnG,WAAWA,CAACoF,UAAU,EAAEG,SAAS,EAAE;IAC/B,IAAI,CAACgB,iBAAiB,GAAGjG,SAAS;IAClC,IAAI,CAAC8E,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,SAAS,GAAGA,SAAS;EAC9B;EACAiB,MAAMA,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAAClB,SAAS,CAACiB,MAAM,CAACC,KAAK,CAAClB,SAAS,CAAC,IAAI,IAAI,CAACH,UAAU,CAACoB,MAAM,CAACC,KAAK,CAACrB,UAAU,CAAC;EAC9F;AACJ;AACA,OAAO,MAAMC,uBAAuB,CAAC;EACjCrF,WAAWA,CAACoF,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,SAAS,GAAG,IAAI;EACzB;AACJ;AACA,OAAO,MAAMC,sBAAsB,CAAC;EAChCxF,WAAWA,CAACuF,SAAS,EAAE;IACnB,IAAI,CAACH,UAAU,GAAG,IAAI;IACtB,IAAI,CAACG,SAAS,GAAGA,SAAS;EAC9B;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAMM,iBAAiB,CAAC;EAC3B7F,WAAWA,CAAC0G,cAAc,EAAEC,kBAAkB,EAAEC,oCAAoC,EAAEpC,QAAQ,EAAEqC,sBAAsB,EAAE;IACpH,IAAI,CAACH,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,oCAAoC,GAAGA,oCAAoC;IAChF,IAAI,CAACpC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACqC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACC,uBAAuB,GAAGxG,SAAS;IACxC,IAAI,CAACqF,SAAS,GAAGE,iBAAiB,CAACkB,iBAAiB,CAAC,IAAI,CAACL,cAAc,EAAE,IAAI,CAAClC,QAAQ,CAAC;EAC5F;EACAgC,MAAMA,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAACG,oCAAoC,KAAKH,KAAK,CAACG,oCAAoC,IACzF,IAAI,CAACC,sBAAsB,KAAKJ,KAAK,CAACI,sBAAsB,IAC5D,IAAI,CAACF,kBAAkB,KAAKF,KAAK,CAACE,kBAAkB,IACpD,IAAI,CAACnC,QAAQ,CAACgC,MAAM,CAACC,KAAK,CAACjC,QAAQ,CAAC,IACpC,IAAI,CAACkC,cAAc,CAACM,WAAW,CAACP,KAAK,CAACC,cAAc,CAAC;EAChE;EACAO,YAAYA,CAAA,EAAG;IACX,OAAQ,CAAC,IAAI,CAACtB,SAAS,CAACuB,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAACR,cAAc,CAACQ,OAAO,CAAC,CAAC;EACvE;EACAC,IAAIA,CAACC,eAAe,EAAE1C,UAAU,EAAEhB,MAAM,EAAEmD,sBAAsB,EAAE;IAC9D,IAAIO,eAAe,EAAE;MACjB;MACA,OAAO,IAAIvB,iBAAiB,CAAC,IAAI,CAACa,cAAc,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAACC,oCAAoC,EAAE,IAAI1H,QAAQ,CAACwF,UAAU,EAAEhB,MAAM,CAAC,EAAEmD,sBAAsB,CAAC;IACnL,CAAC,MACI;MACD;MACA,OAAO,IAAIhB,iBAAiB,CAAC,IAAI1G,KAAK,CAACuF,UAAU,EAAEhB,MAAM,EAAEgB,UAAU,EAAEhB,MAAM,CAAC,EAAE,CAAC,CAAC,iCAAiCmD,sBAAsB,EAAE,IAAI3H,QAAQ,CAACwF,UAAU,EAAEhB,MAAM,CAAC,EAAEmD,sBAAsB,CAAC;IACxM;EACJ;EACA,OAAOE,iBAAiBA,CAACL,cAAc,EAAElC,QAAQ,EAAE;IAC/C,IAAIkC,cAAc,CAACQ,OAAO,CAAC,CAAC,IAAI,CAAC1C,QAAQ,CAAC6C,eAAe,CAACX,cAAc,CAACY,gBAAgB,CAAC,CAAC,CAAC,EAAE;MAC1F,OAAOlI,SAAS,CAAC0G,aAAa,CAACY,cAAc,CAACY,gBAAgB,CAAC,CAAC,EAAE9C,QAAQ,CAAC;IAC/E,CAAC,MACI;MACD,OAAOpF,SAAS,CAAC0G,aAAa,CAACY,cAAc,CAACa,cAAc,CAAC,CAAC,EAAE/C,QAAQ,CAAC;IAC7E;EACJ;AACJ;AACA,OAAO,MAAMgD,mBAAmB,CAAC;EAC7BxH,WAAWA,CAACyH,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAC9B,IAAI,CAACC,yBAAyB,GAAGtH,SAAS;IAC1C,IAAI,CAACmH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,4BAA4B,GAAGF,IAAI,CAACE,4BAA4B;IACrE,IAAI,CAACC,2BAA2B,GAAGH,IAAI,CAACG,2BAA2B;EACvE;AACJ;AACA,OAAO,SAASC,OAAOA,CAACC,EAAE,EAAE;EACxB,OAAQA,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}