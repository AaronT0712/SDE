{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineRange } from '../core/lineRange.js';\nexport class LinesDiff {\n  constructor(changes,\n  /**\n   * Sorted by original line ranges.\n   * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n   */\n  moves,\n  /**\n   * Indicates if the time out was reached.\n   * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n   */\n  hitTimeout) {\n    this.changes = changes;\n    this.moves = moves;\n    this.hitTimeout = hitTimeout;\n  }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n  static inverse(mapping, originalLineCount, modifiedLineCount) {\n    const result = [];\n    let lastOriginalEndLineNumber = 1;\n    let lastModifiedEndLineNumber = 1;\n    for (const m of mapping) {\n      const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.originalRange.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modifiedRange.startLineNumber), undefined);\n      if (!r.modifiedRange.isEmpty) {\n        result.push(r);\n      }\n      lastOriginalEndLineNumber = m.originalRange.endLineNumberExclusive;\n      lastModifiedEndLineNumber = m.modifiedRange.endLineNumberExclusive;\n    }\n    const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1), undefined);\n    if (!r.modifiedRange.isEmpty) {\n      result.push(r);\n    }\n    return result;\n  }\n  constructor(originalRange, modifiedRange, innerChanges) {\n    this.originalRange = originalRange;\n    this.modifiedRange = modifiedRange;\n    this.innerChanges = innerChanges;\n  }\n  toString() {\n    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n  }\n  get changedLineCount() {\n    return Math.max(this.originalRange.length, this.modifiedRange.length);\n  }\n  flip() {\n    var _a;\n    return new LineRangeMapping(this.modifiedRange, this.originalRange, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n  }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n  constructor(originalRange, modifiedRange) {\n    this.originalRange = originalRange;\n    this.modifiedRange = modifiedRange;\n  }\n  toString() {\n    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n  }\n  flip() {\n    return new RangeMapping(this.modifiedRange, this.originalRange);\n  }\n}\n// TODO@hediet: Make LineRangeMapping extend from this!\nexport class SimpleLineRangeMapping {\n  constructor(original, modified) {\n    this.original = original;\n    this.modified = modified;\n  }\n  toString() {\n    return `{${this.original.toString()}->${this.modified.toString()}}`;\n  }\n  flip() {\n    return new SimpleLineRangeMapping(this.modified, this.original);\n  }\n}\nexport class MovedText {\n  constructor(lineRangeMapping, changes) {\n    this.lineRangeMapping = lineRangeMapping;\n    this.changes = changes;\n  }\n  flip() {\n    return new MovedText(this.lineRangeMapping.flip(), this.changes.map(c => c.flip()));\n  }\n}","map":{"version":3,"names":["LineRange","LinesDiff","constructor","changes","moves","hitTimeout","LineRangeMapping","inverse","mapping","originalLineCount","modifiedLineCount","result","lastOriginalEndLineNumber","lastModifiedEndLineNumber","m","r","originalRange","startLineNumber","modifiedRange","undefined","isEmpty","push","endLineNumberExclusive","innerChanges","toString","changedLineCount","Math","max","length","flip","_a","map","c","RangeMapping","SimpleLineRangeMapping","original","modified","MovedText","lineRangeMapping"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineRange } from '../core/lineRange.js';\nexport class LinesDiff {\n    constructor(changes, \n    /**\n     * Sorted by original line ranges.\n     * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n     */\n    moves, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.changes = changes;\n        this.moves = moves;\n        this.hitTimeout = hitTimeout;\n    }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n    static inverse(mapping, originalLineCount, modifiedLineCount) {\n        const result = [];\n        let lastOriginalEndLineNumber = 1;\n        let lastModifiedEndLineNumber = 1;\n        for (const m of mapping) {\n            const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.originalRange.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modifiedRange.startLineNumber), undefined);\n            if (!r.modifiedRange.isEmpty) {\n                result.push(r);\n            }\n            lastOriginalEndLineNumber = m.originalRange.endLineNumberExclusive;\n            lastModifiedEndLineNumber = m.modifiedRange.endLineNumberExclusive;\n        }\n        const r = new LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1), undefined);\n        if (!r.modifiedRange.isEmpty) {\n            result.push(r);\n        }\n        return result;\n    }\n    constructor(originalRange, modifiedRange, innerChanges) {\n        this.originalRange = originalRange;\n        this.modifiedRange = modifiedRange;\n        this.innerChanges = innerChanges;\n    }\n    toString() {\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n    }\n    get changedLineCount() {\n        return Math.max(this.originalRange.length, this.modifiedRange.length);\n    }\n    flip() {\n        var _a;\n        return new LineRangeMapping(this.modifiedRange, this.originalRange, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n    }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n    constructor(originalRange, modifiedRange) {\n        this.originalRange = originalRange;\n        this.modifiedRange = modifiedRange;\n    }\n    toString() {\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n    }\n    flip() {\n        return new RangeMapping(this.modifiedRange, this.originalRange);\n    }\n}\n// TODO@hediet: Make LineRangeMapping extend from this!\nexport class SimpleLineRangeMapping {\n    constructor(original, modified) {\n        this.original = original;\n        this.modified = modified;\n    }\n    toString() {\n        return `{${this.original.toString()}->${this.modified.toString()}}`;\n    }\n    flip() {\n        return new SimpleLineRangeMapping(this.modified, this.original);\n    }\n}\nexport class MovedText {\n    constructor(lineRangeMapping, changes) {\n        this.lineRangeMapping = lineRangeMapping;\n        this.changes = changes;\n    }\n    flip() {\n        return new MovedText(this.lineRangeMapping.flip(), this.changes.map(c => c.flip()));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}