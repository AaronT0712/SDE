{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../errors.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerived } from './base.js';\nimport { getLogger } from './logging.js';\nexport function derived(debugName, computeFn) {\n  return new Derived(debugName, computeFn, undefined, undefined, undefined);\n}\nexport function derivedHandleChanges(debugName, options, computeFn) {\n  return new Derived(debugName, computeFn, options.createEmptyChangeSummary, options.handleChange, undefined);\n}\nexport function derivedWithStore(name, computeFn) {\n  const store = new DisposableStore();\n  return new Derived(name, r => {\n    store.clear();\n    return computeFn(r, store);\n  }, undefined, undefined, () => store.dispose());\n}\n_setDerived(derived);\nexport class Derived extends BaseObservable {\n  get debugName() {\n    return typeof this._debugName === 'function' ? this._debugName() : this._debugName;\n  }\n  constructor(_debugName, computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined) {\n    var _a, _b;\n    super();\n    this._debugName = _debugName;\n    this.computeFn = computeFn;\n    this.createChangeSummary = createChangeSummary;\n    this._handleChange = _handleChange;\n    this._handleLastObserverRemoved = _handleLastObserverRemoved;\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    this.updateCount = 0;\n    this.dependencies = new Set();\n    this.dependenciesToBeRemoved = new Set();\n    this.changeSummary = undefined;\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedCreated(this);\n  }\n  onLastObserverRemoved() {\n    var _a;\n    /**\n     * We are not tracking changes anymore, thus we have to assume\n     * that our cache is invalid.\n     */\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    for (const d of this.dependencies) {\n      d.removeObserver(this);\n    }\n    this.dependencies.clear();\n    (_a = this._handleLastObserverRemoved) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n  get() {\n    var _a;\n    if (this.observers.size === 0) {\n      // Without observers, we don't know when to clean up stuff.\n      // Thus, we don't cache anything to prevent memory leaks.\n      const result = this.computeFn(this, (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this));\n      // Clear new dependencies\n      this.onLastObserverRemoved();\n      return result;\n    } else {\n      do {\n        if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n          // We might not get a notification for a dependency that changed while it is updating,\n          // thus we also have to ask all our depedencies if they changed in this case.\n          this.state = 3 /* DerivedState.upToDate */;\n          for (const d of this.dependencies) {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            d.reportChanges();\n            if (this.state === 2 /* DerivedState.stale */) {\n              // The other dependencies will refresh on demand, so early break\n              break;\n            }\n          }\n        }\n        this._recomputeIfNeeded();\n        // In case recomputation changed one of our dependencies, we need to recompute again.\n      } while (this.state !== 3 /* DerivedState.upToDate */);\n      return this.value;\n    }\n  }\n  _recomputeIfNeeded() {\n    var _a, _b;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      return;\n    }\n    const emptySet = this.dependenciesToBeRemoved;\n    this.dependenciesToBeRemoved = this.dependencies;\n    this.dependencies = emptySet;\n    const hadValue = this.state !== 0 /* DerivedState.initial */;\n    const oldValue = this.value;\n    this.state = 3 /* DerivedState.upToDate */;\n    const changeSummary = this.changeSummary;\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    try {\n      /** might call {@link handleChange} indirectly, which could invalidate us */\n      this.value = this.computeFn(this, changeSummary);\n    } finally {\n      // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n      // Thus, we only unsubscribe from observables that are definitely not read anymore.\n      for (const o of this.dependenciesToBeRemoved) {\n        o.removeObserver(this);\n      }\n      this.dependenciesToBeRemoved.clear();\n    }\n    const didChange = hadValue && oldValue !== this.value;\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedRecomputed(this, {\n      oldValue,\n      newValue: this.value,\n      change: undefined,\n      didChange\n    });\n    if (didChange) {\n      for (const r of this.observers) {\n        r.handleChange(this, undefined);\n      }\n    }\n  }\n  toString() {\n    return `LazyDerived<${this.debugName}>`;\n  }\n  // IObserver Implementation\n  beginUpdate(_observable) {\n    this.updateCount++;\n    const propagateBeginUpdate = this.updateCount === 1;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      // If we propagate begin update, that will already signal a possible change.\n      if (!propagateBeginUpdate) {\n        for (const r of this.observers) {\n          r.handlePossibleChange(this);\n        }\n      }\n    }\n    if (propagateBeginUpdate) {\n      for (const r of this.observers) {\n        r.beginUpdate(this); // This signals a possible change\n      }\n    }\n  }\n\n  endUpdate(_observable) {\n    this.updateCount--;\n    if (this.updateCount === 0) {\n      // End update could change the observer list.\n      const observers = [...this.observers];\n      for (const r of observers) {\n        r.endUpdate(this);\n      }\n    }\n    if (this.updateCount < 0) {\n      throw new BugIndicatingError();\n    }\n  }\n  handlePossibleChange(observable) {\n    // In all other states, observers already know that we might have changed.\n    if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      for (const r of this.observers) {\n        r.handlePossibleChange(this);\n      }\n    }\n  }\n  handleChange(observable, change) {\n    if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      const shouldReact = this._handleChange ? this._handleChange({\n        changedObservable: observable,\n        change,\n        didChange: o => o === observable\n      }, this.changeSummary) : true;\n      const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n      if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n        this.state = 2 /* DerivedState.stale */;\n        if (wasUpToDate) {\n          for (const r of this.observers) {\n            r.handlePossibleChange(this);\n          }\n        }\n      }\n    }\n  }\n  // IReader Implementation\n  readObservable(observable) {\n    // Subscribe before getting the value to enable caching\n    observable.addObserver(this);\n    /** This might call {@link handleChange} indirectly, which could invalidate us */\n    const value = observable.get();\n    // Which is why we only add the observable to the dependencies now.\n    this.dependencies.add(observable);\n    this.dependenciesToBeRemoved.delete(observable);\n    return value;\n  }\n  addObserver(observer) {\n    const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n    super.addObserver(observer);\n    if (shouldCallBeginUpdate) {\n      observer.beginUpdate(this);\n    }\n  }\n  removeObserver(observer) {\n    const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n    super.removeObserver(observer);\n    if (shouldCallEndUpdate) {\n      // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n      observer.endUpdate(this);\n    }\n  }\n}","map":{"version":3,"names":["BugIndicatingError","DisposableStore","BaseObservable","_setDerived","getLogger","derived","debugName","computeFn","Derived","undefined","derivedHandleChanges","options","createEmptyChangeSummary","handleChange","derivedWithStore","name","store","r","clear","dispose","_debugName","constructor","createChangeSummary","_handleChange","_handleLastObserverRemoved","_a","_b","state","value","updateCount","dependencies","Set","dependenciesToBeRemoved","changeSummary","call","handleDerivedCreated","onLastObserverRemoved","d","removeObserver","get","observers","size","result","reportChanges","_recomputeIfNeeded","emptySet","hadValue","oldValue","o","didChange","handleDerivedRecomputed","newValue","change","toString","beginUpdate","_observable","propagateBeginUpdate","handlePossibleChange","endUpdate","observable","has","shouldReact","changedObservable","wasUpToDate","readObservable","addObserver","add","delete","observer","shouldCallBeginUpdate","shouldCallEndUpdate"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/base/common/observableImpl/derived.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../errors.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerived } from './base.js';\nimport { getLogger } from './logging.js';\nexport function derived(debugName, computeFn) {\n    return new Derived(debugName, computeFn, undefined, undefined, undefined);\n}\nexport function derivedHandleChanges(debugName, options, computeFn) {\n    return new Derived(debugName, computeFn, options.createEmptyChangeSummary, options.handleChange, undefined);\n}\nexport function derivedWithStore(name, computeFn) {\n    const store = new DisposableStore();\n    return new Derived(name, r => {\n        store.clear();\n        return computeFn(r, store);\n    }, undefined, undefined, () => store.dispose());\n}\n_setDerived(derived);\nexport class Derived extends BaseObservable {\n    get debugName() {\n        return typeof this._debugName === 'function' ? this._debugName() : this._debugName;\n    }\n    constructor(_debugName, computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined) {\n        var _a, _b;\n        super();\n        this._debugName = _debugName;\n        this.computeFn = computeFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this._handleLastObserverRemoved = _handleLastObserverRemoved;\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        this.updateCount = 0;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = undefined;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedCreated(this);\n    }\n    onLastObserverRemoved() {\n        var _a;\n        /**\n         * We are not tracking changes anymore, thus we have to assume\n         * that our cache is invalid.\n         */\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        for (const d of this.dependencies) {\n            d.removeObserver(this);\n        }\n        this.dependencies.clear();\n        (_a = this._handleLastObserverRemoved) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    get() {\n        var _a;\n        if (this.observers.size === 0) {\n            // Without observers, we don't know when to clean up stuff.\n            // Thus, we don't cache anything to prevent memory leaks.\n            const result = this.computeFn(this, (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this));\n            // Clear new dependencies\n            this.onLastObserverRemoved();\n            return result;\n        }\n        else {\n            do {\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    // We might not get a notification for a dependency that changed while it is updating,\n                    // thus we also have to ask all our depedencies if they changed in this case.\n                    this.state = 3 /* DerivedState.upToDate */;\n                    for (const d of this.dependencies) {\n                        /** might call {@link handleChange} indirectly, which could invalidate us */\n                        d.reportChanges();\n                        if (this.state === 2 /* DerivedState.stale */) {\n                            // The other dependencies will refresh on demand, so early break\n                            break;\n                        }\n                    }\n                }\n                this._recomputeIfNeeded();\n                // In case recomputation changed one of our dependencies, we need to recompute again.\n            } while (this.state !== 3 /* DerivedState.upToDate */);\n            return this.value;\n        }\n    }\n    _recomputeIfNeeded() {\n        var _a, _b;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        const hadValue = this.state !== 0 /* DerivedState.initial */;\n        const oldValue = this.value;\n        this.state = 3 /* DerivedState.upToDate */;\n        const changeSummary = this.changeSummary;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        try {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            this.value = this.computeFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n        const didChange = hadValue && oldValue !== this.value;\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedRecomputed(this, {\n            oldValue,\n            newValue: this.value,\n            change: undefined,\n            didChange\n        });\n        if (didChange) {\n            for (const r of this.observers) {\n                r.handleChange(this, undefined);\n            }\n        }\n    }\n    toString() {\n        return `LazyDerived<${this.debugName}>`;\n    }\n    // IObserver Implementation\n    beginUpdate(_observable) {\n        this.updateCount++;\n        const propagateBeginUpdate = this.updateCount === 1;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            // If we propagate begin update, that will already signal a possible change.\n            if (!propagateBeginUpdate) {\n                for (const r of this.observers) {\n                    r.handlePossibleChange(this);\n                }\n            }\n        }\n        if (propagateBeginUpdate) {\n            for (const r of this.observers) {\n                r.beginUpdate(this); // This signals a possible change\n            }\n        }\n    }\n    endUpdate(_observable) {\n        this.updateCount--;\n        if (this.updateCount === 0) {\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n        if (this.updateCount < 0) {\n            throw new BugIndicatingError();\n        }\n    }\n    handlePossibleChange(observable) {\n        // In all other states, observers already know that we might have changed.\n        if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            for (const r of this.observers) {\n                r.handlePossibleChange(this);\n            }\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n                this.state = 2 /* DerivedState.stale */;\n                if (wasUpToDate) {\n                    for (const r of this.observers) {\n                        r.handlePossibleChange(this);\n                    }\n                }\n            }\n        }\n    }\n    // IReader Implementation\n    readObservable(observable) {\n        // Subscribe before getting the value to enable caching\n        observable.addObserver(this);\n        /** This might call {@link handleChange} indirectly, which could invalidate us */\n        const value = observable.get();\n        // Which is why we only add the observable to the dependencies now.\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}