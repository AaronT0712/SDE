{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { derived } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { arrowRevertChange, diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from './decorations.js';\nimport { MovedBlocksLinesPart } from './movedBlocksLines.js';\nimport { applyObservableDecorations } from './utils.js';\nimport { LineRange } from '../../../common/core/lineRange.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DiffEditorDecorations extends Disposable {\n  constructor(_editors, _diffModel, _options) {\n    super();\n    this._editors = _editors;\n    this._diffModel = _diffModel;\n    this._options = _options;\n    this._decorations = derived('decorations', reader => {\n      var _a;\n      const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n      if (!diff) {\n        return null;\n      }\n      const currentMove = this._diffModel.read(reader).syncedMovedTexts.read(reader);\n      const renderIndicators = this._options.renderIndicators.read(reader);\n      const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n      const originalDecorations = [];\n      const modifiedDecorations = [];\n      for (const m of diff.mappings) {\n        const fullRangeOriginal = LineRange.subtract(m.lineRangeMapping.originalRange, currentMove === null || currentMove === void 0 ? void 0 : currentMove.lineRangeMapping.original).map(i => i.toInclusiveRange()).filter(isDefined);\n        for (const range of fullRangeOriginal) {\n          originalDecorations.push({\n            range,\n            options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n          });\n        }\n        const fullRangeModified = LineRange.subtract(m.lineRangeMapping.modifiedRange, currentMove === null || currentMove === void 0 ? void 0 : currentMove.lineRangeMapping.modified).map(i => i.toInclusiveRange()).filter(isDefined);\n        for (const range of fullRangeModified) {\n          modifiedDecorations.push({\n            range,\n            options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n          });\n        }\n        if (m.lineRangeMapping.modifiedRange.isEmpty || m.lineRangeMapping.originalRange.isEmpty) {\n          for (const range of fullRangeOriginal) {\n            originalDecorations.push({\n              range,\n              options: diffWholeLineDeleteDecoration\n            });\n          }\n          for (const range of fullRangeModified) {\n            modifiedDecorations.push({\n              range,\n              options: diffWholeLineAddDecoration\n            });\n          }\n        } else {\n          for (const i of m.lineRangeMapping.innerChanges || []) {\n            if (currentMove && (currentMove.lineRangeMapping.original.intersect(new LineRange(i.originalRange.startLineNumber, i.originalRange.endLineNumber)) || currentMove.lineRangeMapping.modified.intersect(new LineRange(i.modifiedRange.startLineNumber, i.modifiedRange.endLineNumber)))) {\n              continue;\n            }\n            // Don't show empty markers outside the line range\n            if (m.lineRangeMapping.originalRange.contains(i.originalRange.startLineNumber)) {\n              originalDecorations.push({\n                range: i.originalRange,\n                options: i.originalRange.isEmpty() && showEmptyDecorations ? diffDeleteDecorationEmpty : diffDeleteDecoration\n              });\n            }\n            if (m.lineRangeMapping.modifiedRange.contains(i.modifiedRange.startLineNumber)) {\n              modifiedDecorations.push({\n                range: i.modifiedRange,\n                options: i.modifiedRange.isEmpty() && showEmptyDecorations ? diffAddDecorationEmpty : diffAddDecoration\n              });\n            }\n          }\n        }\n        if (!m.lineRangeMapping.modifiedRange.isEmpty && this._options.shouldRenderRevertArrows.read(reader) && !currentMove) {\n          modifiedDecorations.push({\n            range: Range.fromPositions(new Position(m.lineRangeMapping.modifiedRange.startLineNumber, 1)),\n            options: arrowRevertChange\n          });\n        }\n      }\n      if (currentMove) {\n        for (const m of currentMove.changes) {\n          const fullRangeOriginal = m.originalRange.toInclusiveRange();\n          if (fullRangeOriginal) {\n            originalDecorations.push({\n              range: fullRangeOriginal,\n              options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n            });\n          }\n          const fullRangeModified = m.modifiedRange.toInclusiveRange();\n          if (fullRangeModified) {\n            modifiedDecorations.push({\n              range: fullRangeModified,\n              options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n            });\n          }\n          for (const i of m.innerChanges || []) {\n            originalDecorations.push({\n              range: i.originalRange,\n              options: diffDeleteDecoration\n            });\n            modifiedDecorations.push({\n              range: i.modifiedRange,\n              options: diffAddDecoration\n            });\n          }\n        }\n      }\n      for (const m of diff.movedTexts) {\n        originalDecorations.push({\n          range: m.lineRangeMapping.original.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedOriginal',\n            blockPadding: [MovedBlocksLinesPart.movedCodeBlockPadding, 0, MovedBlocksLinesPart.movedCodeBlockPadding, MovedBlocksLinesPart.movedCodeBlockPadding]\n          }\n        });\n        modifiedDecorations.push({\n          range: m.lineRangeMapping.modified.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedModified',\n            blockPadding: [4, 0, 4, 4]\n          }\n        });\n      }\n      return {\n        originalDecorations,\n        modifiedDecorations\n      };\n    });\n    this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n    this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n  }\n}","map":{"version":3,"names":["Disposable","derived","isDefined","arrowRevertChange","diffAddDecoration","diffAddDecorationEmpty","diffDeleteDecoration","diffDeleteDecorationEmpty","diffLineAddDecorationBackground","diffLineAddDecorationBackgroundWithIndicator","diffLineDeleteDecorationBackground","diffLineDeleteDecorationBackgroundWithIndicator","diffWholeLineAddDecoration","diffWholeLineDeleteDecoration","MovedBlocksLinesPart","applyObservableDecorations","LineRange","Position","Range","DiffEditorDecorations","constructor","_editors","_diffModel","_options","_decorations","reader","_a","diff","read","currentMove","syncedMovedTexts","renderIndicators","showEmptyDecorations","originalDecorations","modifiedDecorations","m","mappings","fullRangeOriginal","subtract","lineRangeMapping","originalRange","original","map","i","toInclusiveRange","filter","range","push","options","fullRangeModified","modifiedRange","modified","isEmpty","innerChanges","intersect","startLineNumber","endLineNumber","contains","shouldRenderRevertArrows","fromPositions","changes","movedTexts","description","blockClassName","blockPadding","movedCodeBlockPadding","_register","d"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget2/diffEditorDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { derived } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { arrowRevertChange, diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from './decorations.js';\nimport { MovedBlocksLinesPart } from './movedBlocksLines.js';\nimport { applyObservableDecorations } from './utils.js';\nimport { LineRange } from '../../../common/core/lineRange.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DiffEditorDecorations extends Disposable {\n    constructor(_editors, _diffModel, _options) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._decorations = derived('decorations', (reader) => {\n            var _a;\n            const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n            if (!diff) {\n                return null;\n            }\n            const currentMove = this._diffModel.read(reader).syncedMovedTexts.read(reader);\n            const renderIndicators = this._options.renderIndicators.read(reader);\n            const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n            const originalDecorations = [];\n            const modifiedDecorations = [];\n            for (const m of diff.mappings) {\n                const fullRangeOriginal = LineRange.subtract(m.lineRangeMapping.originalRange, currentMove === null || currentMove === void 0 ? void 0 : currentMove.lineRangeMapping.original)\n                    .map(i => i.toInclusiveRange()).filter(isDefined);\n                for (const range of fullRangeOriginal) {\n                    originalDecorations.push({ range, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                }\n                const fullRangeModified = LineRange.subtract(m.lineRangeMapping.modifiedRange, currentMove === null || currentMove === void 0 ? void 0 : currentMove.lineRangeMapping.modified)\n                    .map(i => i.toInclusiveRange()).filter(isDefined);\n                for (const range of fullRangeModified) {\n                    modifiedDecorations.push({ range, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                }\n                if (m.lineRangeMapping.modifiedRange.isEmpty || m.lineRangeMapping.originalRange.isEmpty) {\n                    for (const range of fullRangeOriginal) {\n                        originalDecorations.push({ range, options: diffWholeLineDeleteDecoration });\n                    }\n                    for (const range of fullRangeModified) {\n                        modifiedDecorations.push({ range, options: diffWholeLineAddDecoration });\n                    }\n                }\n                else {\n                    for (const i of m.lineRangeMapping.innerChanges || []) {\n                        if (currentMove\n                            && (currentMove.lineRangeMapping.original.intersect(new LineRange(i.originalRange.startLineNumber, i.originalRange.endLineNumber))\n                                || currentMove.lineRangeMapping.modified.intersect(new LineRange(i.modifiedRange.startLineNumber, i.modifiedRange.endLineNumber)))) {\n                            continue;\n                        }\n                        // Don't show empty markers outside the line range\n                        if (m.lineRangeMapping.originalRange.contains(i.originalRange.startLineNumber)) {\n                            originalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n                        }\n                        if (m.lineRangeMapping.modifiedRange.contains(i.modifiedRange.startLineNumber)) {\n                            modifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n                        }\n                    }\n                }\n                if (!m.lineRangeMapping.modifiedRange.isEmpty && this._options.shouldRenderRevertArrows.read(reader) && !currentMove) {\n                    modifiedDecorations.push({ range: Range.fromPositions(new Position(m.lineRangeMapping.modifiedRange.startLineNumber, 1)), options: arrowRevertChange });\n                }\n            }\n            if (currentMove) {\n                for (const m of currentMove.changes) {\n                    const fullRangeOriginal = m.originalRange.toInclusiveRange();\n                    if (fullRangeOriginal) {\n                        originalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    const fullRangeModified = m.modifiedRange.toInclusiveRange();\n                    if (fullRangeModified) {\n                        modifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    for (const i of m.innerChanges || []) {\n                        originalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n                        modifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n                    }\n                }\n            }\n            for (const m of diff.movedTexts) {\n                originalDecorations.push({\n                    range: m.lineRangeMapping.original.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedOriginal',\n                        blockPadding: [MovedBlocksLinesPart.movedCodeBlockPadding, 0, MovedBlocksLinesPart.movedCodeBlockPadding, MovedBlocksLinesPart.movedCodeBlockPadding],\n                    }\n                });\n                modifiedDecorations.push({\n                    range: m.lineRangeMapping.modified.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedModified',\n                        blockPadding: [4, 0, 4, 4],\n                    }\n                });\n            }\n            return { originalDecorations, modifiedDecorations };\n        });\n        this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n        this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}