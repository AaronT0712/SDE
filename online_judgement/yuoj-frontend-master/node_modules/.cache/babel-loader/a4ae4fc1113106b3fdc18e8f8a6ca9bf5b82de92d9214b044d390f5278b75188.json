{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { addDisposableListener } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { withUndefinedAsNull } from '../../../../base/common/types.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { createCombinedWorkspaceEdit } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = class CopyPasteController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(CopyPasteController.ID);\n  }\n  constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n    super();\n    this._bulkEditService = _bulkEditService;\n    this._clipboardService = _clipboardService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._quickInputService = _quickInputService;\n    this._progressService = _progressService;\n    this._editor = editor;\n    const container = editor.getContainerDomNode();\n    this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n    this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n    this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n    this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n    this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, {\n      id: changePasteTypeCommandId,\n      label: localize('postPasteWidgetTitle', \"Show paste options...\")\n    }));\n  }\n  changePasteType() {\n    this._postPasteWidgetManager.tryShowSelector();\n  }\n  pasteAs(preferredId) {\n    this._editor.focus();\n    try {\n      this._pasteAsActionContext = {\n        preferredId\n      };\n      document.execCommand('paste');\n    } finally {\n      this._pasteAsActionContext = undefined;\n    }\n  }\n  isPasteAsEnabled() {\n    return this._editor.getOption(83 /* EditorOption.pasteAs */).enabled && !this._editor.getOption(89 /* EditorOption.readOnly */);\n  }\n\n  handleCopy(e) {\n    var _a, _b;\n    if (!this._editor.hasTextFocus()) {\n      return;\n    }\n    if (platform.isWeb) {\n      // Explicitly clear the web resources clipboard.\n      // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n      // This means the resources clipboard is not properly updated when copying from the editor.\n      this._clipboardService.writeResources([]);\n    }\n    if (!e.clipboardData || !this.isPasteAsEnabled()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const selections = this._editor.getSelections();\n    if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n      return;\n    }\n    const enableEmptySelectionClipboard = this._editor.getOption(36 /* EditorOption.emptySelectionClipboard */);\n    let ranges = selections;\n    const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n    if (wasFromEmptySelection) {\n      if (!enableEmptySelectionClipboard) {\n        return;\n      }\n      ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n    }\n    const toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n    const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n    const defaultPastePayload = {\n      multicursorText,\n      pasteOnNewLine: wasFromEmptySelection,\n      mode: null\n    };\n    const providers = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(x => !!x.prepareDocumentPaste);\n    if (!providers.length) {\n      this.setCopyMetadata(e.clipboardData, {\n        defaultPastePayload\n      });\n      return;\n    }\n    const dataTransfer = toVSDataTransfer(e.clipboardData);\n    const providerCopyMimeTypes = providers.flatMap(x => {\n      var _a;\n      return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : [];\n    });\n    // Save off a handle pointing to data that VS Code maintains.\n    const handle = generateUuid();\n    this.setCopyMetadata(e.clipboardData, {\n      id: handle,\n      providerCopyMimeTypes,\n      defaultPastePayload\n    });\n    const promise = createCancelablePromise(token => __awaiter(this, void 0, void 0, function* () {\n      const results = coalesce(yield Promise.all(providers.map(provider => __awaiter(this, void 0, void 0, function* () {\n        try {\n          return yield provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n        } catch (err) {\n          console.error(err);\n          return undefined;\n        }\n      }))));\n      // Values from higher priority providers should overwrite values from lower priority ones.\n      // Reverse the array to so that the calls to `replace` below will do this\n      results.reverse();\n      for (const result of results) {\n        for (const [mime, value] of result) {\n          dataTransfer.replace(mime, value);\n        }\n      }\n      return dataTransfer;\n    }));\n    (_b = this._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n    this._currentCopyOperation = {\n      handle: handle,\n      dataTransferPromise: promise\n    };\n  }\n  handlePaste(e) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!e.clipboardData || !this._editor.hasTextFocus()) {\n        return;\n      }\n      (_a = this._currentPasteOperation) === null || _a === void 0 ? void 0 : _a.cancel();\n      this._currentPasteOperation = undefined;\n      const model = this._editor.getModel();\n      const selections = this._editor.getSelections();\n      if (!(selections === null || selections === void 0 ? void 0 : selections.length) || !model) {\n        return;\n      }\n      if (!this.isPasteAsEnabled()) {\n        return;\n      }\n      const metadata = this.fetchCopyMetadata(e);\n      const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n      dataTransfer.delete(vscodeClipboardMime);\n      const allPotentialMimeTypes = [...e.clipboardData.types, ...((_b = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _b !== void 0 ? _b : []),\n      // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n      // However we can only check the system clipboard async. For this early check, just add it in.\n      // We filter providers again once we have the final dataTransfer we will use.\n      Mimes.uriList];\n      const allProviders = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(provider => {\n        var _a;\n        return (_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => matchesMimeType(type, allPotentialMimeTypes));\n      });\n      if (!allProviders.length) {\n        return;\n      }\n      // Prevent the editor's default paste handler from running.\n      // Note that after this point, we are fully responsible for handling paste.\n      // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      if (this._pasteAsActionContext) {\n        this.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata);\n      } else {\n        this.doPasteInline(allProviders, selections, dataTransfer, metadata);\n      }\n    });\n  }\n  doPasteInline(allProviders, selections, dataTransfer, metadata) {\n    const p = createCancelablePromise(token => __awaiter(this, void 0, void 0, function* () {\n      const editor = this._editor;\n      if (!editor.hasModel()) {\n        return;\n      }\n      const model = editor.getModel();\n      const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n      try {\n        yield this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // Filter out any providers the don't match the full data transfer we will send them.\n        const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n        if (!supportedProviders.length || supportedProviders.length === 1 && supportedProviders[0].id === 'text' // Only our default text provider is active\n        ) {\n          yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n          return;\n        }\n        const providerEdits = yield this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // If the only edit returned is a text edit, use the default paste handler\n        if (providerEdits.length === 1 && providerEdits[0].id === 'text') {\n          yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n          return;\n        }\n        if (providerEdits.length) {\n          const canShowWidget = editor.getOption(83 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n          return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, {\n            activeEditIndex: 0,\n            allEdits: providerEdits\n          }, canShowWidget, tokenSource.token);\n        }\n        yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n      } finally {\n        tokenSource.dispose();\n        if (this._currentPasteOperation === p) {\n          this._currentPasteOperation = undefined;\n        }\n      }\n    }));\n    this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n    this._currentPasteOperation = p;\n  }\n  showPasteAsPick(preferredId, allProviders, selections, dataTransfer, metadata) {\n    const p = createCancelablePromise(token => __awaiter(this, void 0, void 0, function* () {\n      const editor = this._editor;\n      if (!editor.hasModel()) {\n        return;\n      }\n      const model = editor.getModel();\n      const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n      try {\n        yield this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        // Filter out any providers the don't match the full data transfer we will send them.\n        const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n        const providerEdits = yield this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        if (!providerEdits.length) {\n          return;\n        }\n        let pickedEdit;\n        if (typeof preferredId === 'string') {\n          // We are looking for a specific edit\n          pickedEdit = providerEdits.find(edit => edit.id === preferredId);\n        } else {\n          const selected = yield this._quickInputService.pick(providerEdits.map(edit => ({\n            label: edit.label,\n            description: edit.id,\n            detail: edit.detail,\n            edit\n          })), {\n            placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\")\n          });\n          pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n        }\n        if (!pickedEdit) {\n          return;\n        }\n        const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n        yield this._bulkEditService.apply(combinedWorkspaceEdit, {\n          editor: this._editor\n        });\n      } finally {\n        tokenSource.dispose();\n        if (this._currentPasteOperation === p) {\n          this._currentPasteOperation = undefined;\n        }\n      }\n    }));\n    this._progressService.withProgress({\n      location: 10 /* ProgressLocation.Window */,\n      title: localize('pasteAsProgress', \"Running paste handlers\")\n    }, () => p);\n  }\n  setCopyMetadata(dataTransfer, metadata) {\n    dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n  }\n  fetchCopyMetadata(e) {\n    if (!e.clipboardData) {\n      return;\n    }\n    // Prefer using the clipboard data we saved off\n    const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n    if (rawMetadata) {\n      try {\n        return JSON.parse(rawMetadata);\n      } catch (_a) {\n        return undefined;\n      }\n    }\n    // Otherwise try to extract the generic text editor metadata\n    const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n    if (metadata) {\n      return {\n        defaultPastePayload: {\n          mode: metadata.mode,\n          multicursorText: withUndefinedAsNull(metadata.multicursorText),\n          pasteOnNewLine: !!metadata.isFromEmptySelection\n        }\n      };\n    }\n    return undefined;\n  }\n  mergeInDataFromCopy(dataTransfer, metadata, token) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = this._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id) {\n        const toMergeDataTransfer = yield this._currentCopyOperation.dataTransferPromise;\n        if (token.isCancellationRequested) {\n          return;\n        }\n        for (const [key, value] of toMergeDataTransfer) {\n          dataTransfer.replace(key, value);\n        }\n      }\n      if (!dataTransfer.has(Mimes.uriList)) {\n        const resources = yield this._clipboardService.readResources();\n        if (token.isCancellationRequested) {\n          return;\n        }\n        if (resources.length) {\n          dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n        }\n      }\n    });\n  }\n  getPasteEdits(providers, dataTransfer, model, selections, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield raceCancellation(Promise.all(providers.map(provider => {\n        var _a;\n        try {\n          return (_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, token);\n        } catch (err) {\n          console.error(err);\n          return undefined;\n        }\n      })).then(coalesce), token);\n      result === null || result === void 0 ? void 0 : result.sort((a, b) => b.priority - a.priority);\n      return result !== null && result !== void 0 ? result : [];\n    });\n  }\n  applyDefaultPasteHandler(dataTransfer, metadata, token) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      const textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n      if (!textDataTransfer) {\n        return;\n      }\n      const text = yield textDataTransfer.asString();\n      if (token.isCancellationRequested) {\n        return;\n      }\n      const payload = {\n        text,\n        pasteOnNewLine: (_b = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _b !== void 0 ? _b : false,\n        multicursorText: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _c !== void 0 ? _c : null,\n        mode: null\n      };\n      this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n    });\n  }\n};\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = __decorate([__param(1, IInstantiationService), __param(2, IBulkEditService), __param(3, IClipboardService), __param(4, ILanguageFeaturesService), __param(5, IQuickInputService), __param(6, IProgressService)], CopyPasteController);\nexport { CopyPasteController };\nfunction isSupportedPasteProvider(provider, dataTransfer) {\n  var _a;\n  return Boolean((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => dataTransfer.matches(type)));\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","addDisposableListener","coalesce","createCancelablePromise","raceCancellation","UriList","createStringDataTransferItem","matchesMimeType","Disposable","Mimes","platform","withUndefinedAsNull","generateUuid","ClipboardEventUtils","toExternalVSDataTransfer","toVSDataTransfer","IBulkEditService","Range","ILanguageFeaturesService","createCombinedWorkspaceEdit","EditorStateCancellationTokenSource","InlineProgressManager","localize","IClipboardService","RawContextKey","IInstantiationService","IProgressService","IQuickInputService","PostEditWidgetManager","changePasteTypeCommandId","pasteWidgetVisibleCtx","vscodeClipboardMime","CopyPasteController","get","editor","getContribution","ID","constructor","instantiationService","_bulkEditService","_clipboardService","_languageFeaturesService","_quickInputService","_progressService","_editor","container","getContainerDomNode","_register","handleCopy","handlePaste","_pasteProgressManager","_postPasteWidgetManager","createInstance","id","label","changePasteType","tryShowSelector","pasteAs","preferredId","focus","_pasteAsActionContext","document","execCommand","undefined","isPasteAsEnabled","getOption","enabled","_a","_b","hasTextFocus","isWeb","writeResources","clipboardData","model","getModel","selections","getSelections","enableEmptySelectionClipboard","ranges","wasFromEmptySelection","isEmpty","startLineNumber","getLineLength","toCopy","_getViewModel","getPlainTextToCopy","isWindows","multicursorText","Array","isArray","defaultPastePayload","pasteOnNewLine","mode","providers","documentPasteEditProvider","ordered","filter","x","prepareDocumentPaste","setCopyMetadata","dataTransfer","providerCopyMimeTypes","flatMap","copyMimeTypes","handle","promise","token","results","all","map","provider","err","console","error","reverse","mime","replace","_currentCopyOperation","dataTransferPromise","cancel","_currentPasteOperation","metadata","fetchCopyMetadata","delete","allPotentialMimeTypes","types","uriList","allProviders","pasteMimeTypes","some","type","preventDefault","stopImmediatePropagation","showPasteAsPick","doPasteInline","p","hasModel","tokenSource","mergeInDataFromCopy","isCancellationRequested","supportedProviders","isSupportedPasteProvider","applyDefaultPasteHandler","providerEdits","getPasteEdits","canShowWidget","showPasteSelector","applyEditAndShowIfNeeded","activeEditIndex","allEdits","dispose","showWhile","getEndPosition","pickedEdit","find","edit","selected","pick","description","detail","placeHolder","combinedWorkspaceEdit","uri","withProgress","location","title","setData","JSON","stringify","rawMetadata","getData","parse","_","getTextData","isFromEmptySelection","toMergeDataTransfer","has","resources","readResources","append","create","provideDocumentPasteEdits","call","sort","a","b","priority","_c","textDataTransfer","text","asString","payload","trigger","Boolean","matches"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { addDisposableListener } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { withUndefinedAsNull } from '../../../../base/common/types.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { createCombinedWorkspaceEdit } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = class CopyPasteController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(CopyPasteController.ID);\n    }\n    constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n        super();\n        this._bulkEditService = _bulkEditService;\n        this._clipboardService = _clipboardService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._quickInputService = _quickInputService;\n        this._progressService = _progressService;\n        this._editor = editor;\n        const container = editor.getContainerDomNode();\n        this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n        this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n    }\n    changePasteType() {\n        this._postPasteWidgetManager.tryShowSelector();\n    }\n    pasteAs(preferredId) {\n        this._editor.focus();\n        try {\n            this._pasteAsActionContext = { preferredId };\n            document.execCommand('paste');\n        }\n        finally {\n            this._pasteAsActionContext = undefined;\n        }\n    }\n    isPasteAsEnabled() {\n        return this._editor.getOption(83 /* EditorOption.pasteAs */).enabled\n            && !this._editor.getOption(89 /* EditorOption.readOnly */);\n    }\n    handleCopy(e) {\n        var _a, _b;\n        if (!this._editor.hasTextFocus()) {\n            return;\n        }\n        if (platform.isWeb) {\n            // Explicitly clear the web resources clipboard.\n            // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n            // This means the resources clipboard is not properly updated when copying from the editor.\n            this._clipboardService.writeResources([]);\n        }\n        if (!e.clipboardData || !this.isPasteAsEnabled()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n            return;\n        }\n        const enableEmptySelectionClipboard = this._editor.getOption(36 /* EditorOption.emptySelectionClipboard */);\n        let ranges = selections;\n        const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n        if (wasFromEmptySelection) {\n            if (!enableEmptySelectionClipboard) {\n                return;\n            }\n            ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n        }\n        const toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n        const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n        const defaultPastePayload = {\n            multicursorText,\n            pasteOnNewLine: wasFromEmptySelection,\n            mode: null\n        };\n        const providers = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(x => !!x.prepareDocumentPaste);\n        if (!providers.length) {\n            this.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n            return;\n        }\n        const dataTransfer = toVSDataTransfer(e.clipboardData);\n        const providerCopyMimeTypes = providers.flatMap(x => { var _a; return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : []; });\n        // Save off a handle pointing to data that VS Code maintains.\n        const handle = generateUuid();\n        this.setCopyMetadata(e.clipboardData, {\n            id: handle,\n            providerCopyMimeTypes,\n            defaultPastePayload\n        });\n        const promise = createCancelablePromise((token) => __awaiter(this, void 0, void 0, function* () {\n            const results = coalesce(yield Promise.all(providers.map((provider) => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    return yield provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n                }\n                catch (err) {\n                    console.error(err);\n                    return undefined;\n                }\n            }))));\n            // Values from higher priority providers should overwrite values from lower priority ones.\n            // Reverse the array to so that the calls to `replace` below will do this\n            results.reverse();\n            for (const result of results) {\n                for (const [mime, value] of result) {\n                    dataTransfer.replace(mime, value);\n                }\n            }\n            return dataTransfer;\n        }));\n        (_b = this._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n        this._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n    }\n    handlePaste(e) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!e.clipboardData || !this._editor.hasTextFocus()) {\n                return;\n            }\n            (_a = this._currentPasteOperation) === null || _a === void 0 ? void 0 : _a.cancel();\n            this._currentPasteOperation = undefined;\n            const model = this._editor.getModel();\n            const selections = this._editor.getSelections();\n            if (!(selections === null || selections === void 0 ? void 0 : selections.length) || !model) {\n                return;\n            }\n            if (!this.isPasteAsEnabled()) {\n                return;\n            }\n            const metadata = this.fetchCopyMetadata(e);\n            const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n            dataTransfer.delete(vscodeClipboardMime);\n            const allPotentialMimeTypes = [\n                ...e.clipboardData.types,\n                ...(_b = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _b !== void 0 ? _b : [],\n                // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n                // However we can only check the system clipboard async. For this early check, just add it in.\n                // We filter providers again once we have the final dataTransfer we will use.\n                Mimes.uriList,\n            ];\n            const allProviders = this._languageFeaturesService.documentPasteEditProvider\n                .ordered(model)\n                .filter(provider => { var _a; return (_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => matchesMimeType(type, allPotentialMimeTypes)); });\n            if (!allProviders.length) {\n                return;\n            }\n            // Prevent the editor's default paste handler from running.\n            // Note that after this point, we are fully responsible for handling paste.\n            // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            if (this._pasteAsActionContext) {\n                this.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata);\n            }\n            else {\n                this.doPasteInline(allProviders, selections, dataTransfer, metadata);\n            }\n        });\n    }\n    doPasteInline(allProviders, selections, dataTransfer, metadata) {\n        const p = createCancelablePromise((token) => __awaiter(this, void 0, void 0, function* () {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                yield this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n                if (!supportedProviders.length\n                    || (supportedProviders.length === 1 && supportedProviders[0].id === 'text') // Only our default text provider is active\n                ) {\n                    yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n                    return;\n                }\n                const providerEdits = yield this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // If the only edit returned is a text edit, use the default paste handler\n                if (providerEdits.length === 1 && providerEdits[0].id === 'text') {\n                    yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n                    return;\n                }\n                if (providerEdits.length) {\n                    const canShowWidget = editor.getOption(83 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n                    return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, tokenSource.token);\n                }\n                yield this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        }));\n        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n        this._currentPasteOperation = p;\n    }\n    showPasteAsPick(preferredId, allProviders, selections, dataTransfer, metadata) {\n        const p = createCancelablePromise((token) => __awaiter(this, void 0, void 0, function* () {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                yield this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                const supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n                const providerEdits = yield this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                if (!providerEdits.length) {\n                    return;\n                }\n                let pickedEdit;\n                if (typeof preferredId === 'string') {\n                    // We are looking for a specific edit\n                    pickedEdit = providerEdits.find(edit => edit.id === preferredId);\n                }\n                else {\n                    const selected = yield this._quickInputService.pick(providerEdits.map((edit) => ({\n                        label: edit.label,\n                        description: edit.id,\n                        detail: edit.detail,\n                        edit,\n                    })), {\n                        placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n                    });\n                    pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n                }\n                if (!pickedEdit) {\n                    return;\n                }\n                const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n                yield this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        }));\n        this._progressService.withProgress({\n            location: 10 /* ProgressLocation.Window */,\n            title: localize('pasteAsProgress', \"Running paste handlers\"),\n        }, () => p);\n    }\n    setCopyMetadata(dataTransfer, metadata) {\n        dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n    }\n    fetchCopyMetadata(e) {\n        if (!e.clipboardData) {\n            return;\n        }\n        // Prefer using the clipboard data we saved off\n        const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n        if (rawMetadata) {\n            try {\n                return JSON.parse(rawMetadata);\n            }\n            catch (_a) {\n                return undefined;\n            }\n        }\n        // Otherwise try to extract the generic text editor metadata\n        const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n        if (metadata) {\n            return {\n                defaultPastePayload: {\n                    mode: metadata.mode,\n                    multicursorText: withUndefinedAsNull(metadata.multicursorText),\n                    pasteOnNewLine: !!metadata.isFromEmptySelection,\n                },\n            };\n        }\n        return undefined;\n    }\n    mergeInDataFromCopy(dataTransfer, metadata, token) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = this._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id) {\n                const toMergeDataTransfer = yield this._currentCopyOperation.dataTransferPromise;\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                for (const [key, value] of toMergeDataTransfer) {\n                    dataTransfer.replace(key, value);\n                }\n            }\n            if (!dataTransfer.has(Mimes.uriList)) {\n                const resources = yield this._clipboardService.readResources();\n                if (token.isCancellationRequested) {\n                    return;\n                }\n                if (resources.length) {\n                    dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n                }\n            }\n        });\n    }\n    getPasteEdits(providers, dataTransfer, model, selections, token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield raceCancellation(Promise.all(providers.map(provider => {\n                var _a;\n                try {\n                    return (_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, token);\n                }\n                catch (err) {\n                    console.error(err);\n                    return undefined;\n                }\n            })).then(coalesce), token);\n            result === null || result === void 0 ? void 0 : result.sort((a, b) => b.priority - a.priority);\n            return result !== null && result !== void 0 ? result : [];\n        });\n    }\n    applyDefaultPasteHandler(dataTransfer, metadata, token) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n            if (!textDataTransfer) {\n                return;\n            }\n            const text = yield textDataTransfer.asString();\n            if (token.isCancellationRequested) {\n                return;\n            }\n            const payload = {\n                text,\n                pasteOnNewLine: (_b = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _b !== void 0 ? _b : false,\n                multicursorText: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _c !== void 0 ? _c : null,\n                mode: null,\n            };\n            this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n        });\n    }\n};\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IBulkEditService),\n    __param(3, IClipboardService),\n    __param(4, ILanguageFeaturesService),\n    __param(5, IQuickInputService),\n    __param(6, IProgressService)\n], CopyPasteController);\nexport { CopyPasteController };\nfunction isSupportedPasteProvider(provider, dataTransfer) {\n    var _a;\n    return Boolean((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => dataTransfer.matches(type)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}