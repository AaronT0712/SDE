{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n  constructor(width, contentWidth, height, contentHeight) {\n    width = width | 0;\n    contentWidth = contentWidth | 0;\n    height = height | 0;\n    contentHeight = contentHeight | 0;\n    if (width < 0) {\n      width = 0;\n    }\n    if (contentWidth < 0) {\n      contentWidth = 0;\n    }\n    if (height < 0) {\n      height = 0;\n    }\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n    this.width = width;\n    this.contentWidth = contentWidth;\n    this.scrollWidth = Math.max(width, contentWidth);\n    this.height = height;\n    this.contentHeight = contentHeight;\n    this.scrollHeight = Math.max(height, contentHeight);\n  }\n  equals(other) {\n    return this.width === other.width && this.contentWidth === other.contentWidth && this.height === other.height && this.contentHeight === other.contentHeight;\n  }\n}\nclass EditorScrollable extends Disposable {\n  constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n    super();\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n    this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n    this._scrollable = this._register(new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration,\n      scheduleAtNextAnimationFrame\n    }));\n    this.onDidScroll = this._scrollable.onScroll;\n  }\n  getScrollable() {\n    return this._scrollable;\n  }\n  setSmoothScrollDuration(smoothScrollDuration) {\n    this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n  }\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n  getScrollDimensions() {\n    return this._dimensions;\n  }\n  setScrollDimensions(dimensions) {\n    if (this._dimensions.equals(dimensions)) {\n      return;\n    }\n    const oldDimensions = this._dimensions;\n    this._dimensions = dimensions;\n    this._scrollable.setScrollDimensions({\n      width: dimensions.width,\n      scrollWidth: dimensions.scrollWidth,\n      height: dimensions.height,\n      scrollHeight: dimensions.scrollHeight\n    }, true);\n    const contentWidthChanged = oldDimensions.contentWidth !== dimensions.contentWidth;\n    const contentHeightChanged = oldDimensions.contentHeight !== dimensions.contentHeight;\n    if (contentWidthChanged || contentHeightChanged) {\n      this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n    }\n  }\n  getFutureScrollPosition() {\n    return this._scrollable.getFutureScrollPosition();\n  }\n  getCurrentScrollPosition() {\n    return this._scrollable.getCurrentScrollPosition();\n  }\n  setScrollPositionNow(update) {\n    this._scrollable.setScrollPositionNow(update);\n  }\n  setScrollPositionSmooth(update) {\n    this._scrollable.setScrollPositionSmooth(update);\n  }\n  hasPendingScrollAnimation() {\n    return this._scrollable.hasPendingScrollAnimation();\n  }\n}\nexport class ViewLayout extends Disposable {\n  constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    super();\n    this._configuration = configuration;\n    const options = this._configuration.options;\n    const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n    const padding = options.get(82 /* EditorOption.padding */);\n    this._linesLayout = new LinesLayout(lineCount, options.get(65 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n    this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n    this._configureSmoothScrollDuration();\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n    this.onDidScroll = this._scrollable.onDidScroll;\n    this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n    this._updateHeight();\n  }\n  dispose() {\n    super.dispose();\n  }\n  getScrollable() {\n    return this._scrollable.getScrollable();\n  }\n  onHeightMaybeChanged() {\n    this._updateHeight();\n  }\n  _configureSmoothScrollDuration() {\n    this._scrollable.setSmoothScrollDuration(this._configuration.options.get(112 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n  }\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    const options = this._configuration.options;\n    if (e.hasChanged(65 /* EditorOption.lineHeight */)) {\n      this._linesLayout.setLineHeight(options.get(65 /* EditorOption.lineHeight */));\n    }\n\n    if (e.hasChanged(82 /* EditorOption.padding */)) {\n      const padding = options.get(82 /* EditorOption.padding */);\n      this._linesLayout.setPadding(padding.top, padding.bottom);\n    }\n    if (e.hasChanged(142 /* EditorOption.layoutInfo */)) {\n      const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n      const width = layoutInfo.contentWidth;\n      const height = layoutInfo.height;\n      const scrollDimensions = this._scrollable.getScrollDimensions();\n      const contentWidth = scrollDimensions.contentWidth;\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    } else {\n      this._updateHeight();\n    }\n    if (e.hasChanged(112 /* EditorOption.smoothScrolling */)) {\n      this._configureSmoothScrollDuration();\n    }\n  }\n  onFlushed(lineCount) {\n    this._linesLayout.onFlushed(lineCount);\n  }\n  onLinesDeleted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n  }\n  onLinesInserted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n  }\n  // ---- end view event handlers\n  _getHorizontalScrollbarHeight(width, scrollWidth) {\n    const options = this._configuration.options;\n    const scrollbar = options.get(101 /* EditorOption.scrollbar */);\n    if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n    if (width >= scrollWidth) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n    return scrollbar.horizontalScrollbarSize;\n  }\n  _getContentHeight(width, height, contentWidth) {\n    const options = this._configuration.options;\n    let result = this._linesLayout.getLinesTotalHeight();\n    if (options.get(103 /* EditorOption.scrollBeyondLastLine */)) {\n      result += Math.max(0, height - options.get(65 /* EditorOption.lineHeight */) - options.get(82 /* EditorOption.padding */).bottom);\n    } else {\n      result += this._getHorizontalScrollbarHeight(width, contentWidth);\n    }\n    return result;\n  }\n  _updateHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const width = scrollDimensions.width;\n    const height = scrollDimensions.height;\n    const contentWidth = scrollDimensions.contentWidth;\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n  }\n  // ---- Layouting logic\n  getCurrentViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n  getFutureViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n  _computeContentWidth(maxLineWidth) {\n    const options = this._configuration.options;\n    const wrappingInfo = options.get(143 /* EditorOption.wrappingInfo */);\n    const fontInfo = options.get(49 /* EditorOption.fontInfo */);\n    const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n    if (wrappingInfo.isViewportWrapping) {\n      const minimap = options.get(71 /* EditorOption.minimap */);\n      if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n        // This is a case where viewport wrapping is on, but the line extends above the viewport\n        if (minimap.enabled && minimap.side === 'right') {\n          // We need to accomodate the scrollbar width\n          return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n        }\n      }\n      return maxLineWidth;\n    } else {\n      const extraHorizontalSpace = options.get(102 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n      const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n      return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth);\n    }\n  }\n  setMaxLineWidth(maxLineWidth) {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    // const newScrollWidth = ;\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n    // The height might depend on the fact that there is a horizontal scrollbar or not\n    this._updateHeight();\n  }\n  // ---- view state\n  saveState() {\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n    const scrollTop = currentScrollPosition.scrollTop;\n    const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n    const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n    return {\n      scrollTop: scrollTop,\n      scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n      scrollLeft: currentScrollPosition.scrollLeft\n    };\n  }\n  // ----\n  changeWhitespace(callback) {\n    const hadAChange = this._linesLayout.changeWhitespace(callback);\n    if (hadAChange) {\n      this.onHeightMaybeChanged();\n    }\n    return hadAChange;\n  }\n  getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n    return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n  }\n  getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n    return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n  }\n  isAfterLines(verticalOffset) {\n    return this._linesLayout.isAfterLines(verticalOffset);\n  }\n  isInTopPadding(verticalOffset) {\n    return this._linesLayout.isInTopPadding(verticalOffset);\n  }\n  isInBottomPadding(verticalOffset) {\n    return this._linesLayout.isInBottomPadding(verticalOffset);\n  }\n  getLineNumberAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n  }\n  getWhitespaceAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n  }\n  getLinesViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n  getLinesViewportDataAtScrollTop(scrollTop) {\n    // do some minimal validations on scrollTop\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n      scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n    }\n    if (scrollTop < 0) {\n      scrollTop = 0;\n    }\n    return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n  }\n  getWhitespaceViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n  getWhitespaces() {\n    return this._linesLayout.getWhitespaces();\n  }\n  // ----\n  getContentWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.contentWidth;\n  }\n  getScrollWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.scrollWidth;\n  }\n  getContentHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.contentHeight;\n  }\n  getScrollHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.scrollHeight;\n  }\n  getCurrentScrollLeft() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollLeft;\n  }\n  getCurrentScrollTop() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollTop;\n  }\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n  setScrollPosition(position, type) {\n    if (type === 1 /* ScrollType.Immediate */) {\n      this._scrollable.setScrollPositionNow(position);\n    } else {\n      this._scrollable.setScrollPositionSmooth(position);\n    }\n  }\n  hasPendingScrollAnimation() {\n    return this._scrollable.hasPendingScrollAnimation();\n  }\n  deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    this._scrollable.setScrollPositionNow({\n      scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n      scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n    });\n  }\n}","map":{"version":3,"names":["Emitter","Disposable","Scrollable","LinesLayout","Viewport","ContentSizeChangedEvent","SMOOTH_SCROLLING_TIME","EditorScrollDimensions","constructor","width","contentWidth","height","contentHeight","scrollWidth","Math","max","scrollHeight","equals","other","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","_register","onDidContentSizeChange","event","_dimensions","_scrollable","forceIntegerValues","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","fire","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","update","setScrollPositionSmooth","hasPendingScrollAnimation","ViewLayout","configuration","lineCount","_configuration","options","layoutInfo","get","padding","_linesLayout","top","bottom","_configureSmoothScrollDuration","_updateHeight","dispose","onHeightMaybeChanged","onConfigurationChanged","e","hasChanged","setLineHeight","setPadding","scrollDimensions","_getContentHeight","onFlushed","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","result","getLinesTotalHeight","getCurrentViewport","currentScrollPosition","scrollTop","scrollLeft","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","fontInfo","isViewportWrapping","minimap","typicalHalfwidthCharacterWidth","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","setMaxLineWidth","saveState","firstLineNumberInViewport","getLineNumberAtOrAfterVerticalOffset","whitespaceAboveFirstLine","getWhitespaceAccumulatedHeightBeforeLineNumber","scrollTopWithoutViewZones","changeWhitespace","callback","hadAChange","getVerticalOffsetForLineNumber","lineNumber","includeViewZones","getVerticalOffsetAfterLineNumber","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtVerticalOffset","getWhitespaceAtVerticalOffset","getLinesViewportData","visibleBox","getLinesViewportDataAtScrollTop","getWhitespaceViewportData","getWhitespaces","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","position","type","deltaScrollNow","deltaScrollLeft","deltaScrollTop"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n        const padding = options.get(82 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(65 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(112 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(65 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(65 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(82 /* EditorOption.padding */)) {\n            const padding = options.get(82 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(142 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(112 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(101 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(103 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(65 /* EditorOption.lineHeight */) - options.get(82 /* EditorOption.padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth(maxLineWidth) {\n        const options = this._configuration.options;\n        const wrappingInfo = options.get(143 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(49 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(71 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(102 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        // const newScrollWidth = ;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}