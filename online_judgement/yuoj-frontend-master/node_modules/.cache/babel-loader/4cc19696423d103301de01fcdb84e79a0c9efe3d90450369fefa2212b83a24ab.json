{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { mapFind } from '../../../../base/common/arrays.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, keepAlive, observableSignal, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { subtransaction } from '../../../../base/common/observableImpl/base.js';\nimport { derivedHandleChanges } from '../../../../base/common/observableImpl/derived.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { addPositions, lengthOfText } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n  VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n  get isAcceptingPartially() {\n    return this._isAcceptingPartially;\n  }\n  constructor(textModel, selectedSuggestItem, cursorPosition, textModelVersionId, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n    super();\n    this.textModel = textModel;\n    this.selectedSuggestItem = selectedSuggestItem;\n    this.cursorPosition = cursorPosition;\n    this.textModelVersionId = textModelVersionId;\n    this._debounceValue = _debounceValue;\n    this._suggestPreviewEnabled = _suggestPreviewEnabled;\n    this._suggestPreviewMode = _suggestPreviewMode;\n    this._inlineSuggestMode = _inlineSuggestMode;\n    this._enabled = _enabled;\n    this._instantiationService = _instantiationService;\n    this._commandService = _commandService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n    this._isActive = observableValue('isActive', false);\n    this._forceUpdate = observableSignal('forceUpdate');\n    // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n    this._selectedInlineCompletionId = observableValue('selectedInlineCompletionId', undefined);\n    this._isAcceptingPartially = false;\n    this._preserveCurrentCompletionReasons = new Set([VersionIdChangeReason.Redo, VersionIdChangeReason.Undo, VersionIdChangeReason.AcceptWord]);\n    this._fetchInlineCompletions = derivedHandleChanges('fetch inline completions', {\n      createEmptyChangeSummary: () => ({\n        preserveCurrentCompletion: false,\n        inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n      }),\n      handleChange: (ctx, changeSummary) => {\n        if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n          changeSummary.preserveCurrentCompletion = true;\n        } else if (ctx.didChange(this._forceUpdate)) {\n          changeSummary.inlineCompletionTriggerKind = ctx.change;\n        }\n        return true;\n      }\n    }, (reader, changeSummary) => {\n      this._forceUpdate.read(reader);\n      const shouldUpdate = this._enabled.read(reader) && this.selectedSuggestItem.read(reader) || this._isActive.read(reader);\n      if (!shouldUpdate) {\n        this._source.cancelUpdate();\n        return undefined;\n      }\n      this.textModelVersionId.read(reader); // Refetch on text change\n      const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n      const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable) ? itemToPreserveCandidate : undefined;\n      const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestWidgetInlineCompletions && !suggestItem) {\n        const inlineCompletions = this._source.inlineCompletions.get();\n        transaction(tx => {\n          /** @description Seed inline completions with (newer) suggest widget inline completions */\n          if (inlineCompletions && suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n            this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n          }\n          this._source.clearSuggestWidgetInlineCompletions(tx);\n        });\n      }\n      const cursorPosition = this.cursorPosition.read(reader);\n      const context = {\n        triggerKind: changeSummary.inlineCompletionTriggerKind,\n        selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo()\n      };\n      return this._source.fetch(cursorPosition, context, itemToPreserve);\n    });\n    this._filteredInlineCompletionItems = derived('filteredInlineCompletionItems', reader => {\n      const c = this._source.inlineCompletions.read(reader);\n      if (!c) {\n        return [];\n      }\n      const cursorPosition = this.cursorPosition.read(reader);\n      const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n      return filteredCompletions;\n    });\n    this.selectedInlineCompletionIndex = derived('selectedCachedCompletionIndex', reader => {\n      const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this._selectedInlineCompletionId === undefined ? -1 : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n      if (idx === -1) {\n        // Reset the selection so that the selection does not jump back when it appears again\n        this._selectedInlineCompletionId.set(undefined, undefined);\n        return 0;\n      }\n      return idx;\n    });\n    this.selectedInlineCompletion = derived('selectedCachedCompletion', reader => {\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this.selectedInlineCompletionIndex.read(reader);\n      return filteredCompletions[idx];\n    });\n    this.lastTriggerKind = this._source.inlineCompletions.map(v => /** @description lastTriggerKind */v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n    this.inlineCompletionsCount = derived('selectedInlineCompletionsCount', reader => {\n      if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n        return this._filteredInlineCompletionItems.read(reader).length;\n      } else {\n        return undefined;\n      }\n    });\n    this.state = derived('ghostTextAndCompletion', reader => {\n      var _a;\n      const model = this.textModel;\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestItem) {\n        const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n        const candidateInlineCompletions = suggestWidgetInlineCompletions ? suggestWidgetInlineCompletions.inlineCompletions : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n        const suggestCompletion = suggestItem.toSingleTextEdit().removeCommonPrefix(model);\n        const augmentedCompletion = mapFind(candidateInlineCompletions, completion => {\n          let r = completion.toSingleTextEdit(reader);\n          r = r.removeCommonPrefix(model, Range.fromPositions(r.range.getStartPosition(), suggestItem.range.getEndPosition()));\n          return r.augments(suggestCompletion) ? {\n            edit: r,\n            completion\n          } : undefined;\n        });\n        const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n        if (!isSuggestionPreviewEnabled && !augmentedCompletion) {\n          return undefined;\n        }\n        const edit = (_a = augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.edit) !== null && _a !== void 0 ? _a : suggestCompletion;\n        const editPreviewLength = augmentedCompletion ? augmentedCompletion.edit.text.length - suggestCompletion.text.length : 0;\n        const mode = this._suggestPreviewMode.read(reader);\n        const cursor = this.cursorPosition.read(reader);\n        const newGhostText = edit.computeGhostText(model, mode, cursor, editPreviewLength);\n        // Show an invisible ghost text to reserve space\n        const ghostText = newGhostText !== null && newGhostText !== void 0 ? newGhostText : new GhostText(edit.range.endLineNumber, []);\n        return {\n          ghostText,\n          inlineCompletion: augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.completion,\n          suggestItem\n        };\n      } else {\n        if (!this._isActive.read(reader)) {\n          return undefined;\n        }\n        const item = this.selectedInlineCompletion.read(reader);\n        if (!item) {\n          return undefined;\n        }\n        const replacement = item.toSingleTextEdit(reader);\n        const mode = this._inlineSuggestMode.read(reader);\n        const cursor = this.cursorPosition.read(reader);\n        const ghostText = replacement.computeGhostText(model, mode, cursor);\n        return ghostText ? {\n          ghostText,\n          inlineCompletion: item,\n          suggestItem: undefined\n        } : undefined;\n      }\n    });\n    this.ghostText = derived('ghostText', reader => {\n      const v = this.state.read(reader);\n      if (!v) {\n        return undefined;\n      }\n      return v.ghostText;\n    });\n    this._register(keepAlive(this._fetchInlineCompletions, true));\n    let lastItem = undefined;\n    this._register(autorun('call handleItemDidShow', reader => {\n      var _a, _b;\n      const item = this.state.read(reader);\n      const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n      if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n        lastItem = completion;\n        if (completion) {\n          const i = completion.inlineCompletion;\n          const src = i.source;\n          (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n        }\n      }\n    }));\n  }\n  trigger(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._isActive.set(true, tx);\n      yield this._fetchInlineCompletions.get();\n    });\n  }\n  triggerExplicitly(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      subtransaction(tx, tx => {\n        this._isActive.set(true, tx);\n        this._forceUpdate.trigger(tx, InlineCompletionTriggerKind.Explicit);\n      });\n      yield this._fetchInlineCompletions.get();\n    });\n  }\n  stop(tx) {\n    subtransaction(tx, tx => {\n      this._isActive.set(false, tx);\n      this._source.clear(tx);\n    });\n  }\n  _deltaSelectedInlineCompletionIndex(delta) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.triggerExplicitly();\n      const completions = this._filteredInlineCompletionItems.get() || [];\n      if (completions.length > 0) {\n        const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n        this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n      } else {\n        this._selectedInlineCompletionId.set(undefined, undefined);\n      }\n    });\n  }\n  next() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._deltaSelectedInlineCompletionIndex(1);\n    });\n  }\n  previous() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._deltaSelectedInlineCompletionIndex(-1);\n    });\n  }\n  accept(editor) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (editor.getModel() !== this.textModel) {\n        throw new BugIndicatingError();\n      }\n      const state = this.state.get();\n      if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n        return;\n      }\n      const completion = state.inlineCompletion.toInlineCompletion(undefined);\n      editor.pushUndoStop();\n      if (completion.snippetInfo) {\n        editor.executeEdits('inlineSuggestion.accept', [EditOperation.replaceMove(completion.range, ''), ...completion.additionalTextEdits]);\n        editor.setPosition(completion.snippetInfo.range.getStartPosition());\n        (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, {\n          undoStopBefore: false\n        });\n      } else {\n        editor.executeEdits('inlineSuggestion.accept', [EditOperation.replaceMove(completion.range, completion.insertText), ...completion.additionalTextEdits]);\n      }\n      if (completion.command) {\n        // Make sure the completion list will not be disposed.\n        completion.source.addRef();\n      }\n      // Reset before invoking the command, since the command might cause a follow up trigger.\n      transaction(tx => {\n        this._source.clear(tx);\n        // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n        // if automatic inline suggestions are enabled.\n        this._isActive.set(false, tx);\n      });\n      if (completion.command) {\n        yield this._commandService.executeCommand(completion.command.id, ...(completion.command.arguments || [])).then(undefined, onUnexpectedExternalError);\n        completion.source.removeRef();\n      }\n    });\n  }\n  acceptNextWord(editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._acceptNext(editor, (pos, text) => {\n        const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n        const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n        const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n        const m1 = text.match(wordRegExp);\n        let acceptUntilIndexExclusive = 0;\n        if (m1 && m1.index !== undefined) {\n          if (m1.index === 0) {\n            acceptUntilIndexExclusive = m1[0].length;\n          } else {\n            acceptUntilIndexExclusive = m1.index;\n          }\n        } else {\n          acceptUntilIndexExclusive = text.length;\n        }\n        const wsRegExp = /\\s+/g;\n        const m2 = wsRegExp.exec(text);\n        if (m2 && m2.index !== undefined) {\n          if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n            acceptUntilIndexExclusive = m2.index + m2[0].length;\n          }\n        }\n        return acceptUntilIndexExclusive;\n      });\n    });\n  }\n  acceptNextLine(editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._acceptNext(editor, (pos, text) => {\n        const m = text.match(/\\n/);\n        if (m && m.index !== undefined) {\n          return m.index + 1;\n        }\n        return text.length;\n      });\n    });\n  }\n  _acceptNext(editor, getAcceptUntilIndex) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (editor.getModel() !== this.textModel) {\n        throw new BugIndicatingError();\n      }\n      const state = this.state.get();\n      if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n        return;\n      }\n      const ghostText = state.ghostText;\n      const completion = state.inlineCompletion.toInlineCompletion(undefined);\n      if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n        // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n        yield this.accept(editor);\n        return;\n      }\n      const firstPart = ghostText.parts[0];\n      const position = new Position(ghostText.lineNumber, firstPart.column);\n      const line = firstPart.lines.join('\\n');\n      const acceptUntilIndexExclusive = getAcceptUntilIndex(position, line);\n      if (acceptUntilIndexExclusive === line.length && ghostText.parts.length === 1) {\n        this.accept(editor);\n        return;\n      }\n      const partialText = line.substring(0, acceptUntilIndexExclusive);\n      this._isAcceptingPartially = true;\n      try {\n        editor.pushUndoStop();\n        editor.executeEdits('inlineSuggestion.accept', [EditOperation.replace(Range.fromPositions(position), partialText)]);\n        const length = lengthOfText(partialText);\n        editor.setPosition(addPositions(position, length));\n      } finally {\n        this._isAcceptingPartially = false;\n      }\n      if (completion.source.provider.handlePartialAccept) {\n        const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), addPositions(position, lengthOfText(partialText)));\n        // This assumes that the inline completion and the model use the same EOL style.\n        const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n        completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length);\n      }\n    });\n  }\n};\nInlineCompletionsModel = __decorate([__param(9, IInstantiationService), __param(10, ICommandService), __param(11, ILanguageConfigurationService)], InlineCompletionsModel);\nexport { InlineCompletionsModel };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","mapFind","BugIndicatingError","onUnexpectedExternalError","Disposable","autorun","derived","keepAlive","observableSignal","observableValue","transaction","subtransaction","derivedHandleChanges","isDefined","EditOperation","Position","Range","InlineCompletionTriggerKind","ILanguageConfigurationService","GhostText","InlineCompletionsSource","addPositions","lengthOfText","SnippetController2","ICommandService","IInstantiationService","VersionIdChangeReason","InlineCompletionsModel","isAcceptingPartially","_isAcceptingPartially","constructor","textModel","selectedSuggestItem","cursorPosition","textModelVersionId","_debounceValue","_suggestPreviewEnabled","_suggestPreviewMode","_inlineSuggestMode","_enabled","_instantiationService","_commandService","_languageConfigurationService","_source","_register","createInstance","_isActive","_forceUpdate","_selectedInlineCompletionId","undefined","_preserveCurrentCompletionReasons","Set","Redo","Undo","AcceptWord","_fetchInlineCompletions","createEmptyChangeSummary","preserveCurrentCompletion","inlineCompletionTriggerKind","Automatic","handleChange","ctx","changeSummary","didChange","has","change","reader","read","shouldUpdate","cancelUpdate","itemToPreserveCandidate","selectedInlineCompletion","get","itemToPreserve","forwardStable","suggestWidgetInlineCompletions","suggestItem","inlineCompletions","tx","request","versionId","set","clone","clearSuggestWidgetInlineCompletions","context","triggerKind","selectedSuggestionInfo","toSelectedSuggestionInfo","fetch","_filteredInlineCompletionItems","filteredCompletions","filter","isVisible","selectedInlineCompletionIndex","selectedInlineCompletionId","idx","findIndex","v","semanticId","lastTriggerKind","map","inlineCompletionsCount","Explicit","state","_a","model","candidateInlineCompletions","suggestCompletion","toSingleTextEdit","removeCommonPrefix","augmentedCompletion","completion","fromPositions","range","getStartPosition","getEndPosition","augments","edit","isSuggestionPreviewEnabled","editPreviewLength","text","mode","cursor","newGhostText","computeGhostText","ghostText","endLineNumber","inlineCompletion","item","replacement","lastItem","_b","src","source","provider","handleItemDidShow","call","sourceInlineCompletion","insertText","trigger","triggerExplicitly","stop","clear","_deltaSelectedInlineCompletionIndex","delta","completions","newIdx","previous","accept","editor","getModel","isEmpty","toInlineCompletion","pushUndoStop","snippetInfo","executeEdits","replaceMove","additionalTextEdits","setPosition","insert","snippet","undoStopBefore","command","addRef","executeCommand","id","removeRef","acceptNextWord","_acceptNext","pos","langId","getLanguageIdAtPosition","lineNumber","column","config","getLanguageConfiguration","wordRegExp","RegExp","wordDefinition","flags","replace","m1","match","acceptUntilIndexExclusive","index","wsRegExp","m2","exec","acceptNextLine","m","getAcceptUntilIndex","filterText","firstPart","parts","position","line","lines","join","partialText","substring","handlePartialAccept","acceptedRange","getValueInRange"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { mapFind } from '../../../../base/common/arrays.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, keepAlive, observableSignal, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { subtransaction } from '../../../../base/common/observableImpl/base.js';\nimport { derivedHandleChanges } from '../../../../base/common/observableImpl/derived.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { addPositions, lengthOfText } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n    VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n    get isAcceptingPartially() { return this._isAcceptingPartially; }\n    constructor(textModel, selectedSuggestItem, cursorPosition, textModelVersionId, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.selectedSuggestItem = selectedSuggestItem;\n        this.cursorPosition = cursorPosition;\n        this.textModelVersionId = textModelVersionId;\n        this._debounceValue = _debounceValue;\n        this._suggestPreviewEnabled = _suggestPreviewEnabled;\n        this._suggestPreviewMode = _suggestPreviewMode;\n        this._inlineSuggestMode = _inlineSuggestMode;\n        this._enabled = _enabled;\n        this._instantiationService = _instantiationService;\n        this._commandService = _commandService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n        this._isActive = observableValue('isActive', false);\n        this._forceUpdate = observableSignal('forceUpdate');\n        // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n        this._selectedInlineCompletionId = observableValue('selectedInlineCompletionId', undefined);\n        this._isAcceptingPartially = false;\n        this._preserveCurrentCompletionReasons = new Set([\n            VersionIdChangeReason.Redo,\n            VersionIdChangeReason.Undo,\n            VersionIdChangeReason.AcceptWord,\n        ]);\n        this._fetchInlineCompletions = derivedHandleChanges('fetch inline completions', {\n            createEmptyChangeSummary: () => ({\n                preserveCurrentCompletion: false,\n                inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n            }),\n            handleChange: (ctx, changeSummary) => {\n                if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n                    changeSummary.preserveCurrentCompletion = true;\n                }\n                else if (ctx.didChange(this._forceUpdate)) {\n                    changeSummary.inlineCompletionTriggerKind = ctx.change;\n                }\n                return true;\n            },\n        }, (reader, changeSummary) => {\n            this._forceUpdate.read(reader);\n            const shouldUpdate = (this._enabled.read(reader) && this.selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n            if (!shouldUpdate) {\n                this._source.cancelUpdate();\n                return undefined;\n            }\n            this.textModelVersionId.read(reader); // Refetch on text change\n            const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n            const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable)\n                ? itemToPreserveCandidate : undefined;\n            const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestWidgetInlineCompletions && !suggestItem) {\n                const inlineCompletions = this._source.inlineCompletions.get();\n                transaction(tx => {\n                    /** @description Seed inline completions with (newer) suggest widget inline completions */\n                    if (inlineCompletions && suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n                        this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n                    }\n                    this._source.clearSuggestWidgetInlineCompletions(tx);\n                });\n            }\n            const cursorPosition = this.cursorPosition.read(reader);\n            const context = {\n                triggerKind: changeSummary.inlineCompletionTriggerKind,\n                selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo(),\n            };\n            return this._source.fetch(cursorPosition, context, itemToPreserve);\n        });\n        this._filteredInlineCompletionItems = derived('filteredInlineCompletionItems', (reader) => {\n            const c = this._source.inlineCompletions.read(reader);\n            if (!c) {\n                return [];\n            }\n            const cursorPosition = this.cursorPosition.read(reader);\n            const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n            return filteredCompletions;\n        });\n        this.selectedInlineCompletionIndex = derived('selectedCachedCompletionIndex', (reader) => {\n            const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this._selectedInlineCompletionId === undefined ? -1\n                : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n            if (idx === -1) {\n                // Reset the selection so that the selection does not jump back when it appears again\n                this._selectedInlineCompletionId.set(undefined, undefined);\n                return 0;\n            }\n            return idx;\n        });\n        this.selectedInlineCompletion = derived('selectedCachedCompletion', (reader) => {\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this.selectedInlineCompletionIndex.read(reader);\n            return filteredCompletions[idx];\n        });\n        this.lastTriggerKind = this._source.inlineCompletions.map(v => /** @description lastTriggerKind */ v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n        this.inlineCompletionsCount = derived('selectedInlineCompletionsCount', reader => {\n            if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n                return this._filteredInlineCompletionItems.read(reader).length;\n            }\n            else {\n                return undefined;\n            }\n        });\n        this.state = derived('ghostTextAndCompletion', (reader) => {\n            var _a;\n            const model = this.textModel;\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestItem) {\n                const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n                const candidateInlineCompletions = suggestWidgetInlineCompletions\n                    ? suggestWidgetInlineCompletions.inlineCompletions\n                    : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n                const suggestCompletion = suggestItem.toSingleTextEdit().removeCommonPrefix(model);\n                const augmentedCompletion = mapFind(candidateInlineCompletions, completion => {\n                    let r = completion.toSingleTextEdit(reader);\n                    r = r.removeCommonPrefix(model, Range.fromPositions(r.range.getStartPosition(), suggestItem.range.getEndPosition()));\n                    return r.augments(suggestCompletion) ? { edit: r, completion } : undefined;\n                });\n                const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n                if (!isSuggestionPreviewEnabled && !augmentedCompletion) {\n                    return undefined;\n                }\n                const edit = (_a = augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.edit) !== null && _a !== void 0 ? _a : suggestCompletion;\n                const editPreviewLength = augmentedCompletion ? augmentedCompletion.edit.text.length - suggestCompletion.text.length : 0;\n                const mode = this._suggestPreviewMode.read(reader);\n                const cursor = this.cursorPosition.read(reader);\n                const newGhostText = edit.computeGhostText(model, mode, cursor, editPreviewLength);\n                // Show an invisible ghost text to reserve space\n                const ghostText = newGhostText !== null && newGhostText !== void 0 ? newGhostText : new GhostText(edit.range.endLineNumber, []);\n                return { ghostText, inlineCompletion: augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.completion, suggestItem };\n            }\n            else {\n                if (!this._isActive.read(reader)) {\n                    return undefined;\n                }\n                const item = this.selectedInlineCompletion.read(reader);\n                if (!item) {\n                    return undefined;\n                }\n                const replacement = item.toSingleTextEdit(reader);\n                const mode = this._inlineSuggestMode.read(reader);\n                const cursor = this.cursorPosition.read(reader);\n                const ghostText = replacement.computeGhostText(model, mode, cursor);\n                return ghostText ? { ghostText, inlineCompletion: item, suggestItem: undefined } : undefined;\n            }\n        });\n        this.ghostText = derived('ghostText', (reader) => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v.ghostText;\n        });\n        this._register(keepAlive(this._fetchInlineCompletions, true));\n        let lastItem = undefined;\n        this._register(autorun('call handleItemDidShow', reader => {\n            var _a, _b;\n            const item = this.state.read(reader);\n            const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n            if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n                lastItem = completion;\n                if (completion) {\n                    const i = completion.inlineCompletion;\n                    const src = i.source;\n                    (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n                }\n            }\n        }));\n    }\n    trigger(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._isActive.set(true, tx);\n            yield this._fetchInlineCompletions.get();\n        });\n    }\n    triggerExplicitly(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            subtransaction(tx, tx => {\n                this._isActive.set(true, tx);\n                this._forceUpdate.trigger(tx, InlineCompletionTriggerKind.Explicit);\n            });\n            yield this._fetchInlineCompletions.get();\n        });\n    }\n    stop(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(false, tx);\n            this._source.clear(tx);\n        });\n    }\n    _deltaSelectedInlineCompletionIndex(delta) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.triggerExplicitly();\n            const completions = this._filteredInlineCompletionItems.get() || [];\n            if (completions.length > 0) {\n                const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n                this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n            }\n            else {\n                this._selectedInlineCompletionId.set(undefined, undefined);\n            }\n        });\n    }\n    next() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._deltaSelectedInlineCompletionIndex(1);\n        });\n    }\n    previous() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._deltaSelectedInlineCompletionIndex(-1);\n        });\n    }\n    accept(editor) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (editor.getModel() !== this.textModel) {\n                throw new BugIndicatingError();\n            }\n            const state = this.state.get();\n            if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n                return;\n            }\n            const completion = state.inlineCompletion.toInlineCompletion(undefined);\n            editor.pushUndoStop();\n            if (completion.snippetInfo) {\n                editor.executeEdits('inlineSuggestion.accept', [\n                    EditOperation.replaceMove(completion.range, ''),\n                    ...completion.additionalTextEdits\n                ]);\n                editor.setPosition(completion.snippetInfo.range.getStartPosition());\n                (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n            }\n            else {\n                editor.executeEdits('inlineSuggestion.accept', [\n                    EditOperation.replaceMove(completion.range, completion.insertText),\n                    ...completion.additionalTextEdits\n                ]);\n            }\n            if (completion.command) {\n                // Make sure the completion list will not be disposed.\n                completion.source.addRef();\n            }\n            // Reset before invoking the command, since the command might cause a follow up trigger.\n            transaction(tx => {\n                this._source.clear(tx);\n                // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n                // if automatic inline suggestions are enabled.\n                this._isActive.set(false, tx);\n            });\n            if (completion.command) {\n                yield this._commandService\n                    .executeCommand(completion.command.id, ...(completion.command.arguments || []))\n                    .then(undefined, onUnexpectedExternalError);\n                completion.source.removeRef();\n            }\n        });\n    }\n    acceptNextWord(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._acceptNext(editor, (pos, text) => {\n                const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n                const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n                const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n                const m1 = text.match(wordRegExp);\n                let acceptUntilIndexExclusive = 0;\n                if (m1 && m1.index !== undefined) {\n                    if (m1.index === 0) {\n                        acceptUntilIndexExclusive = m1[0].length;\n                    }\n                    else {\n                        acceptUntilIndexExclusive = m1.index;\n                    }\n                }\n                else {\n                    acceptUntilIndexExclusive = text.length;\n                }\n                const wsRegExp = /\\s+/g;\n                const m2 = wsRegExp.exec(text);\n                if (m2 && m2.index !== undefined) {\n                    if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n                        acceptUntilIndexExclusive = m2.index + m2[0].length;\n                    }\n                }\n                return acceptUntilIndexExclusive;\n            });\n        });\n    }\n    acceptNextLine(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._acceptNext(editor, (pos, text) => {\n                const m = text.match(/\\n/);\n                if (m && m.index !== undefined) {\n                    return m.index + 1;\n                }\n                return text.length;\n            });\n        });\n    }\n    _acceptNext(editor, getAcceptUntilIndex) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (editor.getModel() !== this.textModel) {\n                throw new BugIndicatingError();\n            }\n            const state = this.state.get();\n            if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n                return;\n            }\n            const ghostText = state.ghostText;\n            const completion = state.inlineCompletion.toInlineCompletion(undefined);\n            if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n                // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n                yield this.accept(editor);\n                return;\n            }\n            const firstPart = ghostText.parts[0];\n            const position = new Position(ghostText.lineNumber, firstPart.column);\n            const line = firstPart.lines.join('\\n');\n            const acceptUntilIndexExclusive = getAcceptUntilIndex(position, line);\n            if (acceptUntilIndexExclusive === line.length && ghostText.parts.length === 1) {\n                this.accept(editor);\n                return;\n            }\n            const partialText = line.substring(0, acceptUntilIndexExclusive);\n            this._isAcceptingPartially = true;\n            try {\n                editor.pushUndoStop();\n                editor.executeEdits('inlineSuggestion.accept', [\n                    EditOperation.replace(Range.fromPositions(position), partialText),\n                ]);\n                const length = lengthOfText(partialText);\n                editor.setPosition(addPositions(position, length));\n            }\n            finally {\n                this._isAcceptingPartially = false;\n            }\n            if (completion.source.provider.handlePartialAccept) {\n                const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), addPositions(position, lengthOfText(partialText)));\n                // This assumes that the inline completion and the model use the same EOL style.\n                const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n                completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length);\n            }\n        });\n    }\n};\nInlineCompletionsModel = __decorate([\n    __param(9, IInstantiationService),\n    __param(10, ICommandService),\n    __param(11, ILanguageConfigurationService)\n], InlineCompletionsModel);\nexport { InlineCompletionsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}