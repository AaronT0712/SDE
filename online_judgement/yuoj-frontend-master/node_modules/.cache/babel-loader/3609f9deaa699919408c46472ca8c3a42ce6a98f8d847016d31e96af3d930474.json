{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport * as assert from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport './media/diffEditor.css';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffNavigator } from './diffNavigator.js';\nimport { DiffReview } from './diffReview.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { WorkerBasedDocumentDiffProvider } from './workerBasedDocumentDiffProvider.js';\nimport { clampedFloat, clampedInt, EditorFontLigatures, EditorOptions, boolean as validateBooleanOption, stringSet as validateStringSetOption } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport * as nls from '../../../nls.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { defaultInsertColor, defaultRemoveColor, diffDiagonalFill, diffInserted, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { getThemeTypeSelector, IThemeService, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nclass VisualEditorState {\n  constructor(_contextMenuService, _clipboardService) {\n    this._contextMenuService = _contextMenuService;\n    this._clipboardService = _clipboardService;\n    this._zones = [];\n    this._inlineDiffMargins = [];\n    this._zonesMap = {};\n    this._decorations = [];\n  }\n  getForeignViewZones(allViewZones) {\n    return allViewZones.filter(z => !this._zonesMap[String(z.id)]);\n  }\n  clean(editor) {\n    // (1) View zones\n    if (this._zones.length > 0) {\n      editor.changeViewZones(viewChangeAccessor => {\n        for (const zoneId of this._zones) {\n          viewChangeAccessor.removeZone(zoneId);\n        }\n      });\n    }\n    this._zones = [];\n    this._zonesMap = {};\n    // (2) Model decorations\n    editor.changeDecorations(changeAccessor => {\n      this._decorations = changeAccessor.deltaDecorations(this._decorations, []);\n    });\n  }\n  apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n    const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null;\n    // view zones\n    editor.changeViewZones(viewChangeAccessor => {\n      var _a;\n      for (const zoneId of this._zones) {\n        viewChangeAccessor.removeZone(zoneId);\n      }\n      for (const inlineDiffMargin of this._inlineDiffMargins) {\n        inlineDiffMargin.dispose();\n      }\n      this._zones = [];\n      this._zonesMap = {};\n      this._inlineDiffMargins = [];\n      for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n        const viewZone = newDecorations.zones[i];\n        viewZone.suppressMouseDown = true;\n        viewZone.showInHiddenAreas = true;\n        const zoneId = viewChangeAccessor.addZone(viewZone);\n        this._zones.push(zoneId);\n        this._zonesMap[String(zoneId)] = true;\n        if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n          viewZone.suppressMouseDown = false;\n          if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n            // do not contribute diff margin actions for newly created files\n            this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n          }\n        }\n      }\n    });\n    scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(editor);\n    // decorations\n    editor.changeDecorations(changeAccessor => {\n      this._decorations = changeAccessor.deltaDecorations(this._decorations, newDecorations.decorations);\n    });\n    // overview ruler\n    overviewRuler === null || overviewRuler === void 0 ? void 0 : overviewRuler.setZones(newDecorations.overviewZones);\n  }\n}\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nexport const diffEditorWidgetTtPolicy = createTrustedTypesPolicy('diffEditorWidget', {\n  createHTML: value => value\n});\nconst ariaNavigationTip = nls.localize('diff-aria-navigation-tip', ' use Shift + F7 to navigate changes');\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n  constructor(domElement, options, codeEditorWidgetOptions, clipboardService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n    super();\n    this._editorProgressService = _editorProgressService;\n    this._onDidDispose = this._register(new Emitter());\n    this.onDidDispose = this._onDidDispose.event;\n    this._onDidChangeModel = this._register(new Emitter());\n    this.onDidChangeModel = this._onDidChangeModel.event;\n    this._onDidUpdateDiff = this._register(new Emitter());\n    this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this._lastOriginalWarning = null;\n    this._lastModifiedWarning = null;\n    codeEditorService.willCreateDiffEditor();\n    this._documentDiffProvider = this._register(instantiationService.createInstance(WorkerBasedDocumentDiffProvider, options));\n    this._register(this._documentDiffProvider.onDidChange(e => this._beginUpdateDecorationsSoon()));\n    this._codeEditorService = codeEditorService;\n    this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n    this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n    this._contextKeyService.createKey('isInDiffEditor', true);\n    this._themeService = themeService;\n    this._notificationService = notificationService;\n    this._id = ++DIFF_EDITOR_ID;\n    this._state = 0 /* editorBrowser.DiffEditorState.Idle */;\n    this._updatingDiffProgress = null;\n    this._domElement = domElement;\n    options = options || {};\n    this._options = validateDiffEditorOptions(options, {\n      enableSplitViewResizing: true,\n      splitViewDefaultRatio: 0.5,\n      renderSideBySide: true,\n      renderMarginRevertIcon: true,\n      maxComputationTime: 5000,\n      maxFileSize: 50,\n      ignoreTrimWhitespace: true,\n      renderIndicators: true,\n      originalEditable: false,\n      diffCodeLens: false,\n      renderOverviewRuler: true,\n      diffWordWrap: 'inherit',\n      diffAlgorithm: 'advanced',\n      accessibilityVerbose: false,\n      experimental: {\n        collapseUnchangedRegions: false\n      },\n      isInEmbeddedEditor: false,\n      onlyShowAccessibleDiffViewer: false\n    });\n    this.isEmbeddedDiffEditorKey = EditorContextKeys.isEmbeddedDiffEditor.bindTo(this._contextKeyService);\n    this.isEmbeddedDiffEditorKey.set(typeof options.isInEmbeddedEditor !== 'undefined' ? options.isInEmbeddedEditor : false);\n    this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n    this._containerDomElement = document.createElement('div');\n    this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    this._containerDomElement.style.position = 'relative';\n    this._containerDomElement.style.height = '100%';\n    this._domElement.appendChild(this._containerDomElement);\n    this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n    this._overviewViewportDomElement.setClassName('diffViewport');\n    this._overviewViewportDomElement.setPosition('absolute');\n    this._overviewDomElement = document.createElement('div');\n    this._overviewDomElement.className = 'diffOverview';\n    this._overviewDomElement.style.position = 'absolute';\n    this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n    this._register(dom.addStandardDisposableListener(this._overviewDomElement, dom.EventType.POINTER_DOWN, e => {\n      this._modifiedEditor.delegateVerticalScrollbarPointerDown(e);\n    }));\n    this._register(dom.addDisposableListener(this._overviewDomElement, dom.EventType.MOUSE_WHEEL, e => {\n      this._modifiedEditor.delegateScrollFromMouseWheelEvent(e);\n    }, {\n      passive: false\n    }));\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.appendChild(this._overviewDomElement);\n    }\n    // Create left side\n    this._originalDomNode = document.createElement('div');\n    this._originalDomNode.className = 'editor original';\n    this._originalDomNode.style.position = 'absolute';\n    this._originalDomNode.style.height = '100%';\n    this._containerDomElement.appendChild(this._originalDomNode);\n    // Create right side\n    this._modifiedDomNode = document.createElement('div');\n    this._modifiedDomNode.className = 'editor modified';\n    this._modifiedDomNode.style.position = 'absolute';\n    this._modifiedDomNode.style.height = '100%';\n    this._containerDomElement.appendChild(this._modifiedDomNode);\n    this._beginUpdateDecorationsTimeout = -1;\n    this._currentlyChangingViewZones = false;\n    this._diffComputationToken = 0;\n    this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._isVisible = true;\n    this._isHandlingScrollEvent = false;\n    this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n    this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n    if (options.automaticLayout) {\n      this._elementSizeObserver.startObserving();\n    }\n    this._diffComputationResult = null;\n    this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n    this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n    this._originalOverviewRuler = null;\n    this._modifiedOverviewRuler = null;\n    this._reviewPane = instantiationService.createInstance(DiffReview, this);\n    this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n    this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n    this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n    if (this._options.renderSideBySide) {\n      this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio));\n    } else {\n      this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n    }\n    this._register(themeService.onDidColorThemeChange(t => {\n      if (this._strategy && this._strategy.applyColors(t)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    }));\n    const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n    for (const desc of contributions) {\n      try {\n        this._register(instantiationService.createInstance(desc.ctor, this));\n      } catch (err) {\n        onUnexpectedError(err);\n      }\n    }\n    this._codeEditorService.addDiffEditor(this);\n  }\n  _setState(newState) {\n    if (this._state === newState) {\n      return;\n    }\n    this._state = newState;\n    if (this._updatingDiffProgress) {\n      this._updatingDiffProgress.done();\n      this._updatingDiffProgress = null;\n    }\n    if (this._state === 1 /* editorBrowser.DiffEditorState.ComputingDiff */) {\n      this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n    }\n  }\n  accessibleDiffViewerNext() {\n    this._reviewPane.next();\n  }\n  accessibleDiffViewerPrev() {\n    this._reviewPane.prev();\n  }\n  static _getClassName(theme, renderSideBySide) {\n    let result = 'monaco-diff-editor monaco-editor-background ';\n    if (renderSideBySide) {\n      result += 'side-by-side ';\n    }\n    result += getThemeTypeSelector(theme.type);\n    return result;\n  }\n  _disposeOverviewRulers() {\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n      this._originalOverviewRuler.dispose();\n      this._originalOverviewRuler = null;\n    }\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n      this._modifiedOverviewRuler.dispose();\n      this._modifiedOverviewRuler = null;\n    }\n  }\n  _createOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n    assert.ok(!this._originalOverviewRuler && !this._modifiedOverviewRuler);\n    if (this._originalEditor.hasModel()) {\n      this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n      this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n    }\n    if (this._modifiedEditor.hasModel()) {\n      this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n      this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n    }\n    this._layoutOverviewRulers();\n  }\n  _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n      this._isHandlingScrollEvent = true;\n      this._modifiedEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n      this._isHandlingScrollEvent = false;\n      this._layoutOverviewViewport();\n    }));\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n      if (e.hasChanged(49 /* EditorOption.fontInfo */)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      if (e.hasChanged(143 /* EditorOption.wrappingInfo */)) {\n        this._updateDecorationsRunner.cancel();\n        this._updateDecorations();\n      }\n    }));\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n      this._updateDecorations();\n    }));\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n    const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n    return editor;\n  }\n  _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n      this._isHandlingScrollEvent = true;\n      this._originalEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n      this._isHandlingScrollEvent = false;\n      this._layoutOverviewViewport();\n    }));\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n      if (e.hasChanged(49 /* EditorOption.fontInfo */)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      if (e.hasChanged(143 /* EditorOption.wrappingInfo */)) {\n        this._updateDecorationsRunner.cancel();\n        this._updateDecorations();\n      }\n    }));\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n      this._updateDecorations();\n    }));\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n    this._register(editor.onDidChangeModelOptions(e => {\n      if (e.tabSize) {\n        this._updateDecorationsRunner.schedule();\n      }\n    }));\n    const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n    // Revert change when an arrow is clicked.\n    this._register(editor.onMouseDown(event => {\n      var _a, _b;\n      if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('arrow-revert-change'))) {\n        const lineNumber = event.target.position.lineNumber;\n        const viewZone = event.target;\n        const change = (_b = this._diffComputationResult) === null || _b === void 0 ? void 0 : _b.changes.find(c =>\n        // delete change\n        (viewZone === null || viewZone === void 0 ? void 0 : viewZone.detail.afterLineNumber) === c.modifiedStartLineNumber ||\n        // other changes\n        c.modifiedEndLineNumber > 0 && c.modifiedStartLineNumber === lineNumber);\n        if (change) {\n          this.revertChange(change);\n        }\n        event.event.stopPropagation();\n        this._updateDecorations();\n        return;\n      }\n    }));\n    return editor;\n  }\n  /**\n   * Reverts a change in the modified editor.\n   */\n  revertChange(change) {\n    const editor = this._modifiedEditor;\n    const original = this._originalEditor.getModel();\n    const modified = this._modifiedEditor.getModel();\n    if (!original || !modified || !editor) {\n      return;\n    }\n    const originalRange = change.originalEndLineNumber > 0 ? new Range(change.originalStartLineNumber, 1, change.originalEndLineNumber, original.getLineMaxColumn(change.originalEndLineNumber)) : null;\n    const originalContent = originalRange ? original.getValueInRange(originalRange) : null;\n    const newRange = change.modifiedEndLineNumber > 0 ? new Range(change.modifiedStartLineNumber, 1, change.modifiedEndLineNumber, modified.getLineMaxColumn(change.modifiedEndLineNumber)) : null;\n    const eol = modified.getEOL();\n    if (change.originalEndLineNumber === 0 && newRange) {\n      // Insert change.\n      // To revert: delete the new content and a linebreak (if possible)\n      let range = newRange;\n      if (change.modifiedStartLineNumber > 1) {\n        // Try to include a linebreak from before.\n        range = newRange.setStartPosition(change.modifiedStartLineNumber - 1, modified.getLineMaxColumn(change.modifiedStartLineNumber - 1));\n      } else if (change.modifiedEndLineNumber < modified.getLineCount()) {\n        // Try to include the linebreak from after.\n        range = newRange.setEndPosition(change.modifiedEndLineNumber + 1, 1);\n      }\n      editor.executeEdits('diffEditor', [{\n        range,\n        text: ''\n      }]);\n    } else if (change.modifiedEndLineNumber === 0 && originalContent !== null) {\n      // Delete change.\n      // To revert: insert the old content and a linebreak.\n      const insertAt = change.modifiedStartLineNumber < modified.getLineCount() ? new Position(change.modifiedStartLineNumber + 1, 1) : new Position(change.modifiedStartLineNumber, modified.getLineMaxColumn(change.modifiedStartLineNumber));\n      editor.executeEdits('diffEditor', [{\n        range: Range.fromPositions(insertAt, insertAt),\n        text: change.modifiedStartLineNumber < modified.getLineCount() ? originalContent + eol : eol + originalContent\n      }]);\n    } else if (newRange && originalContent !== null) {\n      // Modified change.\n      editor.executeEdits('diffEditor', [{\n        range: newRange,\n        text: originalContent\n      }]);\n    }\n  }\n  _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n    return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n  }\n  dispose() {\n    this._codeEditorService.removeDiffEditor(this);\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n    this._cleanViewZonesAndDecorations();\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n      this._originalOverviewRuler.dispose();\n    }\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n      this._modifiedOverviewRuler.dispose();\n    }\n    this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.removeChild(this._overviewDomElement);\n    }\n    this._containerDomElement.removeChild(this._originalDomNode);\n    this._originalEditor.dispose();\n    this._containerDomElement.removeChild(this._modifiedDomNode);\n    this._modifiedEditor.dispose();\n    this._strategy.dispose();\n    this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n    this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n    this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n    this._reviewPane.dispose();\n    this._domElement.removeChild(this._containerDomElement);\n    this._onDidDispose.fire();\n    super.dispose();\n  }\n  //------------ begin IDiffEditor methods\n  getId() {\n    return this.getEditorType() + ':' + this._id;\n  }\n  getEditorType() {\n    return editorCommon.EditorType.IDiffEditor;\n  }\n  getLineChanges() {\n    if (!this._diffComputationResult) {\n      return null;\n    }\n    return this._diffComputationResult.changes;\n  }\n  getOriginalEditor() {\n    return this._originalEditor;\n  }\n  getModifiedEditor() {\n    return this._modifiedEditor;\n  }\n  updateOptions(_newOptions) {\n    const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n    const changed = changedDiffEditorOptions(this._options, newOptions);\n    this._options = newOptions;\n    this.isEmbeddedDiffEditorKey.set(typeof _newOptions.isInEmbeddedEditor !== 'undefined' ? _newOptions.isInEmbeddedEditor : false);\n    const beginUpdateDecorations = changed.ignoreTrimWhitespace || changed.renderIndicators || changed.renderMarginRevertIcon;\n    const beginUpdateDecorationsSoon = this._isVisible && (changed.maxComputationTime || changed.maxFileSize);\n    this._documentDiffProvider.setOptions(newOptions);\n    if (beginUpdateDecorations) {\n      this._beginUpdateDecorations();\n    } else if (beginUpdateDecorationsSoon) {\n      this._beginUpdateDecorationsSoon();\n    }\n    this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n    this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions));\n    // enableSplitViewResizing\n    this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio);\n    // renderSideBySide\n    if (changed.renderSideBySide) {\n      if (this._options.renderSideBySide) {\n        this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio));\n      } else {\n        this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n      }\n      // Update class name\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    }\n    // renderOverviewRuler\n    if (changed.renderOverviewRuler) {\n      if (this._options.renderOverviewRuler) {\n        this._containerDomElement.appendChild(this._overviewDomElement);\n      } else {\n        this._containerDomElement.removeChild(this._overviewDomElement);\n      }\n    }\n  }\n  getModel() {\n    return {\n      original: this._originalEditor.getModel(),\n      modified: this._modifiedEditor.getModel()\n    };\n  }\n  createViewModel(model) {\n    return {\n      model,\n      waitForDiff() {\n        return __awaiter(this, void 0, void 0, function* () {\n          // noop\n        });\n      }\n    };\n  }\n  setModel(model) {\n    if (model && 'model' in model) {\n      model = model.model;\n    }\n    // Guard us against partial null model\n    if (model && (!model.original || !model.modified)) {\n      throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n    }\n    // Remove all view zones & decorations\n    this._cleanViewZonesAndDecorations();\n    this._disposeOverviewRulers();\n    // Update code editor models\n    this._originalEditor.setModel(model ? model.original : null);\n    this._modifiedEditor.setModel(model ? model.modified : null);\n    this._updateDecorationsRunner.cancel();\n    // this.originalEditor.onDidChangeModelOptions\n    if (model) {\n      this._originalEditor.setScrollTop(0);\n      this._modifiedEditor.setScrollTop(0);\n    }\n    // Disable any diff computations that will come in\n    this._diffComputationResult = null;\n    this._diffComputationToken++;\n    this._setState(0 /* editorBrowser.DiffEditorState.Idle */);\n    if (model) {\n      this._createOverviewRulers();\n      // Begin comparing\n      this._beginUpdateDecorations();\n    }\n    this._layoutOverviewViewport();\n    this._onDidChangeModel.fire();\n    // Diff navigator\n    this._diffNavigator = this._register(this._instantiationService.createInstance(DiffNavigator, this, {\n      alwaysRevealFirst: false,\n      findResultLoop: this.getModifiedEditor().getOption(40 /* EditorOption.find */).loop\n    }));\n  }\n  getContainerDomNode() {\n    return this._domElement;\n  }\n  // #region editorBrowser.IDiffEditor: Delegating to modified Editor\n  getVisibleColumnFromPosition(position) {\n    return this._modifiedEditor.getVisibleColumnFromPosition(position);\n  }\n  getPosition() {\n    return this._modifiedEditor.getPosition();\n  }\n  setPosition(position, source = 'api') {\n    this._modifiedEditor.setPosition(position, source);\n  }\n  revealLine(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLine(lineNumber, scrollType);\n  }\n  revealLineInCenter(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n  }\n  revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n  }\n  revealLineNearTop(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n  }\n  revealPosition(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealPosition(position, scrollType);\n  }\n  revealPositionInCenter(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealPositionInCenter(position, scrollType);\n  }\n  revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n  }\n  revealPositionNearTop(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealPositionNearTop(position, scrollType);\n  }\n  getSelection() {\n    return this._modifiedEditor.getSelection();\n  }\n  getSelections() {\n    return this._modifiedEditor.getSelections();\n  }\n  setSelection(something, source = 'api') {\n    this._modifiedEditor.setSelection(something, source);\n  }\n  setSelections(ranges, source = 'api') {\n    this._modifiedEditor.setSelections(ranges, source);\n  }\n  revealLines(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n  }\n  revealRange(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n    this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n  }\n  revealRangeInCenter(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealRangeInCenter(range, scrollType);\n  }\n  revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n  }\n  revealRangeNearTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealRangeNearTop(range, scrollType);\n  }\n  revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n  }\n  revealRangeAtTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n    this._modifiedEditor.revealRangeAtTop(range, scrollType);\n  }\n  getSupportedActions() {\n    return this._modifiedEditor.getSupportedActions();\n  }\n  focus() {\n    this._modifiedEditor.focus();\n  }\n  trigger(source, handlerId, payload) {\n    this._modifiedEditor.trigger(source, handlerId, payload);\n  }\n  createDecorationsCollection(decorations) {\n    return this._modifiedEditor.createDecorationsCollection(decorations);\n  }\n  changeDecorations(callback) {\n    return this._modifiedEditor.changeDecorations(callback);\n  }\n  // #endregion\n  saveViewState() {\n    const originalViewState = this._originalEditor.saveViewState();\n    const modifiedViewState = this._modifiedEditor.saveViewState();\n    return {\n      original: originalViewState,\n      modified: modifiedViewState\n    };\n  }\n  restoreViewState(s) {\n    if (s && s.original && s.modified) {\n      const diffEditorState = s;\n      this._originalEditor.restoreViewState(diffEditorState.original);\n      this._modifiedEditor.restoreViewState(diffEditorState.modified);\n    }\n  }\n  layout(dimension) {\n    this._elementSizeObserver.observe(dimension);\n  }\n  hasTextFocus() {\n    return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n  }\n  //------------ end IDiffEditor methods\n  //------------ begin layouting methods\n  _onDidContainerSizeChanged() {\n    this._doLayout();\n  }\n  _getReviewHeight() {\n    return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n  }\n  _layoutOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n    if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n      return;\n    }\n    const height = this._elementSizeObserver.getHeight();\n    const reviewHeight = this._getReviewHeight();\n    const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n    if (layoutInfo) {\n      this._originalOverviewRuler.setLayout({\n        top: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n      this._modifiedOverviewRuler.setLayout({\n        top: 0,\n        right: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n    }\n  }\n  //------------ end layouting methods\n  _onViewZonesChanged() {\n    if (this._currentlyChangingViewZones) {\n      return;\n    }\n    this._updateDecorationsRunner.schedule();\n  }\n  _beginUpdateDecorationsSoon() {\n    // Clear previous timeout if necessary\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n    this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n  }\n  static _equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    if (!a || !b) {\n      return false;\n    }\n    return a.toString() === b.toString();\n  }\n  _beginUpdateDecorations() {\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      // Cancel any pending requests in case this method is called directly\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n    const currentOriginalModel = this._originalEditor.getModel();\n    const currentModifiedModel = this._modifiedEditor.getModel();\n    if (!currentOriginalModel || !currentModifiedModel) {\n      return;\n    }\n    // Prevent old diff requests to come if a new request has been initiated\n    // The best method would be to call cancel on the Promise, but this is not\n    // yet supported, so using tokens for now.\n    this._diffComputationToken++;\n    const currentToken = this._diffComputationToken;\n    const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n    const canSyncModelForDiff = model => {\n      const bufferTextLength = model.getValueLength();\n      return diffLimit === 0 || bufferTextLength <= diffLimit;\n    };\n    if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n      if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning) || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n        this._lastOriginalWarning = currentOriginalModel.uri;\n        this._lastModifiedWarning = currentModifiedModel.uri;\n        this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n      }\n      return;\n    }\n    this._setState(1 /* editorBrowser.DiffEditorState.ComputingDiff */);\n    this._documentDiffProvider.computeDiff(currentOriginalModel, currentModifiedModel, {\n      ignoreTrimWhitespace: this._options.ignoreTrimWhitespace,\n      maxComputationTimeMs: this._options.maxComputationTime,\n      computeMoves: false\n    }).then(result => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n        this._diffComputationResult = {\n          identical: result.identical,\n          quitEarly: result.quitEarly,\n          changes2: result.changes,\n          changes: result.changes.map(m => {\n            // TODO don't do this translation, but use the diff result directly\n            let originalStartLineNumber;\n            let originalEndLineNumber;\n            let modifiedStartLineNumber;\n            let modifiedEndLineNumber;\n            let innerChanges = m.innerChanges;\n            if (m.originalRange.isEmpty) {\n              // Insertion\n              originalStartLineNumber = m.originalRange.startLineNumber - 1;\n              originalEndLineNumber = 0;\n              innerChanges = undefined;\n            } else {\n              originalStartLineNumber = m.originalRange.startLineNumber;\n              originalEndLineNumber = m.originalRange.endLineNumberExclusive - 1;\n            }\n            if (m.modifiedRange.isEmpty) {\n              // Deletion\n              modifiedStartLineNumber = m.modifiedRange.startLineNumber - 1;\n              modifiedEndLineNumber = 0;\n              innerChanges = undefined;\n            } else {\n              modifiedStartLineNumber = m.modifiedRange.startLineNumber;\n              modifiedEndLineNumber = m.modifiedRange.endLineNumberExclusive - 1;\n            }\n            return {\n              originalStartLineNumber,\n              originalEndLineNumber,\n              modifiedStartLineNumber,\n              modifiedEndLineNumber,\n              charChanges: innerChanges === null || innerChanges === void 0 ? void 0 : innerChanges.map(m => ({\n                originalStartLineNumber: m.originalRange.startLineNumber,\n                originalStartColumn: m.originalRange.startColumn,\n                originalEndLineNumber: m.originalRange.endLineNumber,\n                originalEndColumn: m.originalRange.endColumn,\n                modifiedStartLineNumber: m.modifiedRange.startLineNumber,\n                modifiedStartColumn: m.modifiedRange.startColumn,\n                modifiedEndLineNumber: m.modifiedRange.endLineNumber,\n                modifiedEndColumn: m.modifiedRange.endColumn\n              }))\n            };\n          })\n        };\n        this._updateDecorationsRunner.schedule();\n        this._onDidUpdateDiff.fire();\n      }\n    }, error => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n        this._diffComputationResult = null;\n        this._updateDecorationsRunner.schedule();\n      }\n    });\n  }\n  _cleanViewZonesAndDecorations() {\n    this._originalEditorState.clean(this._originalEditor);\n    this._modifiedEditorState.clean(this._modifiedEditor);\n  }\n  _updateDecorations() {\n    if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n      return;\n    }\n    const lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n    const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n    const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n    const renderMarginRevertIcon = this._options.renderMarginRevertIcon && !this._modifiedEditor.getOption(89 /* EditorOption.readOnly */);\n    const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, renderMarginRevertIcon, foreignOriginal, foreignModified);\n    try {\n      this._currentlyChangingViewZones = true;\n      this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n      this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n    } finally {\n      this._currentlyChangingViewZones = false;\n    }\n  }\n  _adjustOptionsForSubEditor(options) {\n    const clonedOptions = Object.assign({}, options);\n    clonedOptions.inDiffEditor = true;\n    clonedOptions.automaticLayout = false;\n    // Clone scrollbar options before changing them\n    clonedOptions.scrollbar = Object.assign({}, clonedOptions.scrollbar || {});\n    clonedOptions.scrollbar.vertical = 'visible';\n    clonedOptions.folding = false;\n    clonedOptions.codeLens = this._options.diffCodeLens;\n    clonedOptions.fixedOverflowWidgets = true;\n    // clonedOptions.lineDecorationsWidth = '2ch';\n    // Clone minimap options before changing them\n    clonedOptions.minimap = Object.assign({}, clonedOptions.minimap || {});\n    clonedOptions.minimap.enabled = false;\n    return clonedOptions;\n  }\n  _adjustOptionsForLeftHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n    if (!this._options.renderSideBySide) {\n      // never wrap hidden editor\n      result.wordWrapOverride1 = 'off';\n      result.wordWrapOverride2 = 'off';\n      result.stickyScroll = {\n        enabled: false\n      };\n    } else {\n      result.wordWrapOverride1 = this._options.diffWordWrap;\n    }\n    if (options.originalAriaLabel) {\n      result.ariaLabel = options.originalAriaLabel;\n    }\n    this._updateAriaLabel(result);\n    result.readOnly = !this._options.originalEditable;\n    result.dropIntoEditor = {\n      enabled: !result.readOnly\n    };\n    result.extraEditorClassName = 'original-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n  _updateAriaLabel(options) {\n    var _a;\n    let ariaLabel = (_a = options.ariaLabel) !== null && _a !== void 0 ? _a : '';\n    if (this._options.accessibilityVerbose) {\n      ariaLabel += ariaNavigationTip;\n    } else if (ariaLabel) {\n      ariaLabel = ariaLabel.replaceAll(ariaNavigationTip, '');\n    }\n    options.ariaLabel = ariaLabel;\n  }\n  _adjustOptionsForRightHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n    if (options.modifiedAriaLabel) {\n      result.ariaLabel = options.modifiedAriaLabel;\n    }\n    this._updateAriaLabel(result);\n    result.wordWrapOverride1 = this._options.diffWordWrap;\n    result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    result.scrollbar.verticalHasArrows = false;\n    result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n  doLayout() {\n    this._elementSizeObserver.observe();\n    this._doLayout();\n  }\n  _doLayout() {\n    const width = this._elementSizeObserver.getWidth();\n    const height = this._elementSizeObserver.getHeight();\n    const reviewHeight = this._getReviewHeight();\n    const splitPoint = this._strategy.layout();\n    this._originalDomNode.style.width = splitPoint + 'px';\n    this._originalDomNode.style.left = '0px';\n    this._modifiedDomNode.style.width = width - splitPoint - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._modifiedDomNode.style.left = splitPoint + 'px';\n    this._overviewDomElement.style.top = '0px';\n    this._overviewDomElement.style.height = height - reviewHeight + 'px';\n    this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewDomElement.style.left = width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n    this._overviewViewportDomElement.setHeight(30);\n    this._originalEditor.layout({\n      width: splitPoint,\n      height: height - reviewHeight\n    });\n    this._modifiedEditor.layout({\n      width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0),\n      height: height - reviewHeight\n    });\n    if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n      this._layoutOverviewRulers();\n    }\n    this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n    this._layoutOverviewViewport();\n  }\n  _layoutOverviewViewport() {\n    const layout = this._computeOverviewViewport();\n    if (!layout) {\n      this._overviewViewportDomElement.setTop(0);\n      this._overviewViewportDomElement.setHeight(0);\n    } else {\n      this._overviewViewportDomElement.setTop(layout.top);\n      this._overviewViewportDomElement.setHeight(layout.height);\n    }\n  }\n  _computeOverviewViewport() {\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n    if (!layoutInfo) {\n      return null;\n    }\n    const scrollTop = this._modifiedEditor.getScrollTop();\n    const scrollHeight = this._modifiedEditor.getScrollHeight();\n    const computedAvailableSize = Math.max(0, layoutInfo.height);\n    const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n    const computedRatio = scrollHeight > 0 ? computedRepresentableSize / scrollHeight : 0;\n    const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n    const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n    return {\n      height: computedSliderSize,\n      top: computedSliderPosition\n    };\n  }\n  _createDataSource() {\n    return {\n      getWidth: () => {\n        return this._elementSizeObserver.getWidth();\n      },\n      getHeight: () => {\n        return this._elementSizeObserver.getHeight() - this._getReviewHeight();\n      },\n      getOptions: () => {\n        return {\n          renderOverviewRuler: this._options.renderOverviewRuler\n        };\n      },\n      getContainerDomNode: () => {\n        return this._containerDomElement;\n      },\n      relayoutEditors: () => {\n        this._doLayout();\n      },\n      getOriginalEditor: () => {\n        return this._originalEditor;\n      },\n      getModifiedEditor: () => {\n        return this._modifiedEditor;\n      }\n    };\n  }\n  _setStrategy(newStrategy) {\n    var _a;\n    (_a = this._strategy) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._strategy = newStrategy;\n    if (this._boundarySashes) {\n      newStrategy.setBoundarySashes(this._boundarySashes);\n    }\n    newStrategy.applyColors(this._themeService.getColorTheme());\n    if (this._diffComputationResult) {\n      this._updateDecorations();\n    }\n    // Just do a layout, the strategy might need it\n    this._doLayout();\n  }\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\nDiffEditorWidget = __decorate([__param(3, IClipboardService), __param(4, IContextKeyService), __param(5, IInstantiationService), __param(6, ICodeEditorService), __param(7, IThemeService), __param(8, INotificationService), __param(9, IContextMenuService), __param(10, IEditorProgressService)], DiffEditorWidget);\nexport { DiffEditorWidget };\nclass DiffEditorWidgetStyle extends Disposable {\n  constructor(dataSource) {\n    super();\n    this._dataSource = dataSource;\n    this._insertColor = null;\n    this._removeColor = null;\n  }\n  applyColors(theme) {\n    const newInsertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n    const newRemoveColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n    const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n    this._insertColor = newInsertColor;\n    this._removeColor = newRemoveColor;\n    return hasChanges;\n  }\n  getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon, originalWhitespaces, modifiedWhitespaces) {\n    // Get view zones\n    modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    originalWhitespaces = originalWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators);\n    // Get decorations & overview ruler zones\n    const originalDecorations = this._getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators);\n    const modifiedDecorations = this._getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon);\n    return {\n      original: {\n        decorations: originalDecorations.decorations,\n        overviewZones: originalDecorations.overviewZones,\n        zones: zones.original\n      },\n      modified: {\n        decorations: modifiedDecorations.decorations,\n        overviewZones: modifiedDecorations.overviewZones,\n        zones: zones.modified\n      }\n    };\n  }\n  setBoundarySashes(_sashes) {\n    // To be implemented by subclasses\n  }\n}\nclass ForeignViewZonesIterator {\n  constructor(source) {\n    this._source = source;\n    this._index = -1;\n    this.current = null;\n    this.advance();\n  }\n  advance() {\n    this._index++;\n    if (this._index < this._source.length) {\n      this.current = this._source[this._index];\n    } else {\n      this.current = null;\n    }\n  }\n}\nclass ViewZonesComputer {\n  constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n    this._lineChanges = _lineChanges;\n    this._originalForeignVZ = _originalForeignVZ;\n    this._modifiedForeignVZ = _modifiedForeignVZ;\n    this._originalEditor = _originalEditor;\n    this._modifiedEditor = _modifiedEditor;\n  }\n  static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n    const model = editor.getModel();\n    const viewModel = editor._getViewModel();\n    if (model && viewModel) {\n      const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n      return viewRange.endLineNumber - viewRange.startLineNumber + 1;\n    }\n    return endLineNumber - startLineNumber + 1;\n  }\n  getViewZones() {\n    const originalLineHeight = this._originalEditor.getOption(65 /* EditorOption.lineHeight */);\n    const modifiedLineHeight = this._modifiedEditor.getOption(65 /* EditorOption.lineHeight */);\n    const originalHasWrapping = this._originalEditor.getOption(143 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const modifiedHasWrapping = this._modifiedEditor.getOption(143 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const hasWrapping = originalHasWrapping || modifiedHasWrapping;\n    const originalModel = this._originalEditor.getModel();\n    const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n    const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n    const result = {\n      original: [],\n      modified: []\n    };\n    let lineChangeModifiedLength = 0;\n    let lineChangeOriginalLength = 0;\n    let originalEquivalentLineNumber = 0;\n    let modifiedEquivalentLineNumber = 0;\n    let originalEndEquivalentLineNumber = 0;\n    let modifiedEndEquivalentLineNumber = 0;\n    const sortMyViewZones = (a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    };\n    const addAndCombineIfPossible = (destination, item) => {\n      if (item.domNode === null && destination.length > 0) {\n        const lastItem = destination[destination.length - 1];\n        if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n          lastItem.heightInLines += item.heightInLines;\n          return;\n        }\n      }\n      destination.push(item);\n    };\n    const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n    const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n    let lastOriginalLineNumber = 1;\n    let lastModifiedLineNumber = 1;\n    // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n    for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n      const lineChange = i < length ? this._lineChanges[i] : null;\n      if (lineChange !== null) {\n        originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0;\n        lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0;\n        originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n      } else {\n        // Increase to very large value to get the producing tests of foreign view zones running\n        originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n        modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n        originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n        modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n      }\n      // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n      let stepOriginal = [];\n      let stepModified = [];\n      // ---------------------------- PRODUCE VIEW ZONES\n      // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n      if (hasWrapping) {\n        let count;\n        if (lineChange) {\n          if (lineChange.originalEndLineNumber > 0) {\n            count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n          } else {\n            count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n          }\n        } else {\n          // `lastOriginalLineNumber` has not been looked at yet\n          count = originalModel.getLineCount() - lastOriginalLineNumber + 1;\n        }\n        for (let i = 0; i < count; i++) {\n          const originalLineNumber = lastOriginalLineNumber + i;\n          const modifiedLineNumber = lastModifiedLineNumber + i;\n          const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n          const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n          if (originalViewLineCount < modifiedViewLineCount) {\n            stepOriginal.push({\n              afterLineNumber: originalLineNumber,\n              heightInLines: modifiedViewLineCount - originalViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          } else if (originalViewLineCount > modifiedViewLineCount) {\n            stepModified.push({\n              afterLineNumber: modifiedLineNumber,\n              heightInLines: originalViewLineCount - modifiedViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          }\n        }\n        if (lineChange) {\n          lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n          lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n        }\n      }\n      // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n      while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n        if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n          viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = originalEndEquivalentLineNumber;\n        }\n        let marginDomNode = null;\n        if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n          marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n        }\n        stepOriginal.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n          domNode: null,\n          marginDomNode: marginDomNode\n        });\n        modifiedForeignVZ.advance();\n      }\n      // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n      while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n        if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n          viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n        }\n        stepModified.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: originalForeignVZ.current.height / originalLineHeight,\n          domNode: null\n        });\n        originalForeignVZ.advance();\n      }\n      if (lineChange !== null && isChangeOrInsert(lineChange)) {\n        const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n        if (r) {\n          stepOriginal.push(r);\n        }\n      }\n      if (lineChange !== null && isChangeOrDelete(lineChange)) {\n        const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n        if (r) {\n          stepModified.push(r);\n        }\n      }\n      // ---------------------------- END PRODUCE VIEW ZONES\n      // ---------------------------- EMIT MINIMAL VIEW ZONES\n      // [CANCEL & EMIT] Try to cancel view zones out\n      let stepOriginalIndex = 0;\n      let stepModifiedIndex = 0;\n      stepOriginal = stepOriginal.sort(sortMyViewZones);\n      stepModified = stepModified.sort(sortMyViewZones);\n      while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n        const original = stepOriginal[stepOriginalIndex];\n        const modified = stepModified[stepModifiedIndex];\n        const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n        const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n        if (originalDelta < modifiedDelta) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modifiedDelta < originalDelta) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else if (original.shouldNotShrink) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modified.shouldNotShrink) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else {\n          if (original.heightInLines >= modified.heightInLines) {\n            // modified view zone gets removed\n            original.heightInLines -= modified.heightInLines;\n            stepModifiedIndex++;\n          } else {\n            // original view zone gets removed\n            modified.heightInLines -= original.heightInLines;\n            stepOriginalIndex++;\n          }\n        }\n      }\n      // [EMIT] Remaining original view zones\n      while (stepOriginalIndex < stepOriginal.length) {\n        addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n        stepOriginalIndex++;\n      }\n      // [EMIT] Remaining modified view zones\n      while (stepModifiedIndex < stepModified.length) {\n        addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n        stepModifiedIndex++;\n      }\n      // ---------------------------- END EMIT MINIMAL VIEW ZONES\n    }\n\n    return {\n      original: ViewZonesComputer._ensureDomNodes(result.original),\n      modified: ViewZonesComputer._ensureDomNodes(result.modified)\n    };\n  }\n  static _ensureDomNodes(zones) {\n    return zones.map(z => {\n      if (!z.domNode) {\n        z.domNode = createFakeLinesDiv();\n      }\n      return z;\n    });\n  }\n}\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n  return {\n    range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n    options: options\n  };\n}\nconst DECORATIONS = {\n  arrowRevertChange: ModelDecorationOptions.register({\n    description: 'diff-editor-arrow-revert-change',\n    glyphMarginHoverMessage: new MarkdownString(undefined, {\n      isTrusted: true,\n      supportThemeIcons: true\n    }).appendMarkdown(nls.localize('revertChangeHoverMessage', 'Click to revert change')),\n    glyphMarginClassName: 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight),\n    zIndex: 10001\n  }),\n  charDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete',\n    className: 'char-delete'\n  }),\n  charDeleteWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete-whole-line',\n    className: 'char-delete',\n    isWholeLine: true\n  }),\n  charInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert',\n    className: 'char-insert'\n  }),\n  charInsertWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert-whole-line',\n    className: 'char-insert',\n    isWholeLine: true\n  }),\n  lineInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert',\n    className: \"line-insert\" /* DiffEditorLineClasses.Insert */,\n    marginClassName: 'gutter-insert',\n    isWholeLine: true\n  }),\n  lineInsertWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert-with-sign',\n    className: \"line-insert\" /* DiffEditorLineClasses.Insert */,\n    linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n    marginClassName: 'gutter-insert',\n    isWholeLine: true\n  }),\n  lineDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete',\n    className: \"line-delete\" /* DiffEditorLineClasses.Delete */,\n    marginClassName: 'gutter-delete',\n    isWholeLine: true\n  }),\n  lineDeleteWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-with-sign',\n    className: \"line-delete\" /* DiffEditorLineClasses.Delete */,\n    linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n    marginClassName: 'gutter-delete',\n    isWholeLine: true\n  }),\n  lineDeleteMargin: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-margin',\n    marginClassName: 'gutter-delete'\n  })\n};\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing, defaultSashRatio) {\n    super(dataSource);\n    this._disableSash = enableSplitViewResizing === false;\n    this._defaultRatio = defaultSashRatio;\n    this._sashRatio = null;\n    this._sashPosition = null;\n    this._startSashPosition = null;\n    this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, {\n      orientation: 0 /* Orientation.VERTICAL */\n    }));\n    if (this._disableSash) {\n      this._sash.state = 0 /* SashState.Disabled */;\n    }\n\n    this._sash.onDidStart(() => this._onSashDragStart());\n    this._sash.onDidChange(e => this._onSashDrag(e));\n    this._sash.onDidEnd(() => this._onSashDragEnd());\n    this._sash.onDidReset(() => this._onSashReset());\n  }\n  setEnableSplitViewResizing(enableSplitViewResizing, defaultRatio) {\n    this._defaultRatio = defaultRatio;\n    const newDisableSash = enableSplitViewResizing === false;\n    if (this._disableSash !== newDisableSash) {\n      this._disableSash = newDisableSash;\n      this._sash.state = this._disableSash ? 0 /* SashState.Disabled */ : 3 /* SashState.Enabled */;\n    }\n  }\n\n  layout(sashRatio = this._sashRatio || this._defaultRatio) {\n    const w = this._dataSource.getWidth();\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    let sashPosition = Math.floor((sashRatio || this._defaultRatio) * contentWidth);\n    const midPoint = Math.floor(this._defaultRatio * contentWidth);\n    sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n    if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n      if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n      if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n    } else {\n      sashPosition = midPoint;\n    }\n    if (this._sashPosition !== sashPosition) {\n      this._sashPosition = sashPosition;\n    }\n    this._sash.layout();\n    return this._sashPosition;\n  }\n  _onSashDragStart() {\n    this._startSashPosition = this._sashPosition;\n  }\n  _onSashDrag(e) {\n    const w = this._dataSource.getWidth();\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n    this._sashRatio = sashPosition / contentWidth;\n    this._dataSource.relayoutEditors();\n  }\n  _onSashDragEnd() {\n    this._sash.layout();\n  }\n  _onSashReset() {\n    this._sashRatio = this._defaultRatio;\n    this._dataSource.relayoutEditors();\n    this._sash.layout();\n  }\n  getVerticalSashTop(sash) {\n    return 0;\n  }\n  getVerticalSashLeft(sash) {\n    return this._sashPosition;\n  }\n  getVerticalSashHeight(sash) {\n    return this._dataSource.getHeight();\n  }\n  setBoundarySashes(sashes) {\n    this._sash.orthogonalEndSash = sashes.bottom;\n  }\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    return c.getViewZones();\n  }\n  _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const originalModel = originalEditor.getModel();\n    const originalViewModel = originalEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete\n        });\n        if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charDeleteWholeLine));\n        }\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrDelete(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.originalStartLineNumber) {\n                    startColumn = charChange.originalStartColumn;\n                  } else {\n                    startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.originalEndLineNumber) {\n                    endColumn = charChange.originalEndColumn;\n                  } else {\n                    endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n  _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n    const modifiedViewModel = modifiedEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      // Arrows for reverting changes.\n      if (renderMarginRevertIcon) {\n        if (lineChange.modifiedEndLineNumber > 0) {\n          result.decorations.push({\n            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber, 1),\n            options: DECORATIONS.arrowRevertChange\n          });\n        } else {\n          const viewZone = zones.modified.find(z => z.afterLineNumber === lineChange.modifiedStartLineNumber);\n          if (viewZone) {\n            viewZone.marginDomNode = createViewZoneMarginArrow();\n          }\n        }\n      }\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n        }\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n  }\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    return null;\n  }\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeModifiedLength > lineChangeOriginalLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n        heightInLines: lineChangeModifiedLength - lineChangeOriginalLength,\n        domNode: null\n      };\n    }\n    return null;\n  }\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeOriginalLength > lineChangeModifiedLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n        heightInLines: lineChangeOriginalLength - lineChangeModifiedLength,\n        domNode: null\n      };\n    }\n    return null;\n  }\n}\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing) {\n    super(dataSource);\n    this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n    this._register(dataSource.getOriginalEditor().onDidLayoutChange(layoutInfo => {\n      if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        dataSource.relayoutEditors();\n      }\n    }));\n  }\n  setEnableSplitViewResizing(enableSplitViewResizing) {\n    // Nothing to do..\n  }\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n    return computer.getViewZones();\n  }\n  _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const originalModel = originalEditor.getModel();\n    const originalViewModel = originalEditor._getViewModel();\n    let zoneIndex = 0;\n    for (const lineChange of lineChanges) {\n      // Add overview zones in the overview ruler\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: DECORATIONS.lineDeleteMargin\n        });\n        while (zoneIndex < zones.modified.length) {\n          const zone = zones.modified[zoneIndex];\n          if (zone.diff && zone.diff.originalStartLineNumber >= lineChange.originalStartLineNumber) {\n            break;\n          }\n          zoneIndex++;\n        }\n        let zoneHeightInLines = 0;\n        if (zoneIndex < zones.modified.length) {\n          const zone = zones.modified[zoneIndex];\n          if (zone.diff && zone.diff.originalStartLineNumber === lineChange.originalStartLineNumber && zone.diff.originalEndLineNumber === lineChange.originalEndLineNumber && zone.diff.modifiedStartLineNumber === lineChange.modifiedStartLineNumber && zone.diff.modifiedEndLineNumber === lineChange.modifiedEndLineNumber) {\n            zoneHeightInLines = zone.heightInLines;\n          }\n        }\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, zoneHeightInLines, overviewZoneColor));\n      }\n    }\n    return result;\n  }\n  _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n    const modifiedViewModel = modifiedEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      // Add decorations & overview zones\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        } else {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n        }\n      }\n    }\n    return result;\n  }\n  layout() {\n    // An editor should not be smaller than 5px\n    return Math.max(5, this._decorationsLeft);\n  }\n}\nclass InlineViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    this._originalModel = originalEditor.getModel();\n    this._renderIndicators = renderIndicators;\n    this._pendingLineChange = [];\n    this._pendingViewZones = [];\n    this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n  }\n  getViewZones() {\n    const result = super.getViewZones();\n    this._finalize(result);\n    return result;\n  }\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    const result = document.createElement('div');\n    result.className = 'inline-added-margin-view-zone';\n    return result;\n  }\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-added-margin-view-zone';\n    return {\n      afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n      heightInLines: lineChangeModifiedLength,\n      domNode: document.createElement('div'),\n      marginDomNode: marginDomNode\n    };\n  }\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const domNode = document.createElement('div');\n    domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-deleted-margin-view-zone';\n    const viewZone = {\n      shouldNotShrink: true,\n      afterLineNumber: lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1,\n      heightInLines: lineChangeOriginalLength,\n      minWidthInPx: 0,\n      domNode: domNode,\n      marginDomNode: marginDomNode,\n      diff: {\n        originalStartLineNumber: lineChange.originalStartLineNumber,\n        originalEndLineNumber: lineChange.originalEndLineNumber,\n        modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n        modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n        originalModel: this._originalModel,\n        viewLineCounts: null\n      }\n    };\n    for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n      this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n    }\n    this._pendingLineChange.push(lineChange);\n    this._pendingViewZones.push(viewZone);\n    return viewZone;\n  }\n  _finalize(result) {\n    const modifiedEditorOptions = this._modifiedEditor.getOptions();\n    const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n    const fontInfo = modifiedEditorOptions.get(49 /* EditorOption.fontInfo */);\n    const disableMonospaceOptimizations = modifiedEditorOptions.get(32 /* EditorOption.disableMonospaceOptimizations */);\n    const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    const scrollBeyondLastColumn = modifiedEditorOptions.get(102 /* EditorOption.scrollBeyondLastColumn */);\n    const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n    const mightContainRTL = this._originalModel.mightContainRTL();\n    const lineHeight = modifiedEditorOptions.get(65 /* EditorOption.lineHeight */);\n    const layoutInfo = modifiedEditorOptions.get(142 /* EditorOption.layoutInfo */);\n    const lineDecorationsWidth = layoutInfo.decorationsWidth;\n    const stopRenderingLineAfter = modifiedEditorOptions.get(115 /* EditorOption.stopRenderingLineAfter */);\n    const renderWhitespace = modifiedEditorOptions.get(97 /* EditorOption.renderWhitespace */);\n    const renderControlCharacters = modifiedEditorOptions.get(92 /* EditorOption.renderControlCharacters */);\n    const fontLigatures = modifiedEditorOptions.get(50 /* EditorOption.fontLigatures */);\n    const lineBreaks = this._lineBreaksComputer.finalize();\n    let lineBreakIndex = 0;\n    for (let i = 0; i < this._pendingLineChange.length; i++) {\n      const lineChange = this._pendingLineChange[i];\n      const viewZone = this._pendingViewZones[i];\n      const domNode = viewZone.domNode;\n      applyFontInfo(domNode, fontInfo);\n      const marginDomNode = viewZone.marginDomNode;\n      applyFontInfo(marginDomNode, fontInfo);\n      const decorations = [];\n      if (lineChange.charChanges) {\n        for (const charChange of lineChange.charChanges) {\n          if (isCharChangeOrDelete(charChange)) {\n            decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0 /* InlineDecorationType.Regular */));\n          }\n        }\n      }\n\n      const hasCharChanges = decorations.length > 0;\n      const sb = new StringBuilder(10000);\n      let maxCharsPerLine = 0;\n      let renderedLineCount = 0;\n      let viewLineCounts = null;\n      for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n        const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n        const lineTokens = this._originalModel.tokenization.getLineTokens(lineNumber);\n        const lineContent = lineTokens.getLineContent();\n        const lineBreakData = lineBreaks[lineBreakIndex++];\n        const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n        if (lineBreakData) {\n          let lastBreakOffset = 0;\n          for (const breakOffset of lineBreakData.breakOffsets) {\n            const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n            const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n            maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n            lastBreakOffset = breakOffset;\n          }\n          if (!viewLineCounts) {\n            viewLineCounts = [];\n          }\n          // make sure all lines before this one have an entry in `viewLineCounts`\n          while (viewLineCounts.length < lineIndex) {\n            viewLineCounts[viewLineCounts.length] = 1;\n          }\n          viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n          viewZone.heightInLines += lineBreakData.breakOffsets.length - 1;\n          const marginDomNode2 = document.createElement('div');\n          marginDomNode2.className = 'gutter-delete';\n          result.original.push({\n            afterLineNumber: lineNumber,\n            afterColumn: 0,\n            heightInLines: lineBreakData.breakOffsets.length - 1,\n            domNode: createFakeLinesDiv(),\n            marginDomNode: marginDomNode2\n          });\n        } else {\n          maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n        }\n      }\n      maxCharsPerLine += scrollBeyondLastColumn;\n      const html = sb.build();\n      const trustedhtml = diffEditorWidgetTtPolicy ? diffEditorWidgetTtPolicy.createHTML(html) : html;\n      domNode.innerHTML = trustedhtml;\n      viewZone.minWidthInPx = maxCharsPerLine * typicalHalfwidthCharacterWidth;\n      if (viewLineCounts) {\n        // make sure all lines have an entry in `viewLineCounts`\n        const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n        while (viewLineCounts.length <= cnt) {\n          viewLineCounts[viewLineCounts.length] = 1;\n        }\n      }\n      viewZone.diff.viewLineCounts = viewLineCounts;\n    }\n    result.original.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n  }\n  _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n    sb.appendString('<div class=\"view-line');\n    if (!hasCharChanges) {\n      // No char changes\n      sb.appendString(' char-delete');\n    }\n    sb.appendString('\" style=\"top:');\n    sb.appendString(String(renderedLineCount * lineHeight));\n    sb.appendString('px;width:1000000px;\">');\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n    const output = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendString('</div>');\n    if (this._renderIndicators) {\n      const marginElement = document.createElement('div');\n      marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n      marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n      marginDomNode.appendChild(marginElement);\n    }\n    return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n  }\n}\nfunction validateDiffWordWrap(value, defaultValue) {\n  return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\nfunction isChangeOrInsert(lineChange) {\n  return lineChange.modifiedEndLineNumber > 0;\n}\nfunction isChangeOrDelete(lineChange) {\n  return lineChange.originalEndLineNumber > 0;\n}\nfunction isCharChangeOrInsert(charChange) {\n  if (charChange.modifiedStartLineNumber === charChange.modifiedEndLineNumber) {\n    return charChange.modifiedEndColumn - charChange.modifiedStartColumn > 0;\n  }\n  return charChange.modifiedEndLineNumber - charChange.modifiedStartLineNumber > 0;\n}\nfunction isCharChangeOrDelete(charChange) {\n  if (charChange.originalStartLineNumber === charChange.originalEndLineNumber) {\n    return charChange.originalEndColumn - charChange.originalStartColumn > 0;\n  }\n  return charChange.originalEndLineNumber - charChange.originalStartLineNumber > 0;\n}\nfunction createFakeLinesDiv() {\n  const r = document.createElement('div');\n  r.className = 'diagonal-fill';\n  return r;\n}\nfunction createViewZoneMarginArrow() {\n  const arrow = document.createElement('div');\n  arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n  return dom.$('div', {}, arrow);\n}\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n  const lineCount = model.getLineCount();\n  startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n  endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n  return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\nfunction validateDiffEditorOptions(options, defaults) {\n  return {\n    enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n    splitViewDefaultRatio: clampedFloat(options.splitViewDefaultRatio, 0.5, 0.1, 0.9),\n    renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n    renderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n    maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n    maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n    ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n    renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n    originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n    diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n    renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n    diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap),\n    diffAlgorithm: validateStringSetOption(options.diffAlgorithm, defaults.diffAlgorithm, ['legacy', 'advanced'], {\n      'smart': 'legacy',\n      'experimental': 'advanced'\n    }),\n    accessibilityVerbose: validateBooleanOption(options.accessibilityVerbose, defaults.accessibilityVerbose),\n    experimental: {\n      collapseUnchangedRegions: false\n    },\n    isInEmbeddedEditor: validateBooleanOption(options.isInEmbeddedEditor, defaults.isInEmbeddedEditor),\n    onlyShowAccessibleDiffViewer: false\n  };\n}\nfunction changedDiffEditorOptions(a, b) {\n  return {\n    enableSplitViewResizing: a.enableSplitViewResizing !== b.enableSplitViewResizing,\n    renderSideBySide: a.renderSideBySide !== b.renderSideBySide,\n    renderMarginRevertIcon: a.renderMarginRevertIcon !== b.renderMarginRevertIcon,\n    maxComputationTime: a.maxComputationTime !== b.maxComputationTime,\n    maxFileSize: a.maxFileSize !== b.maxFileSize,\n    ignoreTrimWhitespace: a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace,\n    renderIndicators: a.renderIndicators !== b.renderIndicators,\n    originalEditable: a.originalEditable !== b.originalEditable,\n    diffCodeLens: a.diffCodeLens !== b.diffCodeLens,\n    renderOverviewRuler: a.renderOverviewRuler !== b.renderOverviewRuler,\n    diffWordWrap: a.diffWordWrap !== b.diffWordWrap,\n    diffAlgorithm: a.diffAlgorithm !== b.diffAlgorithm,\n    accessibilityVerbose: a.accessibilityVerbose !== b.accessibilityVerbose\n  };\n}\nregisterThemingParticipant((theme, collector) => {\n  const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n  collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","dom","createFastDomNode","createTrustedTypesPolicy","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","Sash","assert","RunOnceScheduler","Codicon","onUnexpectedError","Emitter","MarkdownString","Disposable","ThemeIcon","applyFontInfo","ElementSizeObserver","EditorExtensionsRegistry","ICodeEditorService","StableEditorScrollState","CodeEditorWidget","DiffNavigator","DiffReview","InlineDiffMargin","WorkerBasedDocumentDiffProvider","clampedFloat","clampedInt","EditorFontLigatures","EditorOptions","boolean","validateBooleanOption","stringSet","validateStringSetOption","Position","Range","StringBuilder","editorCommon","EditorContextKeys","ModelDecorationOptions","LineDecoration","RenderLineInput","renderViewLine","InlineDecoration","ViewLineRenderingData","OverviewRulerZone","nls","IClipboardService","IContextKeyService","IContextMenuService","IInstantiationService","ServiceCollection","INotificationService","IEditorProgressService","defaultInsertColor","defaultRemoveColor","diffDiagonalFill","diffInserted","diffOverviewRulerInserted","diffOverviewRulerRemoved","diffRemoved","registerIcon","getThemeTypeSelector","IThemeService","registerThemingParticipant","VisualEditorState","constructor","_contextMenuService","_clipboardService","_zones","_inlineDiffMargins","_zonesMap","_decorations","getForeignViewZones","allViewZones","filter","z","String","id","clean","editor","changeViewZones","viewChangeAccessor","zoneId","removeZone","changeDecorations","changeAccessor","deltaDecorations","overviewRuler","newDecorations","restoreScrollState","scrollState","capture","_a","inlineDiffMargin","dispose","zones","viewZone","suppressMouseDown","showInHiddenAreas","addZone","push","diff","marginDomNode","originalModel","getValueLength","restore","decorations","setZones","overviewZones","DIFF_EDITOR_ID","diffInsertIcon","add","localize","diffRemoveIcon","remove","diffEditorWidgetTtPolicy","createHTML","ariaNavigationTip","DiffEditorWidget","domElement","options","codeEditorWidgetOptions","clipboardService","contextKeyService","instantiationService","codeEditorService","themeService","notificationService","contextMenuService","_editorProgressService","_onDidDispose","_register","onDidDispose","event","_onDidChangeModel","onDidChangeModel","_onDidUpdateDiff","onDidUpdateDiff","_onDidContentSizeChange","_lastOriginalWarning","_lastModifiedWarning","willCreateDiffEditor","_documentDiffProvider","createInstance","onDidChange","_beginUpdateDecorationsSoon","_codeEditorService","_contextKeyService","createScoped","_instantiationService","createChild","createKey","_themeService","_notificationService","_id","_state","_updatingDiffProgress","_domElement","_options","validateDiffEditorOptions","enableSplitViewResizing","splitViewDefaultRatio","renderSideBySide","renderMarginRevertIcon","maxComputationTime","maxFileSize","ignoreTrimWhitespace","renderIndicators","originalEditable","diffCodeLens","renderOverviewRuler","diffWordWrap","diffAlgorithm","accessibilityVerbose","experimental","collapseUnchangedRegions","isInEmbeddedEditor","onlyShowAccessibleDiffViewer","isEmbeddedDiffEditorKey","isEmbeddedDiffEditor","bindTo","set","_updateDecorationsRunner","_updateDecorations","_containerDomElement","document","createElement","className","_getClassName","getColorTheme","style","position","height","appendChild","_overviewViewportDomElement","setClassName","setPosition","_overviewDomElement","domNode","addStandardDisposableListener","EventType","POINTER_DOWN","_modifiedEditor","delegateVerticalScrollbarPointerDown","addDisposableListener","MOUSE_WHEEL","delegateScrollFromMouseWheelEvent","passive","_originalDomNode","_modifiedDomNode","_beginUpdateDecorationsTimeout","_currentlyChangingViewZones","_diffComputationToken","_originalEditorState","_modifiedEditorState","_isVisible","_isHandlingScrollEvent","_elementSizeObserver","dimension","_onDidContainerSizeChanged","automaticLayout","startObserving","_diffComputationResult","_originalEditor","_createLeftHandSideEditor","originalEditor","_createRightHandSideEditor","modifiedEditor","_originalOverviewRuler","_modifiedOverviewRuler","_reviewPane","shadow","actionBarContainer","_setStrategy","DiffEditorWidgetSideBySide","_createDataSource","DiffEditorWidgetInline","onDidColorThemeChange","t","_strategy","applyColors","schedule","contributions","getDiffEditorContributions","ctor","err","addDiffEditor","_setState","newState","show","accessibleDiffViewerNext","accessibleDiffViewerPrev","prev","theme","type","_disposeOverviewRulers","removeChild","getDomNode","_createOverviewRulers","ok","hasModel","createOverviewRuler","_layoutOverviewRulers","_createInnerEditor","_adjustOptionsForLeftHandSide","onDidScrollChange","scrollTopChanged","scrollLeftChanged","scrollHeightChanged","setScrollPosition","scrollLeft","scrollTop","_layoutOverviewViewport","onDidChangeViewZones","_onViewZonesChanged","onDidChangeConfiguration","getModel","hasChanged","cancel","onDidChangeHiddenAreas","onDidChangeModelContent","isInDiffLeftEditorKey","hasWidgetFocus","onDidFocusEditorWidget","onDidBlurEditorWidget","onDidContentSizeChange","width","getContentWidth","ONE_OVERVIEW_WIDTH","Math","max","getContentHeight","fire","contentHeight","contentWidth","contentHeightChanged","contentWidthChanged","_adjustOptionsForRightHandSide","onDidChangeModelOptions","tabSize","isInDiffRightEditorKey","onMouseDown","_b","rightButton","element","includes","lineNumber","change","changes","find","detail","afterLineNumber","modifiedStartLineNumber","modifiedEndLineNumber","revertChange","stopPropagation","original","modified","originalRange","originalEndLineNumber","originalStartLineNumber","getLineMaxColumn","originalContent","getValueInRange","newRange","eol","getEOL","range","setStartPosition","getLineCount","setEndPosition","executeEdits","text","insertAt","fromPositions","container","editorWidgetOptions","removeDiffEditor","window","clearTimeout","_cleanViewZonesAndDecorations","getId","getEditorType","EditorType","IDiffEditor","getLineChanges","getOriginalEditor","getModifiedEditor","updateOptions","_newOptions","newOptions","changed","changedDiffEditorOptions","beginUpdateDecorations","beginUpdateDecorationsSoon","setOptions","_beginUpdateDecorations","setEnableSplitViewResizing","createViewModel","model","waitForDiff","setModel","Error","setScrollTop","_diffNavigator","alwaysRevealFirst","findResultLoop","getOption","loop","getContainerDomNode","getVisibleColumnFromPosition","getPosition","source","revealLine","scrollType","revealLineInCenter","revealLineInCenterIfOutsideViewport","revealLineNearTop","revealPosition","revealPositionInCenter","revealPositionInCenterIfOutsideViewport","revealPositionNearTop","getSelection","getSelections","setSelection","something","setSelections","ranges","revealLines","startLineNumber","endLineNumber","revealLinesInCenter","revealLinesInCenterIfOutsideViewport","revealLinesNearTop","revealRange","revealVerticalInCenter","revealHorizontal","revealRangeInCenter","revealRangeInCenterIfOutsideViewport","revealRangeNearTop","revealRangeNearTopIfOutsideViewport","revealRangeAtTop","getSupportedActions","focus","trigger","handlerId","payload","createDecorationsCollection","callback","saveViewState","originalViewState","modifiedViewState","restoreViewState","s","diffEditorState","layout","observe","hasTextFocus","_doLayout","_getReviewHeight","isVisible","getHeight","reviewHeight","freeSpace","ENTIRE_DIFF_OVERVIEW_WIDTH","layoutInfo","getLayoutInfo","setLayout","top","right","setTimeout","UPDATE_DIFF_DECORATIONS_DELAY","_equals","a","b","toString","currentOriginalModel","currentModifiedModel","currentToken","diffLimit","canSyncModelForDiff","bufferTextLength","uri","warn","computeDiff","maxComputationTimeMs","computeMoves","identical","quitEarly","changes2","map","m","innerChanges","isEmpty","undefined","endLineNumberExclusive","modifiedRange","charChanges","originalStartColumn","startColumn","originalEndColumn","endColumn","modifiedStartColumn","modifiedEndColumn","error","lineChanges","foreignOriginal","getWhitespaces","foreignModified","diffDecorations","getEditorsDiffDecorations","_adjustOptionsForSubEditor","clonedOptions","assign","inDiffEditor","scrollbar","vertical","folding","codeLens","fixedOverflowWidgets","minimap","enabled","wordWrapOverride1","wordWrapOverride2","stickyScroll","originalAriaLabel","ariaLabel","_updateAriaLabel","readOnly","dropIntoEditor","extraEditorClassName","replaceAll","modifiedAriaLabel","revealHorizontalRightPadding","defaultValue","verticalHasArrows","doLayout","getWidth","splitPoint","left","setWidth","setHeight","_computeOverviewViewport","setTop","getScrollTop","scrollHeight","getScrollHeight","computedAvailableSize","computedRepresentableSize","computedRatio","computedSliderSize","floor","computedSliderPosition","getOptions","relayoutEditors","newStrategy","_boundarySashes","setBoundarySashes","DiffEditorWidgetStyle","dataSource","_dataSource","_insertColor","_removeColor","newInsertColor","getColor","transparent","newRemoveColor","hasChanges","equals","originalWhitespaces","modifiedWhitespaces","sort","_getViewZones","originalDecorations","_getOriginalEditorDecorations","modifiedDecorations","_getModifiedEditorDecorations","_sashes","ForeignViewZonesIterator","_source","_index","current","advance","ViewZonesComputer","_lineChanges","_originalForeignVZ","_modifiedForeignVZ","_getViewLineCount","viewModel","_getViewModel","viewRange","getViewRange","getViewZones","originalLineHeight","modifiedLineHeight","originalHasWrapping","wrappingColumn","modifiedHasWrapping","hasWrapping","originalCoordinatesConverter","coordinatesConverter","modifiedCoordinatesConverter","lineChangeModifiedLength","lineChangeOriginalLength","originalEquivalentLineNumber","modifiedEquivalentLineNumber","originalEndEquivalentLineNumber","modifiedEndEquivalentLineNumber","sortMyViewZones","addAndCombineIfPossible","destination","item","lastItem","heightInLines","modifiedForeignVZ","originalForeignVZ","lastOriginalLineNumber","lastModifiedLineNumber","lineChange","stepOriginal","stepModified","count","originalLineNumber","modifiedLineNumber","originalViewLineCount","getModelLineViewLineCount","modifiedViewLineCount","viewZoneLineNumber","_createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion","isChangeOrInsert","_produceOriginalFromDiff","isChangeOrDelete","_produceModifiedFromDiff","stepOriginalIndex","stepModifiedIndex","originalDelta","modifiedDelta","shouldNotShrink","_ensureDomNodes","createFakeLinesDiv","createDecoration","DECORATIONS","arrowRevertChange","register","description","glyphMarginHoverMessage","isTrusted","supportThemeIcons","appendMarkdown","glyphMarginClassName","asClassName","arrowRight","zIndex","charDelete","charDeleteWholeLine","isWholeLine","charInsert","charInsertWholeLine","lineInsert","marginClassName","lineInsertWithSign","linesDecorationsClassName","lineDelete","lineDeleteWithSign","lineDeleteMargin","defaultSashRatio","_disableSash","_defaultRatio","_sashRatio","_sashPosition","_startSashPosition","_sash","orientation","state","onDidStart","_onSashDragStart","_onSashDrag","onDidEnd","_onSashDragEnd","onDidReset","_onSashReset","defaultRatio","newDisableSash","sashRatio","w","sashPosition","midPoint","MINIMUM_EDITOR_WIDTH","currentX","startX","getVerticalSashTop","sash","getVerticalSashLeft","getVerticalSashHeight","sashes","orthogonalEndSash","bottom","SideBySideViewZonesComputer","overviewZoneColor","originalViewModel","charChange","isCharChangeOrDelete","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","modifiedModel","modifiedViewModel","createViewZoneMarginArrow","isCharChangeOrInsert","_decorationsLeft","decorationsLeft","onDidLayoutChange","computer","InlineViewZonesComputer","zoneIndex","zone","zoneHeightInLines","_originalModel","_renderIndicators","_pendingLineChange","_pendingViewZones","_lineBreaksComputer","createLineBreaksComputer","_finalize","minWidthInPx","viewLineCounts","addRequest","getLineContent","modifiedEditorOptions","fontInfo","get","disableMonospaceOptimizations","typicalHalfwidthCharacterWidth","scrollBeyondLastColumn","mightContainNonBasicASCII","mightContainRTL","lineHeight","lineDecorationsWidth","decorationsWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","lineBreaks","finalize","lineBreakIndex","hasCharChanges","sb","maxCharsPerLine","renderedLineCount","lineIndex","lineTokens","tokenization","getLineTokens","lineContent","lineBreakData","actualDecorations","lastBreakOffset","breakOffset","breakOffsets","viewLineTokens","sliceAndInflate","viewLineContent","substring","_renderOriginalLine","extractWrapped","marginDomNode2","afterColumn","html","build","trustedhtml","innerHTML","cnt","appendString","isBasicASCII","containsRTL","output","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","marginElement","setAttribute","characterMapping","getHorizontalOffset","validateDiffWordWrap","arrow","$","lineCount","min","convertModelRangeToViewRange","getLineMinColumn","defaults","collector","diffDiagonalFillColor","addRule"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport * as assert from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport './media/diffEditor.css';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffNavigator } from './diffNavigator.js';\nimport { DiffReview } from './diffReview.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { WorkerBasedDocumentDiffProvider } from './workerBasedDocumentDiffProvider.js';\nimport { clampedFloat, clampedInt, EditorFontLigatures, EditorOptions, boolean as validateBooleanOption, stringSet as validateStringSetOption } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport * as nls from '../../../nls.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { defaultInsertColor, defaultRemoveColor, diffDiagonalFill, diffInserted, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { getThemeTypeSelector, IThemeService, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nclass VisualEditorState {\n    constructor(_contextMenuService, _clipboardService) {\n        this._contextMenuService = _contextMenuService;\n        this._clipboardService = _clipboardService;\n        this._zones = [];\n        this._inlineDiffMargins = [];\n        this._zonesMap = {};\n        this._decorations = [];\n    }\n    getForeignViewZones(allViewZones) {\n        return allViewZones.filter((z) => !this._zonesMap[String(z.id)]);\n    }\n    clean(editor) {\n        // (1) View zones\n        if (this._zones.length > 0) {\n            editor.changeViewZones((viewChangeAccessor) => {\n                for (const zoneId of this._zones) {\n                    viewChangeAccessor.removeZone(zoneId);\n                }\n            });\n        }\n        this._zones = [];\n        this._zonesMap = {};\n        // (2) Model decorations\n        editor.changeDecorations((changeAccessor) => {\n            this._decorations = changeAccessor.deltaDecorations(this._decorations, []);\n        });\n    }\n    apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n        const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null;\n        // view zones\n        editor.changeViewZones((viewChangeAccessor) => {\n            var _a;\n            for (const zoneId of this._zones) {\n                viewChangeAccessor.removeZone(zoneId);\n            }\n            for (const inlineDiffMargin of this._inlineDiffMargins) {\n                inlineDiffMargin.dispose();\n            }\n            this._zones = [];\n            this._zonesMap = {};\n            this._inlineDiffMargins = [];\n            for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n                const viewZone = newDecorations.zones[i];\n                viewZone.suppressMouseDown = true;\n                viewZone.showInHiddenAreas = true;\n                const zoneId = viewChangeAccessor.addZone(viewZone);\n                this._zones.push(zoneId);\n                this._zonesMap[String(zoneId)] = true;\n                if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n                    viewZone.suppressMouseDown = false;\n                    if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n                        // do not contribute diff margin actions for newly created files\n                        this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n                    }\n                }\n            }\n        });\n        scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(editor);\n        // decorations\n        editor.changeDecorations((changeAccessor) => {\n            this._decorations = changeAccessor.deltaDecorations(this._decorations, newDecorations.decorations);\n        });\n        // overview ruler\n        overviewRuler === null || overviewRuler === void 0 ? void 0 : overviewRuler.setZones(newDecorations.overviewZones);\n    }\n}\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nexport const diffEditorWidgetTtPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\nconst ariaNavigationTip = nls.localize('diff-aria-navigation-tip', ' use Shift + F7 to navigate changes');\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n    constructor(domElement, options, codeEditorWidgetOptions, clipboardService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n        super();\n        this._editorProgressService = _editorProgressService;\n        this._onDidDispose = this._register(new Emitter());\n        this.onDidDispose = this._onDidDispose.event;\n        this._onDidChangeModel = this._register(new Emitter());\n        this.onDidChangeModel = this._onDidChangeModel.event;\n        this._onDidUpdateDiff = this._register(new Emitter());\n        this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this._lastOriginalWarning = null;\n        this._lastModifiedWarning = null;\n        codeEditorService.willCreateDiffEditor();\n        this._documentDiffProvider = this._register(instantiationService.createInstance(WorkerBasedDocumentDiffProvider, options));\n        this._register(this._documentDiffProvider.onDidChange(e => this._beginUpdateDecorationsSoon()));\n        this._codeEditorService = codeEditorService;\n        this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n        this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        this._contextKeyService.createKey('isInDiffEditor', true);\n        this._themeService = themeService;\n        this._notificationService = notificationService;\n        this._id = (++DIFF_EDITOR_ID);\n        this._state = 0 /* editorBrowser.DiffEditorState.Idle */;\n        this._updatingDiffProgress = null;\n        this._domElement = domElement;\n        options = options || {};\n        this._options = validateDiffEditorOptions(options, {\n            enableSplitViewResizing: true,\n            splitViewDefaultRatio: 0.5,\n            renderSideBySide: true,\n            renderMarginRevertIcon: true,\n            maxComputationTime: 5000,\n            maxFileSize: 50,\n            ignoreTrimWhitespace: true,\n            renderIndicators: true,\n            originalEditable: false,\n            diffCodeLens: false,\n            renderOverviewRuler: true,\n            diffWordWrap: 'inherit',\n            diffAlgorithm: 'advanced',\n            accessibilityVerbose: false,\n            experimental: {\n                collapseUnchangedRegions: false,\n            },\n            isInEmbeddedEditor: false,\n            onlyShowAccessibleDiffViewer: false,\n        });\n        this.isEmbeddedDiffEditorKey = EditorContextKeys.isEmbeddedDiffEditor.bindTo(this._contextKeyService);\n        this.isEmbeddedDiffEditorKey.set(typeof options.isInEmbeddedEditor !== 'undefined' ? options.isInEmbeddedEditor : false);\n        this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n        this._containerDomElement = document.createElement('div');\n        this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        this._containerDomElement.style.position = 'relative';\n        this._containerDomElement.style.height = '100%';\n        this._domElement.appendChild(this._containerDomElement);\n        this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n        this._overviewViewportDomElement.setClassName('diffViewport');\n        this._overviewViewportDomElement.setPosition('absolute');\n        this._overviewDomElement = document.createElement('div');\n        this._overviewDomElement.className = 'diffOverview';\n        this._overviewDomElement.style.position = 'absolute';\n        this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n        this._register(dom.addStandardDisposableListener(this._overviewDomElement, dom.EventType.POINTER_DOWN, (e) => {\n            this._modifiedEditor.delegateVerticalScrollbarPointerDown(e);\n        }));\n        this._register(dom.addDisposableListener(this._overviewDomElement, dom.EventType.MOUSE_WHEEL, (e) => {\n            this._modifiedEditor.delegateScrollFromMouseWheelEvent(e);\n        }, { passive: false }));\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.appendChild(this._overviewDomElement);\n        }\n        // Create left side\n        this._originalDomNode = document.createElement('div');\n        this._originalDomNode.className = 'editor original';\n        this._originalDomNode.style.position = 'absolute';\n        this._originalDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._originalDomNode);\n        // Create right side\n        this._modifiedDomNode = document.createElement('div');\n        this._modifiedDomNode.className = 'editor modified';\n        this._modifiedDomNode.style.position = 'absolute';\n        this._modifiedDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._modifiedDomNode);\n        this._beginUpdateDecorationsTimeout = -1;\n        this._currentlyChangingViewZones = false;\n        this._diffComputationToken = 0;\n        this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._isVisible = true;\n        this._isHandlingScrollEvent = false;\n        this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n        this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n        if (options.automaticLayout) {\n            this._elementSizeObserver.startObserving();\n        }\n        this._diffComputationResult = null;\n        this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n        this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n        this._originalOverviewRuler = null;\n        this._modifiedOverviewRuler = null;\n        this._reviewPane = instantiationService.createInstance(DiffReview, this);\n        this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n        if (this._options.renderSideBySide) {\n            this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio));\n        }\n        else {\n            this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n        }\n        this._register(themeService.onDidColorThemeChange(t => {\n            if (this._strategy && this._strategy.applyColors(t)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }));\n        const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n        for (const desc of contributions) {\n            try {\n                this._register(instantiationService.createInstance(desc.ctor, this));\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n        }\n        this._codeEditorService.addDiffEditor(this);\n    }\n    _setState(newState) {\n        if (this._state === newState) {\n            return;\n        }\n        this._state = newState;\n        if (this._updatingDiffProgress) {\n            this._updatingDiffProgress.done();\n            this._updatingDiffProgress = null;\n        }\n        if (this._state === 1 /* editorBrowser.DiffEditorState.ComputingDiff */) {\n            this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n        }\n    }\n    accessibleDiffViewerNext() {\n        this._reviewPane.next();\n    }\n    accessibleDiffViewerPrev() {\n        this._reviewPane.prev();\n    }\n    static _getClassName(theme, renderSideBySide) {\n        let result = 'monaco-diff-editor monaco-editor-background ';\n        if (renderSideBySide) {\n            result += 'side-by-side ';\n        }\n        result += getThemeTypeSelector(theme.type);\n        return result;\n    }\n    _disposeOverviewRulers() {\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n            this._originalOverviewRuler = null;\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n            this._modifiedOverviewRuler = null;\n        }\n    }\n    _createOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        assert.ok(!this._originalOverviewRuler && !this._modifiedOverviewRuler);\n        if (this._originalEditor.hasModel()) {\n            this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n        }\n        if (this._modifiedEditor.hasModel()) {\n            this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n        }\n        this._layoutOverviewRulers();\n    }\n    _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._modifiedEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(49 /* EditorOption.fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(143 /* EditorOption.wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        return editor;\n    }\n    _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._originalEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(49 /* EditorOption.fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(143 /* EditorOption.wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        this._register(editor.onDidChangeModelOptions((e) => {\n            if (e.tabSize) {\n                this._updateDecorationsRunner.schedule();\n            }\n        }));\n        const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        // Revert change when an arrow is clicked.\n        this._register(editor.onMouseDown(event => {\n            var _a, _b;\n            if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('arrow-revert-change'))) {\n                const lineNumber = event.target.position.lineNumber;\n                const viewZone = event.target;\n                const change = (_b = this._diffComputationResult) === null || _b === void 0 ? void 0 : _b.changes.find(c => \n                // delete change\n                (viewZone === null || viewZone === void 0 ? void 0 : viewZone.detail.afterLineNumber) === c.modifiedStartLineNumber ||\n                    // other changes\n                    (c.modifiedEndLineNumber > 0 && c.modifiedStartLineNumber === lineNumber));\n                if (change) {\n                    this.revertChange(change);\n                }\n                event.event.stopPropagation();\n                this._updateDecorations();\n                return;\n            }\n        }));\n        return editor;\n    }\n    /**\n     * Reverts a change in the modified editor.\n     */\n    revertChange(change) {\n        const editor = this._modifiedEditor;\n        const original = this._originalEditor.getModel();\n        const modified = this._modifiedEditor.getModel();\n        if (!original || !modified || !editor) {\n            return;\n        }\n        const originalRange = change.originalEndLineNumber > 0 ? new Range(change.originalStartLineNumber, 1, change.originalEndLineNumber, original.getLineMaxColumn(change.originalEndLineNumber)) : null;\n        const originalContent = originalRange ? original.getValueInRange(originalRange) : null;\n        const newRange = change.modifiedEndLineNumber > 0 ? new Range(change.modifiedStartLineNumber, 1, change.modifiedEndLineNumber, modified.getLineMaxColumn(change.modifiedEndLineNumber)) : null;\n        const eol = modified.getEOL();\n        if (change.originalEndLineNumber === 0 && newRange) {\n            // Insert change.\n            // To revert: delete the new content and a linebreak (if possible)\n            let range = newRange;\n            if (change.modifiedStartLineNumber > 1) {\n                // Try to include a linebreak from before.\n                range = newRange.setStartPosition(change.modifiedStartLineNumber - 1, modified.getLineMaxColumn(change.modifiedStartLineNumber - 1));\n            }\n            else if (change.modifiedEndLineNumber < modified.getLineCount()) {\n                // Try to include the linebreak from after.\n                range = newRange.setEndPosition(change.modifiedEndLineNumber + 1, 1);\n            }\n            editor.executeEdits('diffEditor', [{\n                    range,\n                    text: '',\n                }]);\n        }\n        else if (change.modifiedEndLineNumber === 0 && originalContent !== null) {\n            // Delete change.\n            // To revert: insert the old content and a linebreak.\n            const insertAt = change.modifiedStartLineNumber < modified.getLineCount() ? new Position(change.modifiedStartLineNumber + 1, 1) : new Position(change.modifiedStartLineNumber, modified.getLineMaxColumn(change.modifiedStartLineNumber));\n            editor.executeEdits('diffEditor', [{\n                    range: Range.fromPositions(insertAt, insertAt),\n                    text: change.modifiedStartLineNumber < modified.getLineCount() ? originalContent + eol : eol + originalContent,\n                }]);\n        }\n        else if (newRange && originalContent !== null) {\n            // Modified change.\n            editor.executeEdits('diffEditor', [{\n                    range: newRange,\n                    text: originalContent,\n                }]);\n        }\n    }\n    _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n        return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n    }\n    dispose() {\n        this._codeEditorService.removeDiffEditor(this);\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._cleanViewZonesAndDecorations();\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n        }\n        this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.removeChild(this._overviewDomElement);\n        }\n        this._containerDomElement.removeChild(this._originalDomNode);\n        this._originalEditor.dispose();\n        this._containerDomElement.removeChild(this._modifiedDomNode);\n        this._modifiedEditor.dispose();\n        this._strategy.dispose();\n        this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n        this._reviewPane.dispose();\n        this._domElement.removeChild(this._containerDomElement);\n        this._onDidDispose.fire();\n        super.dispose();\n    }\n    //------------ begin IDiffEditor methods\n    getId() {\n        return this.getEditorType() + ':' + this._id;\n    }\n    getEditorType() {\n        return editorCommon.EditorType.IDiffEditor;\n    }\n    getLineChanges() {\n        if (!this._diffComputationResult) {\n            return null;\n        }\n        return this._diffComputationResult.changes;\n    }\n    getOriginalEditor() {\n        return this._originalEditor;\n    }\n    getModifiedEditor() {\n        return this._modifiedEditor;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n        const changed = changedDiffEditorOptions(this._options, newOptions);\n        this._options = newOptions;\n        this.isEmbeddedDiffEditorKey.set(typeof _newOptions.isInEmbeddedEditor !== 'undefined' ? _newOptions.isInEmbeddedEditor : false);\n        const beginUpdateDecorations = (changed.ignoreTrimWhitespace || changed.renderIndicators || changed.renderMarginRevertIcon);\n        const beginUpdateDecorationsSoon = (this._isVisible && (changed.maxComputationTime || changed.maxFileSize));\n        this._documentDiffProvider.setOptions(newOptions);\n        if (beginUpdateDecorations) {\n            this._beginUpdateDecorations();\n        }\n        else if (beginUpdateDecorationsSoon) {\n            this._beginUpdateDecorationsSoon();\n        }\n        this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n        this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions));\n        // enableSplitViewResizing\n        this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio);\n        // renderSideBySide\n        if (changed.renderSideBySide) {\n            if (this._options.renderSideBySide) {\n                this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing, this._options.splitViewDefaultRatio));\n            }\n            else {\n                this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n            }\n            // Update class name\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }\n        // renderOverviewRuler\n        if (changed.renderOverviewRuler) {\n            if (this._options.renderOverviewRuler) {\n                this._containerDomElement.appendChild(this._overviewDomElement);\n            }\n            else {\n                this._containerDomElement.removeChild(this._overviewDomElement);\n            }\n        }\n    }\n    getModel() {\n        return {\n            original: this._originalEditor.getModel(),\n            modified: this._modifiedEditor.getModel()\n        };\n    }\n    createViewModel(model) {\n        return {\n            model,\n            waitForDiff() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    // noop\n                });\n            },\n        };\n    }\n    setModel(model) {\n        if (model && 'model' in model) {\n            model = model.model;\n        }\n        // Guard us against partial null model\n        if (model && (!model.original || !model.modified)) {\n            throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n        }\n        // Remove all view zones & decorations\n        this._cleanViewZonesAndDecorations();\n        this._disposeOverviewRulers();\n        // Update code editor models\n        this._originalEditor.setModel(model ? model.original : null);\n        this._modifiedEditor.setModel(model ? model.modified : null);\n        this._updateDecorationsRunner.cancel();\n        // this.originalEditor.onDidChangeModelOptions\n        if (model) {\n            this._originalEditor.setScrollTop(0);\n            this._modifiedEditor.setScrollTop(0);\n        }\n        // Disable any diff computations that will come in\n        this._diffComputationResult = null;\n        this._diffComputationToken++;\n        this._setState(0 /* editorBrowser.DiffEditorState.Idle */);\n        if (model) {\n            this._createOverviewRulers();\n            // Begin comparing\n            this._beginUpdateDecorations();\n        }\n        this._layoutOverviewViewport();\n        this._onDidChangeModel.fire();\n        // Diff navigator\n        this._diffNavigator = this._register(this._instantiationService.createInstance(DiffNavigator, this, {\n            alwaysRevealFirst: false,\n            findResultLoop: this.getModifiedEditor().getOption(40 /* EditorOption.find */).loop\n        }));\n    }\n    getContainerDomNode() {\n        return this._domElement;\n    }\n    // #region editorBrowser.IDiffEditor: Delegating to modified Editor\n    getVisibleColumnFromPosition(position) {\n        return this._modifiedEditor.getVisibleColumnFromPosition(position);\n    }\n    getPosition() {\n        return this._modifiedEditor.getPosition();\n    }\n    setPosition(position, source = 'api') {\n        this._modifiedEditor.setPosition(position, source);\n    }\n    revealLine(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLine(lineNumber, scrollType);\n    }\n    revealLineInCenter(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n    }\n    revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n    }\n    revealLineNearTop(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n    }\n    revealPosition(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPosition(position, scrollType);\n    }\n    revealPositionInCenter(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionInCenter(position, scrollType);\n    }\n    revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n    }\n    revealPositionNearTop(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionNearTop(position, scrollType);\n    }\n    getSelection() {\n        return this._modifiedEditor.getSelection();\n    }\n    getSelections() {\n        return this._modifiedEditor.getSelections();\n    }\n    setSelection(something, source = 'api') {\n        this._modifiedEditor.setSelection(something, source);\n    }\n    setSelections(ranges, source = 'api') {\n        this._modifiedEditor.setSelections(ranges, source);\n    }\n    revealLines(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n    }\n    revealRange(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n        this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n    }\n    revealRangeInCenter(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeInCenter(range, scrollType);\n    }\n    revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n    }\n    revealRangeNearTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeNearTop(range, scrollType);\n    }\n    revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n    }\n    revealRangeAtTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeAtTop(range, scrollType);\n    }\n    getSupportedActions() {\n        return this._modifiedEditor.getSupportedActions();\n    }\n    focus() {\n        this._modifiedEditor.focus();\n    }\n    trigger(source, handlerId, payload) {\n        this._modifiedEditor.trigger(source, handlerId, payload);\n    }\n    createDecorationsCollection(decorations) {\n        return this._modifiedEditor.createDecorationsCollection(decorations);\n    }\n    changeDecorations(callback) {\n        return this._modifiedEditor.changeDecorations(callback);\n    }\n    // #endregion\n    saveViewState() {\n        const originalViewState = this._originalEditor.saveViewState();\n        const modifiedViewState = this._modifiedEditor.saveViewState();\n        return {\n            original: originalViewState,\n            modified: modifiedViewState,\n        };\n    }\n    restoreViewState(s) {\n        if (s && s.original && s.modified) {\n            const diffEditorState = s;\n            this._originalEditor.restoreViewState(diffEditorState.original);\n            this._modifiedEditor.restoreViewState(diffEditorState.modified);\n        }\n    }\n    layout(dimension) {\n        this._elementSizeObserver.observe(dimension);\n    }\n    hasTextFocus() {\n        return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n    }\n    //------------ end IDiffEditor methods\n    //------------ begin layouting methods\n    _onDidContainerSizeChanged() {\n        this._doLayout();\n    }\n    _getReviewHeight() {\n        return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n    }\n    _layoutOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n            return;\n        }\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (layoutInfo) {\n            this._originalOverviewRuler.setLayout({\n                top: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n            this._modifiedOverviewRuler.setLayout({\n                top: 0,\n                right: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n        }\n    }\n    //------------ end layouting methods\n    _onViewZonesChanged() {\n        if (this._currentlyChangingViewZones) {\n            return;\n        }\n        this._updateDecorationsRunner.schedule();\n    }\n    _beginUpdateDecorationsSoon() {\n        // Clear previous timeout if necessary\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n    }\n    static _equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.toString() === b.toString());\n    }\n    _beginUpdateDecorations() {\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            // Cancel any pending requests in case this method is called directly\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        const currentOriginalModel = this._originalEditor.getModel();\n        const currentModifiedModel = this._modifiedEditor.getModel();\n        if (!currentOriginalModel || !currentModifiedModel) {\n            return;\n        }\n        // Prevent old diff requests to come if a new request has been initiated\n        // The best method would be to call cancel on the Promise, but this is not\n        // yet supported, so using tokens for now.\n        this._diffComputationToken++;\n        const currentToken = this._diffComputationToken;\n        const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n        const canSyncModelForDiff = (model) => {\n            const bufferTextLength = model.getValueLength();\n            return (diffLimit === 0 || bufferTextLength <= diffLimit);\n        };\n        if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n            if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning)\n                || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n                this._lastOriginalWarning = currentOriginalModel.uri;\n                this._lastModifiedWarning = currentModifiedModel.uri;\n                this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n            }\n            return;\n        }\n        this._setState(1 /* editorBrowser.DiffEditorState.ComputingDiff */);\n        this._documentDiffProvider.computeDiff(currentOriginalModel, currentModifiedModel, {\n            ignoreTrimWhitespace: this._options.ignoreTrimWhitespace,\n            maxComputationTimeMs: this._options.maxComputationTime,\n            computeMoves: false,\n        }).then(result => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n                this._diffComputationResult = {\n                    identical: result.identical,\n                    quitEarly: result.quitEarly,\n                    changes2: result.changes,\n                    changes: result.changes.map(m => {\n                        // TODO don't do this translation, but use the diff result directly\n                        let originalStartLineNumber;\n                        let originalEndLineNumber;\n                        let modifiedStartLineNumber;\n                        let modifiedEndLineNumber;\n                        let innerChanges = m.innerChanges;\n                        if (m.originalRange.isEmpty) {\n                            // Insertion\n                            originalStartLineNumber = m.originalRange.startLineNumber - 1;\n                            originalEndLineNumber = 0;\n                            innerChanges = undefined;\n                        }\n                        else {\n                            originalStartLineNumber = m.originalRange.startLineNumber;\n                            originalEndLineNumber = m.originalRange.endLineNumberExclusive - 1;\n                        }\n                        if (m.modifiedRange.isEmpty) {\n                            // Deletion\n                            modifiedStartLineNumber = m.modifiedRange.startLineNumber - 1;\n                            modifiedEndLineNumber = 0;\n                            innerChanges = undefined;\n                        }\n                        else {\n                            modifiedStartLineNumber = m.modifiedRange.startLineNumber;\n                            modifiedEndLineNumber = m.modifiedRange.endLineNumberExclusive - 1;\n                        }\n                        return {\n                            originalStartLineNumber,\n                            originalEndLineNumber,\n                            modifiedStartLineNumber,\n                            modifiedEndLineNumber,\n                            charChanges: innerChanges === null || innerChanges === void 0 ? void 0 : innerChanges.map(m => ({\n                                originalStartLineNumber: m.originalRange.startLineNumber,\n                                originalStartColumn: m.originalRange.startColumn,\n                                originalEndLineNumber: m.originalRange.endLineNumber,\n                                originalEndColumn: m.originalRange.endColumn,\n                                modifiedStartLineNumber: m.modifiedRange.startLineNumber,\n                                modifiedStartColumn: m.modifiedRange.startColumn,\n                                modifiedEndLineNumber: m.modifiedRange.endLineNumber,\n                                modifiedEndColumn: m.modifiedRange.endColumn,\n                            }))\n                        };\n                    })\n                };\n                this._updateDecorationsRunner.schedule();\n                this._onDidUpdateDiff.fire();\n            }\n        }, (error) => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n                this._diffComputationResult = null;\n                this._updateDecorationsRunner.schedule();\n            }\n        });\n    }\n    _cleanViewZonesAndDecorations() {\n        this._originalEditorState.clean(this._originalEditor);\n        this._modifiedEditorState.clean(this._modifiedEditor);\n    }\n    _updateDecorations() {\n        if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n            return;\n        }\n        const lineChanges = (this._diffComputationResult ? this._diffComputationResult.changes : []);\n        const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n        const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n        const renderMarginRevertIcon = this._options.renderMarginRevertIcon && !this._modifiedEditor.getOption(89 /* EditorOption.readOnly */);\n        const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, renderMarginRevertIcon, foreignOriginal, foreignModified);\n        try {\n            this._currentlyChangingViewZones = true;\n            this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n            this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n        }\n        finally {\n            this._currentlyChangingViewZones = false;\n        }\n    }\n    _adjustOptionsForSubEditor(options) {\n        const clonedOptions = Object.assign({}, options);\n        clonedOptions.inDiffEditor = true;\n        clonedOptions.automaticLayout = false;\n        // Clone scrollbar options before changing them\n        clonedOptions.scrollbar = Object.assign({}, (clonedOptions.scrollbar || {}));\n        clonedOptions.scrollbar.vertical = 'visible';\n        clonedOptions.folding = false;\n        clonedOptions.codeLens = this._options.diffCodeLens;\n        clonedOptions.fixedOverflowWidgets = true;\n        // clonedOptions.lineDecorationsWidth = '2ch';\n        // Clone minimap options before changing them\n        clonedOptions.minimap = Object.assign({}, (clonedOptions.minimap || {}));\n        clonedOptions.minimap.enabled = false;\n        return clonedOptions;\n    }\n    _adjustOptionsForLeftHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (!this._options.renderSideBySide) {\n            // never wrap hidden editor\n            result.wordWrapOverride1 = 'off';\n            result.wordWrapOverride2 = 'off';\n            result.stickyScroll = { enabled: false };\n        }\n        else {\n            result.wordWrapOverride1 = this._options.diffWordWrap;\n        }\n        if (options.originalAriaLabel) {\n            result.ariaLabel = options.originalAriaLabel;\n        }\n        this._updateAriaLabel(result);\n        result.readOnly = !this._options.originalEditable;\n        result.dropIntoEditor = { enabled: !result.readOnly };\n        result.extraEditorClassName = 'original-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    _updateAriaLabel(options) {\n        var _a;\n        let ariaLabel = (_a = options.ariaLabel) !== null && _a !== void 0 ? _a : '';\n        if (this._options.accessibilityVerbose) {\n            ariaLabel += ariaNavigationTip;\n        }\n        else if (ariaLabel) {\n            ariaLabel = ariaLabel.replaceAll(ariaNavigationTip, '');\n        }\n        options.ariaLabel = ariaLabel;\n    }\n    _adjustOptionsForRightHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (options.modifiedAriaLabel) {\n            result.ariaLabel = options.modifiedAriaLabel;\n        }\n        this._updateAriaLabel(result);\n        result.wordWrapOverride1 = this._options.diffWordWrap;\n        result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n        result.scrollbar.verticalHasArrows = false;\n        result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    doLayout() {\n        this._elementSizeObserver.observe();\n        this._doLayout();\n    }\n    _doLayout() {\n        const width = this._elementSizeObserver.getWidth();\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const splitPoint = this._strategy.layout();\n        this._originalDomNode.style.width = splitPoint + 'px';\n        this._originalDomNode.style.left = '0px';\n        this._modifiedDomNode.style.width = (width - splitPoint - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n        this._modifiedDomNode.style.left = splitPoint + 'px';\n        this._overviewDomElement.style.top = '0px';\n        this._overviewDomElement.style.height = (height - reviewHeight) + 'px';\n        this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n        this._overviewDomElement.style.left = (width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n        this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n        this._overviewViewportDomElement.setHeight(30);\n        this._originalEditor.layout({ width: splitPoint, height: (height - reviewHeight) });\n        this._modifiedEditor.layout({ width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0), height: (height - reviewHeight) });\n        if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n            this._layoutOverviewRulers();\n        }\n        this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n        this._layoutOverviewViewport();\n    }\n    _layoutOverviewViewport() {\n        const layout = this._computeOverviewViewport();\n        if (!layout) {\n            this._overviewViewportDomElement.setTop(0);\n            this._overviewViewportDomElement.setHeight(0);\n        }\n        else {\n            this._overviewViewportDomElement.setTop(layout.top);\n            this._overviewViewportDomElement.setHeight(layout.height);\n        }\n    }\n    _computeOverviewViewport() {\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (!layoutInfo) {\n            return null;\n        }\n        const scrollTop = this._modifiedEditor.getScrollTop();\n        const scrollHeight = this._modifiedEditor.getScrollHeight();\n        const computedAvailableSize = Math.max(0, layoutInfo.height);\n        const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n        const computedRatio = scrollHeight > 0 ? (computedRepresentableSize / scrollHeight) : 0;\n        const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n        const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n        return {\n            height: computedSliderSize,\n            top: computedSliderPosition\n        };\n    }\n    _createDataSource() {\n        return {\n            getWidth: () => {\n                return this._elementSizeObserver.getWidth();\n            },\n            getHeight: () => {\n                return (this._elementSizeObserver.getHeight() - this._getReviewHeight());\n            },\n            getOptions: () => {\n                return {\n                    renderOverviewRuler: this._options.renderOverviewRuler\n                };\n            },\n            getContainerDomNode: () => {\n                return this._containerDomElement;\n            },\n            relayoutEditors: () => {\n                this._doLayout();\n            },\n            getOriginalEditor: () => {\n                return this._originalEditor;\n            },\n            getModifiedEditor: () => {\n                return this._modifiedEditor;\n            }\n        };\n    }\n    _setStrategy(newStrategy) {\n        var _a;\n        (_a = this._strategy) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._strategy = newStrategy;\n        if (this._boundarySashes) {\n            newStrategy.setBoundarySashes(this._boundarySashes);\n        }\n        newStrategy.applyColors(this._themeService.getColorTheme());\n        if (this._diffComputationResult) {\n            this._updateDecorations();\n        }\n        // Just do a layout, the strategy might need it\n        this._doLayout();\n    }\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\nDiffEditorWidget = __decorate([\n    __param(3, IClipboardService),\n    __param(4, IContextKeyService),\n    __param(5, IInstantiationService),\n    __param(6, ICodeEditorService),\n    __param(7, IThemeService),\n    __param(8, INotificationService),\n    __param(9, IContextMenuService),\n    __param(10, IEditorProgressService)\n], DiffEditorWidget);\nexport { DiffEditorWidget };\nclass DiffEditorWidgetStyle extends Disposable {\n    constructor(dataSource) {\n        super();\n        this._dataSource = dataSource;\n        this._insertColor = null;\n        this._removeColor = null;\n    }\n    applyColors(theme) {\n        const newInsertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n        const newRemoveColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n        const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n        this._insertColor = newInsertColor;\n        this._removeColor = newRemoveColor;\n        return hasChanges;\n    }\n    getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon, originalWhitespaces, modifiedWhitespaces) {\n        // Get view zones\n        modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        originalWhitespaces = originalWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators);\n        // Get decorations & overview ruler zones\n        const originalDecorations = this._getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators);\n        const modifiedDecorations = this._getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon);\n        return {\n            original: {\n                decorations: originalDecorations.decorations,\n                overviewZones: originalDecorations.overviewZones,\n                zones: zones.original\n            },\n            modified: {\n                decorations: modifiedDecorations.decorations,\n                overviewZones: modifiedDecorations.overviewZones,\n                zones: zones.modified\n            }\n        };\n    }\n    setBoundarySashes(_sashes) {\n        // To be implemented by subclasses\n    }\n}\nclass ForeignViewZonesIterator {\n    constructor(source) {\n        this._source = source;\n        this._index = -1;\n        this.current = null;\n        this.advance();\n    }\n    advance() {\n        this._index++;\n        if (this._index < this._source.length) {\n            this.current = this._source[this._index];\n        }\n        else {\n            this.current = null;\n        }\n    }\n}\nclass ViewZonesComputer {\n    constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n        this._lineChanges = _lineChanges;\n        this._originalForeignVZ = _originalForeignVZ;\n        this._modifiedForeignVZ = _modifiedForeignVZ;\n        this._originalEditor = _originalEditor;\n        this._modifiedEditor = _modifiedEditor;\n    }\n    static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n        const model = editor.getModel();\n        const viewModel = editor._getViewModel();\n        if (model && viewModel) {\n            const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n            return (viewRange.endLineNumber - viewRange.startLineNumber + 1);\n        }\n        return (endLineNumber - startLineNumber + 1);\n    }\n    getViewZones() {\n        const originalLineHeight = this._originalEditor.getOption(65 /* EditorOption.lineHeight */);\n        const modifiedLineHeight = this._modifiedEditor.getOption(65 /* EditorOption.lineHeight */);\n        const originalHasWrapping = (this._originalEditor.getOption(143 /* EditorOption.wrappingInfo */).wrappingColumn !== -1);\n        const modifiedHasWrapping = (this._modifiedEditor.getOption(143 /* EditorOption.wrappingInfo */).wrappingColumn !== -1);\n        const hasWrapping = (originalHasWrapping || modifiedHasWrapping);\n        const originalModel = this._originalEditor.getModel();\n        const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n        const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n        const result = {\n            original: [],\n            modified: []\n        };\n        let lineChangeModifiedLength = 0;\n        let lineChangeOriginalLength = 0;\n        let originalEquivalentLineNumber = 0;\n        let modifiedEquivalentLineNumber = 0;\n        let originalEndEquivalentLineNumber = 0;\n        let modifiedEndEquivalentLineNumber = 0;\n        const sortMyViewZones = (a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        };\n        const addAndCombineIfPossible = (destination, item) => {\n            if (item.domNode === null && destination.length > 0) {\n                const lastItem = destination[destination.length - 1];\n                if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n                    lastItem.heightInLines += item.heightInLines;\n                    return;\n                }\n            }\n            destination.push(item);\n        };\n        const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n        const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n        let lastOriginalLineNumber = 1;\n        let lastModifiedLineNumber = 1;\n        // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n        for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n            const lineChange = (i < length ? this._lineChanges[i] : null);\n            if (lineChange !== null) {\n                originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n                modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n                lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0);\n                lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0);\n                originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n            }\n            else {\n                // Increase to very large value to get the producing tests of foreign view zones running\n                originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n                modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n                originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n                modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n            }\n            // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n            let stepOriginal = [];\n            let stepModified = [];\n            // ---------------------------- PRODUCE VIEW ZONES\n            // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n            if (hasWrapping) {\n                let count;\n                if (lineChange) {\n                    if (lineChange.originalEndLineNumber > 0) {\n                        count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n                    }\n                    else {\n                        count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n                    }\n                }\n                else {\n                    // `lastOriginalLineNumber` has not been looked at yet\n                    count = originalModel.getLineCount() - lastOriginalLineNumber + 1;\n                }\n                for (let i = 0; i < count; i++) {\n                    const originalLineNumber = lastOriginalLineNumber + i;\n                    const modifiedLineNumber = lastModifiedLineNumber + i;\n                    const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n                    const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n                    if (originalViewLineCount < modifiedViewLineCount) {\n                        stepOriginal.push({\n                            afterLineNumber: originalLineNumber,\n                            heightInLines: modifiedViewLineCount - originalViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                    else if (originalViewLineCount > modifiedViewLineCount) {\n                        stepModified.push({\n                            afterLineNumber: modifiedLineNumber,\n                            heightInLines: originalViewLineCount - modifiedViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                }\n                if (lineChange) {\n                    lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n                    lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n                }\n            }\n            // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n            while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n                    viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = originalEndEquivalentLineNumber;\n                }\n                let marginDomNode = null;\n                if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n                    marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n                }\n                stepOriginal.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n                    domNode: null,\n                    marginDomNode: marginDomNode\n                });\n                modifiedForeignVZ.advance();\n            }\n            // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n            while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n                    viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n                }\n                stepModified.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: originalForeignVZ.current.height / originalLineHeight,\n                    domNode: null\n                });\n                originalForeignVZ.advance();\n            }\n            if (lineChange !== null && isChangeOrInsert(lineChange)) {\n                const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepOriginal.push(r);\n                }\n            }\n            if (lineChange !== null && isChangeOrDelete(lineChange)) {\n                const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepModified.push(r);\n                }\n            }\n            // ---------------------------- END PRODUCE VIEW ZONES\n            // ---------------------------- EMIT MINIMAL VIEW ZONES\n            // [CANCEL & EMIT] Try to cancel view zones out\n            let stepOriginalIndex = 0;\n            let stepModifiedIndex = 0;\n            stepOriginal = stepOriginal.sort(sortMyViewZones);\n            stepModified = stepModified.sort(sortMyViewZones);\n            while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n                const original = stepOriginal[stepOriginalIndex];\n                const modified = stepModified[stepModifiedIndex];\n                const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n                const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n                if (originalDelta < modifiedDelta) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modifiedDelta < originalDelta) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else if (original.shouldNotShrink) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modified.shouldNotShrink) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else {\n                    if (original.heightInLines >= modified.heightInLines) {\n                        // modified view zone gets removed\n                        original.heightInLines -= modified.heightInLines;\n                        stepModifiedIndex++;\n                    }\n                    else {\n                        // original view zone gets removed\n                        modified.heightInLines -= original.heightInLines;\n                        stepOriginalIndex++;\n                    }\n                }\n            }\n            // [EMIT] Remaining original view zones\n            while (stepOriginalIndex < stepOriginal.length) {\n                addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n                stepOriginalIndex++;\n            }\n            // [EMIT] Remaining modified view zones\n            while (stepModifiedIndex < stepModified.length) {\n                addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n                stepModifiedIndex++;\n            }\n            // ---------------------------- END EMIT MINIMAL VIEW ZONES\n        }\n        return {\n            original: ViewZonesComputer._ensureDomNodes(result.original),\n            modified: ViewZonesComputer._ensureDomNodes(result.modified),\n        };\n    }\n    static _ensureDomNodes(zones) {\n        return zones.map((z) => {\n            if (!z.domNode) {\n                z.domNode = createFakeLinesDiv();\n            }\n            return z;\n        });\n    }\n}\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n    return {\n        range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n        options: options\n    };\n}\nconst DECORATIONS = {\n    arrowRevertChange: ModelDecorationOptions.register({\n        description: 'diff-editor-arrow-revert-change',\n        glyphMarginHoverMessage: new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true }).appendMarkdown(nls.localize('revertChangeHoverMessage', 'Click to revert change')),\n        glyphMarginClassName: 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight),\n        zIndex: 10001,\n    }),\n    charDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete',\n        className: 'char-delete'\n    }),\n    charDeleteWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete-whole-line',\n        className: 'char-delete',\n        isWholeLine: true\n    }),\n    charInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert',\n        className: 'char-insert'\n    }),\n    charInsertWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert-whole-line',\n        className: 'char-insert',\n        isWholeLine: true\n    }),\n    lineInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert',\n        className: \"line-insert\" /* DiffEditorLineClasses.Insert */,\n        marginClassName: 'gutter-insert',\n        isWholeLine: true\n    }),\n    lineInsertWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert-with-sign',\n        className: \"line-insert\" /* DiffEditorLineClasses.Insert */,\n        linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n        marginClassName: 'gutter-insert',\n        isWholeLine: true\n    }),\n    lineDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete',\n        className: \"line-delete\" /* DiffEditorLineClasses.Delete */,\n        marginClassName: 'gutter-delete',\n        isWholeLine: true\n    }),\n    lineDeleteWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-with-sign',\n        className: \"line-delete\" /* DiffEditorLineClasses.Delete */,\n        linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n        marginClassName: 'gutter-delete',\n        isWholeLine: true\n    }),\n    lineDeleteMargin: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-margin',\n        marginClassName: 'gutter-delete',\n    })\n};\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing, defaultSashRatio) {\n        super(dataSource);\n        this._disableSash = (enableSplitViewResizing === false);\n        this._defaultRatio = defaultSashRatio;\n        this._sashRatio = null;\n        this._sashPosition = null;\n        this._startSashPosition = null;\n        this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, { orientation: 0 /* Orientation.VERTICAL */ }));\n        if (this._disableSash) {\n            this._sash.state = 0 /* SashState.Disabled */;\n        }\n        this._sash.onDidStart(() => this._onSashDragStart());\n        this._sash.onDidChange((e) => this._onSashDrag(e));\n        this._sash.onDidEnd(() => this._onSashDragEnd());\n        this._sash.onDidReset(() => this._onSashReset());\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing, defaultRatio) {\n        this._defaultRatio = defaultRatio;\n        const newDisableSash = (enableSplitViewResizing === false);\n        if (this._disableSash !== newDisableSash) {\n            this._disableSash = newDisableSash;\n            this._sash.state = this._disableSash ? 0 /* SashState.Disabled */ : 3 /* SashState.Enabled */;\n        }\n    }\n    layout(sashRatio = this._sashRatio || this._defaultRatio) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        let sashPosition = Math.floor((sashRatio || this._defaultRatio) * contentWidth);\n        const midPoint = Math.floor(this._defaultRatio * contentWidth);\n        sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n        if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n            if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n            if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n        }\n        else {\n            sashPosition = midPoint;\n        }\n        if (this._sashPosition !== sashPosition) {\n            this._sashPosition = sashPosition;\n        }\n        this._sash.layout();\n        return this._sashPosition;\n    }\n    _onSashDragStart() {\n        this._startSashPosition = this._sashPosition;\n    }\n    _onSashDrag(e) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n        this._sashRatio = sashPosition / contentWidth;\n        this._dataSource.relayoutEditors();\n    }\n    _onSashDragEnd() {\n        this._sash.layout();\n    }\n    _onSashReset() {\n        this._sashRatio = this._defaultRatio;\n        this._dataSource.relayoutEditors();\n        this._sash.layout();\n    }\n    getVerticalSashTop(sash) {\n        return 0;\n    }\n    getVerticalSashLeft(sash) {\n        return this._sashPosition;\n    }\n    getVerticalSashHeight(sash) {\n        return this._dataSource.getHeight();\n    }\n    setBoundarySashes(sashes) {\n        this._sash.orthogonalEndSash = sashes.bottom;\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        return c.getViewZones();\n    }\n    _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete)\n                });\n                if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charDeleteWholeLine));\n                }\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrDelete(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.originalStartLineNumber) {\n                                        startColumn = charChange.originalStartColumn;\n                                    }\n                                    else {\n                                        startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.originalEndLineNumber) {\n                                        endColumn = charChange.originalEndColumn;\n                                    }\n                                    else {\n                                        endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Arrows for reverting changes.\n            if (renderMarginRevertIcon) {\n                if (lineChange.modifiedEndLineNumber > 0) {\n                    result.decorations.push({\n                        range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber, 1),\n                        options: DECORATIONS.arrowRevertChange\n                    });\n                }\n                else {\n                    const viewZone = zones.modified.find(z => z.afterLineNumber === lineChange.modifiedStartLineNumber);\n                    if (viewZone) {\n                        viewZone.marginDomNode = createViewZoneMarginArrow();\n                    }\n                }\n            }\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        return null;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeModifiedLength > lineChangeOriginalLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n                heightInLines: (lineChangeModifiedLength - lineChangeOriginalLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeOriginalLength > lineChangeModifiedLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n                heightInLines: (lineChangeOriginalLength - lineChangeModifiedLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n}\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing) {\n        super(dataSource);\n        this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n        this._register(dataSource.getOriginalEditor().onDidLayoutChange((layoutInfo) => {\n            if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n                this._decorationsLeft = layoutInfo.decorationsLeft;\n                dataSource.relayoutEditors();\n            }\n        }));\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing) {\n        // Nothing to do..\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n        return computer.getViewZones();\n    }\n    _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        let zoneIndex = 0;\n        for (const lineChange of lineChanges) {\n            // Add overview zones in the overview ruler\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: DECORATIONS.lineDeleteMargin\n                });\n                while (zoneIndex < zones.modified.length) {\n                    const zone = zones.modified[zoneIndex];\n                    if (zone.diff && zone.diff.originalStartLineNumber >= lineChange.originalStartLineNumber) {\n                        break;\n                    }\n                    zoneIndex++;\n                }\n                let zoneHeightInLines = 0;\n                if (zoneIndex < zones.modified.length) {\n                    const zone = zones.modified[zoneIndex];\n                    if (zone.diff\n                        && zone.diff.originalStartLineNumber === lineChange.originalStartLineNumber\n                        && zone.diff.originalEndLineNumber === lineChange.originalEndLineNumber\n                        && zone.diff.modifiedStartLineNumber === lineChange.modifiedStartLineNumber\n                        && zone.diff.modifiedEndLineNumber === lineChange.modifiedEndLineNumber) {\n                        zoneHeightInLines = zone.heightInLines;\n                    }\n                }\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, zoneHeightInLines, overviewZoneColor));\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Add decorations & overview zones\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n                else {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n            }\n        }\n        return result;\n    }\n    layout() {\n        // An editor should not be smaller than 5px\n        return Math.max(5, this._decorationsLeft);\n    }\n}\nclass InlineViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        this._originalModel = originalEditor.getModel();\n        this._renderIndicators = renderIndicators;\n        this._pendingLineChange = [];\n        this._pendingViewZones = [];\n        this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n    }\n    getViewZones() {\n        const result = super.getViewZones();\n        this._finalize(result);\n        return result;\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        const result = document.createElement('div');\n        result.className = 'inline-added-margin-view-zone';\n        return result;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-added-margin-view-zone';\n        return {\n            afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n            heightInLines: lineChangeModifiedLength,\n            domNode: document.createElement('div'),\n            marginDomNode: marginDomNode\n        };\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const domNode = document.createElement('div');\n        domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-deleted-margin-view-zone';\n        const viewZone = {\n            shouldNotShrink: true,\n            afterLineNumber: (lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1),\n            heightInLines: lineChangeOriginalLength,\n            minWidthInPx: 0,\n            domNode: domNode,\n            marginDomNode: marginDomNode,\n            diff: {\n                originalStartLineNumber: lineChange.originalStartLineNumber,\n                originalEndLineNumber: lineChange.originalEndLineNumber,\n                modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n                modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n                originalModel: this._originalModel,\n                viewLineCounts: null,\n            }\n        };\n        for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n            this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n        }\n        this._pendingLineChange.push(lineChange);\n        this._pendingViewZones.push(viewZone);\n        return viewZone;\n    }\n    _finalize(result) {\n        const modifiedEditorOptions = this._modifiedEditor.getOptions();\n        const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n        const fontInfo = modifiedEditorOptions.get(49 /* EditorOption.fontInfo */);\n        const disableMonospaceOptimizations = modifiedEditorOptions.get(32 /* EditorOption.disableMonospaceOptimizations */);\n        const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        const scrollBeyondLastColumn = modifiedEditorOptions.get(102 /* EditorOption.scrollBeyondLastColumn */);\n        const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n        const mightContainRTL = this._originalModel.mightContainRTL();\n        const lineHeight = modifiedEditorOptions.get(65 /* EditorOption.lineHeight */);\n        const layoutInfo = modifiedEditorOptions.get(142 /* EditorOption.layoutInfo */);\n        const lineDecorationsWidth = layoutInfo.decorationsWidth;\n        const stopRenderingLineAfter = modifiedEditorOptions.get(115 /* EditorOption.stopRenderingLineAfter */);\n        const renderWhitespace = modifiedEditorOptions.get(97 /* EditorOption.renderWhitespace */);\n        const renderControlCharacters = modifiedEditorOptions.get(92 /* EditorOption.renderControlCharacters */);\n        const fontLigatures = modifiedEditorOptions.get(50 /* EditorOption.fontLigatures */);\n        const lineBreaks = this._lineBreaksComputer.finalize();\n        let lineBreakIndex = 0;\n        for (let i = 0; i < this._pendingLineChange.length; i++) {\n            const lineChange = this._pendingLineChange[i];\n            const viewZone = this._pendingViewZones[i];\n            const domNode = viewZone.domNode;\n            applyFontInfo(domNode, fontInfo);\n            const marginDomNode = viewZone.marginDomNode;\n            applyFontInfo(marginDomNode, fontInfo);\n            const decorations = [];\n            if (lineChange.charChanges) {\n                for (const charChange of lineChange.charChanges) {\n                    if (isCharChangeOrDelete(charChange)) {\n                        decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0 /* InlineDecorationType.Regular */));\n                    }\n                }\n            }\n            const hasCharChanges = (decorations.length > 0);\n            const sb = new StringBuilder(10000);\n            let maxCharsPerLine = 0;\n            let renderedLineCount = 0;\n            let viewLineCounts = null;\n            for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n                const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n                const lineTokens = this._originalModel.tokenization.getLineTokens(lineNumber);\n                const lineContent = lineTokens.getLineContent();\n                const lineBreakData = lineBreaks[lineBreakIndex++];\n                const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n                if (lineBreakData) {\n                    let lastBreakOffset = 0;\n                    for (const breakOffset of lineBreakData.breakOffsets) {\n                        const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n                        const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n                        maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                        lastBreakOffset = breakOffset;\n                    }\n                    if (!viewLineCounts) {\n                        viewLineCounts = [];\n                    }\n                    // make sure all lines before this one have an entry in `viewLineCounts`\n                    while (viewLineCounts.length < lineIndex) {\n                        viewLineCounts[viewLineCounts.length] = 1;\n                    }\n                    viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n                    viewZone.heightInLines += (lineBreakData.breakOffsets.length - 1);\n                    const marginDomNode2 = document.createElement('div');\n                    marginDomNode2.className = 'gutter-delete';\n                    result.original.push({\n                        afterLineNumber: lineNumber,\n                        afterColumn: 0,\n                        heightInLines: lineBreakData.breakOffsets.length - 1,\n                        domNode: createFakeLinesDiv(),\n                        marginDomNode: marginDomNode2\n                    });\n                }\n                else {\n                    maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                }\n            }\n            maxCharsPerLine += scrollBeyondLastColumn;\n            const html = sb.build();\n            const trustedhtml = diffEditorWidgetTtPolicy ? diffEditorWidgetTtPolicy.createHTML(html) : html;\n            domNode.innerHTML = trustedhtml;\n            viewZone.minWidthInPx = (maxCharsPerLine * typicalHalfwidthCharacterWidth);\n            if (viewLineCounts) {\n                // make sure all lines have an entry in `viewLineCounts`\n                const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n                while (viewLineCounts.length <= cnt) {\n                    viewLineCounts[viewLineCounts.length] = 1;\n                }\n            }\n            viewZone.diff.viewLineCounts = viewLineCounts;\n        }\n        result.original.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n    }\n    _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n        sb.appendString('<div class=\"view-line');\n        if (!hasCharChanges) {\n            // No char changes\n            sb.appendString(' char-delete');\n        }\n        sb.appendString('\" style=\"top:');\n        sb.appendString(String(renderedLineCount * lineHeight));\n        sb.appendString('px;width:1000000px;\">');\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n        const output = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !disableMonospaceOptimizations), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n        ), sb);\n        sb.appendString('</div>');\n        if (this._renderIndicators) {\n            const marginElement = document.createElement('div');\n            marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n            marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n            marginDomNode.appendChild(marginElement);\n        }\n        return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n    }\n}\nfunction validateDiffWordWrap(value, defaultValue) {\n    return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\nfunction isChangeOrInsert(lineChange) {\n    return lineChange.modifiedEndLineNumber > 0;\n}\nfunction isChangeOrDelete(lineChange) {\n    return lineChange.originalEndLineNumber > 0;\n}\nfunction isCharChangeOrInsert(charChange) {\n    if (charChange.modifiedStartLineNumber === charChange.modifiedEndLineNumber) {\n        return charChange.modifiedEndColumn - charChange.modifiedStartColumn > 0;\n    }\n    return charChange.modifiedEndLineNumber - charChange.modifiedStartLineNumber > 0;\n}\nfunction isCharChangeOrDelete(charChange) {\n    if (charChange.originalStartLineNumber === charChange.originalEndLineNumber) {\n        return charChange.originalEndColumn - charChange.originalStartColumn > 0;\n    }\n    return charChange.originalEndLineNumber - charChange.originalStartLineNumber > 0;\n}\nfunction createFakeLinesDiv() {\n    const r = document.createElement('div');\n    r.className = 'diagonal-fill';\n    return r;\n}\nfunction createViewZoneMarginArrow() {\n    const arrow = document.createElement('div');\n    arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n    return dom.$('div', {}, arrow);\n}\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n    const lineCount = model.getLineCount();\n    startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n    endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n    return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\nfunction validateDiffEditorOptions(options, defaults) {\n    return {\n        enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n        splitViewDefaultRatio: clampedFloat(options.splitViewDefaultRatio, 0.5, 0.1, 0.9),\n        renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n        renderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n        maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n        renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n        originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n        diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n        renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n        diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap),\n        diffAlgorithm: validateStringSetOption(options.diffAlgorithm, defaults.diffAlgorithm, ['legacy', 'advanced'], { 'smart': 'legacy', 'experimental': 'advanced' }),\n        accessibilityVerbose: validateBooleanOption(options.accessibilityVerbose, defaults.accessibilityVerbose),\n        experimental: {\n            collapseUnchangedRegions: false,\n        },\n        isInEmbeddedEditor: validateBooleanOption(options.isInEmbeddedEditor, defaults.isInEmbeddedEditor),\n        onlyShowAccessibleDiffViewer: false,\n    };\n}\nfunction changedDiffEditorOptions(a, b) {\n    return {\n        enableSplitViewResizing: (a.enableSplitViewResizing !== b.enableSplitViewResizing),\n        renderSideBySide: (a.renderSideBySide !== b.renderSideBySide),\n        renderMarginRevertIcon: (a.renderMarginRevertIcon !== b.renderMarginRevertIcon),\n        maxComputationTime: (a.maxComputationTime !== b.maxComputationTime),\n        maxFileSize: (a.maxFileSize !== b.maxFileSize),\n        ignoreTrimWhitespace: (a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace),\n        renderIndicators: (a.renderIndicators !== b.renderIndicators),\n        originalEditable: (a.originalEditable !== b.originalEditable),\n        diffCodeLens: (a.diffCodeLens !== b.diffCodeLens),\n        renderOverviewRuler: (a.renderOverviewRuler !== b.renderOverviewRuler),\n        diffWordWrap: (a.diffWordWrap !== b.diffWordWrap),\n        diffAlgorithm: (a.diffAlgorithm !== b.diffAlgorithm),\n        accessibilityVerbose: (a.accessibilityVerbose !== b.accessibilityVerbose),\n    };\n}\nregisterThemingParticipant((theme, collector) => {\n    const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n    collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}