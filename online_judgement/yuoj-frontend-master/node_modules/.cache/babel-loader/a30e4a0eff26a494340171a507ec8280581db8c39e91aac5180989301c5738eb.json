{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nexport class DiffAlgorithmResult {\n  static trivial(seq1, seq2) {\n    return new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], false);\n  }\n  static trivialTimedOut(seq1, seq2) {\n    return new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], true);\n  }\n  constructor(diffs,\n  /**\n   * Indicates if the time out was reached.\n   * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n   */\n  hitTimeout) {\n    this.diffs = diffs;\n    this.hitTimeout = hitTimeout;\n  }\n}\nexport class SequenceDiff {\n  constructor(seq1Range, seq2Range) {\n    this.seq1Range = seq1Range;\n    this.seq2Range = seq2Range;\n  }\n  reverse() {\n    return new SequenceDiff(this.seq2Range, this.seq1Range);\n  }\n  toString() {\n    return `${this.seq1Range} <-> ${this.seq2Range}`;\n  }\n  join(other) {\n    return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n  }\n  delta(offset) {\n    if (offset === 0) {\n      return this;\n    }\n    return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n  }\n}\nexport class InfiniteTimeout {\n  isValid() {\n    return true;\n  }\n}\nInfiniteTimeout.instance = new InfiniteTimeout();\nexport class DateTimeout {\n  constructor(timeout) {\n    this.timeout = timeout;\n    this.startTime = Date.now();\n    this.valid = true;\n    if (timeout <= 0) {\n      throw new BugIndicatingError('timeout must be positive');\n    }\n  }\n  // Recommendation: Set a log-point `{this.disable()}` in the body\n  isValid() {\n    const valid = Date.now() - this.startTime < this.timeout;\n    if (!valid && this.valid) {\n      this.valid = false; // timeout reached\n      // eslint-disable-next-line no-debugger\n      debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n    }\n\n    return this.valid;\n  }\n}","map":{"version":3,"names":["BugIndicatingError","OffsetRange","DiffAlgorithmResult","trivial","seq1","seq2","SequenceDiff","length","trivialTimedOut","constructor","diffs","hitTimeout","seq1Range","seq2Range","reverse","toString","join","other","delta","offset","InfiniteTimeout","isValid","instance","DateTimeout","timeout","startTime","Date","now","valid"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/common/diff/algorithms/diffAlgorithm.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nexport class DiffAlgorithmResult {\n    static trivial(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], false);\n    }\n    static trivialTimedOut(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], true);\n    }\n    constructor(diffs, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.diffs = diffs;\n        this.hitTimeout = hitTimeout;\n    }\n}\nexport class SequenceDiff {\n    constructor(seq1Range, seq2Range) {\n        this.seq1Range = seq1Range;\n        this.seq2Range = seq2Range;\n    }\n    reverse() {\n        return new SequenceDiff(this.seq2Range, this.seq1Range);\n    }\n    toString() {\n        return `${this.seq1Range} <-> ${this.seq2Range}`;\n    }\n    join(other) {\n        return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n    }\n    delta(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n    }\n}\nexport class InfiniteTimeout {\n    isValid() {\n        return true;\n    }\n}\nInfiniteTimeout.instance = new InfiniteTimeout();\nexport class DateTimeout {\n    constructor(timeout) {\n        this.timeout = timeout;\n        this.startTime = Date.now();\n        this.valid = true;\n        if (timeout <= 0) {\n            throw new BugIndicatingError('timeout must be positive');\n        }\n    }\n    // Recommendation: Set a log-point `{this.disable()}` in the body\n    isValid() {\n        const valid = Date.now() - this.startTime < this.timeout;\n        if (!valid && this.valid) {\n            this.valid = false; // timeout reached\n            // eslint-disable-next-line no-debugger\n            debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n        }\n        return this.valid;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}