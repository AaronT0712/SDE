{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { getLogger } from './logging.js';\nexport function autorun(debugName, fn) {\n  return new AutorunObserver(debugName, fn, undefined, undefined);\n}\nexport function autorunHandleChanges(debugName, options, fn) {\n  return new AutorunObserver(debugName, fn, options.createEmptyChangeSummary, options.handleChange);\n}\n// TODO@hediet rename to autorunWithStore\nexport function autorunWithStore2(debugName, fn) {\n  return autorunWithStore(fn, debugName);\n}\n// TODO@hediet deprecate, rename to autorunWithStoreEx\nexport function autorunWithStore(fn, debugName) {\n  const store = new DisposableStore();\n  const disposable = autorun(debugName, reader => {\n    store.clear();\n    fn(reader, store);\n  });\n  return toDisposable(() => {\n    disposable.dispose();\n    store.dispose();\n  });\n}\nexport class AutorunObserver {\n  constructor(debugName, runFn, createChangeSummary, _handleChange) {\n    var _a, _b;\n    this.debugName = debugName;\n    this.runFn = runFn;\n    this.createChangeSummary = createChangeSummary;\n    this._handleChange = _handleChange;\n    this.state = 2 /* AutorunState.stale */;\n    this.updateCount = 0;\n    this.disposed = false;\n    this.dependencies = new Set();\n    this.dependenciesToBeRemoved = new Set();\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleAutorunCreated(this);\n    this._runIfNeeded();\n  }\n  dispose() {\n    this.disposed = true;\n    for (const o of this.dependencies) {\n      o.removeObserver(this);\n    }\n    this.dependencies.clear();\n  }\n  _runIfNeeded() {\n    var _a, _b;\n    if (this.state === 3 /* AutorunState.upToDate */) {\n      return;\n    }\n    const emptySet = this.dependenciesToBeRemoved;\n    this.dependenciesToBeRemoved = this.dependencies;\n    this.dependencies = emptySet;\n    this.state = 3 /* AutorunState.upToDate */;\n    (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleAutorunTriggered(this);\n    try {\n      const changeSummary = this.changeSummary;\n      this.changeSummary = (_b = this.createChangeSummary) === null || _b === void 0 ? void 0 : _b.call(this);\n      this.runFn(this, changeSummary);\n    } finally {\n      // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n      // Thus, we only unsubscribe from observables that are definitely not read anymore.\n      for (const o of this.dependenciesToBeRemoved) {\n        o.removeObserver(this);\n      }\n      this.dependenciesToBeRemoved.clear();\n    }\n  }\n  toString() {\n    return `Autorun<${this.debugName}>`;\n  }\n  // IObserver implementation\n  beginUpdate() {\n    if (this.state === 3 /* AutorunState.upToDate */) {\n      this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n    }\n\n    this.updateCount++;\n  }\n  endUpdate() {\n    if (this.updateCount === 1) {\n      do {\n        if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n          this.state = 3 /* AutorunState.upToDate */;\n          for (const d of this.dependencies) {\n            d.reportChanges();\n            if (this.state === 2 /* AutorunState.stale */) {\n              // The other dependencies will refresh on demand\n              break;\n            }\n          }\n        }\n        this._runIfNeeded();\n      } while (this.state !== 3 /* AutorunState.upToDate */);\n    }\n\n    this.updateCount--;\n    assertFn(() => this.updateCount >= 0);\n  }\n  handlePossibleChange(observable) {\n    if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n    }\n  }\n\n  handleChange(observable, change) {\n    if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      const shouldReact = this._handleChange ? this._handleChange({\n        changedObservable: observable,\n        change,\n        didChange: o => o === observable\n      }, this.changeSummary) : true;\n      if (shouldReact) {\n        this.state = 2 /* AutorunState.stale */;\n      }\n    }\n  }\n  // IReader implementation\n  readObservable(observable) {\n    // In case the run action disposes the autorun\n    if (this.disposed) {\n      return observable.get();\n    }\n    observable.addObserver(this);\n    const value = observable.get();\n    this.dependencies.add(observable);\n    this.dependenciesToBeRemoved.delete(observable);\n    return value;\n  }\n}\n(function (autorun) {\n  autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));","map":{"version":3,"names":["assertFn","DisposableStore","toDisposable","getLogger","autorun","debugName","fn","AutorunObserver","undefined","autorunHandleChanges","options","createEmptyChangeSummary","handleChange","autorunWithStore2","autorunWithStore","store","disposable","reader","clear","dispose","constructor","runFn","createChangeSummary","_handleChange","_a","_b","state","updateCount","disposed","dependencies","Set","dependenciesToBeRemoved","changeSummary","call","handleAutorunCreated","_runIfNeeded","o","removeObserver","emptySet","handleAutorunTriggered","toString","beginUpdate","endUpdate","d","reportChanges","handlePossibleChange","observable","has","change","shouldReact","changedObservable","didChange","readObservable","get","addObserver","value","add","delete","Observer"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/base/common/observableImpl/autorun.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { getLogger } from './logging.js';\nexport function autorun(debugName, fn) {\n    return new AutorunObserver(debugName, fn, undefined, undefined);\n}\nexport function autorunHandleChanges(debugName, options, fn) {\n    return new AutorunObserver(debugName, fn, options.createEmptyChangeSummary, options.handleChange);\n}\n// TODO@hediet rename to autorunWithStore\nexport function autorunWithStore2(debugName, fn) {\n    return autorunWithStore(fn, debugName);\n}\n// TODO@hediet deprecate, rename to autorunWithStoreEx\nexport function autorunWithStore(fn, debugName) {\n    const store = new DisposableStore();\n    const disposable = autorun(debugName, reader => {\n        store.clear();\n        fn(reader, store);\n    });\n    return toDisposable(() => {\n        disposable.dispose();\n        store.dispose();\n    });\n}\nexport class AutorunObserver {\n    constructor(debugName, runFn, createChangeSummary, _handleChange) {\n        var _a, _b;\n        this.debugName = debugName;\n        this.runFn = runFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this.state = 2 /* AutorunState.stale */;\n        this.updateCount = 0;\n        this.disposed = false;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleAutorunCreated(this);\n        this._runIfNeeded();\n    }\n    dispose() {\n        this.disposed = true;\n        for (const o of this.dependencies) {\n            o.removeObserver(this);\n        }\n        this.dependencies.clear();\n    }\n    _runIfNeeded() {\n        var _a, _b;\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        this.state = 3 /* AutorunState.upToDate */;\n        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleAutorunTriggered(this);\n        try {\n            const changeSummary = this.changeSummary;\n            this.changeSummary = (_b = this.createChangeSummary) === null || _b === void 0 ? void 0 : _b.call(this);\n            this.runFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n    }\n    toString() {\n        return `Autorun<${this.debugName}>`;\n    }\n    // IObserver implementation\n    beginUpdate() {\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n        this.updateCount++;\n    }\n    endUpdate() {\n        if (this.updateCount === 1) {\n            do {\n                if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* AutorunState.upToDate */;\n                    for (const d of this.dependencies) {\n                        d.reportChanges();\n                        if (this.state === 2 /* AutorunState.stale */) {\n                            // The other dependencies will refresh on demand\n                            break;\n                        }\n                    }\n                }\n                this._runIfNeeded();\n            } while (this.state !== 3 /* AutorunState.upToDate */);\n        }\n        this.updateCount--;\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            if (shouldReact) {\n                this.state = 2 /* AutorunState.stale */;\n            }\n        }\n    }\n    // IReader implementation\n    readObservable(observable) {\n        // In case the run action disposes the autorun\n        if (this.disposed) {\n            return observable.get();\n        }\n        observable.addObserver(this);\n        const value = observable.get();\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n}\n(function (autorun) {\n    autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}