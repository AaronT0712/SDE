{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n  constructor(context, viewDomNode) {\n    super(context);\n    this._viewDomNode = viewDomNode;\n    this._widgets = {};\n    this.domNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n    this.domNode.setClassName('contentWidgets');\n    this.domNode.setPosition('absolute');\n    this.domNode.setTop(0);\n    this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n    this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n  }\n  dispose() {\n    super.dispose();\n    this._widgets = {};\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].onConfigurationChanged(e);\n    }\n    return true;\n  }\n  onDecorationsChanged(e) {\n    // true for inline decorations that can end up relayouting text\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLineMappingChanged(e) {\n    this._updateAnchorsViewPositions();\n    return true;\n  }\n  onLinesChanged(e) {\n    this._updateAnchorsViewPositions();\n    return true;\n  }\n  onLinesDeleted(e) {\n    this._updateAnchorsViewPositions();\n    return true;\n  }\n  onLinesInserted(e) {\n    this._updateAnchorsViewPositions();\n    return true;\n  }\n  onScrollChanged(e) {\n    return true;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // ---- end view event handlers\n  _updateAnchorsViewPositions() {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].updateAnchorViewPosition();\n    }\n  }\n  addWidget(_widget) {\n    const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n    this._widgets[myWidget.id] = myWidget;\n    if (myWidget.allowEditorOverflow) {\n      this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n    } else {\n      this.domNode.appendChild(myWidget.domNode);\n    }\n    this.setShouldRender();\n  }\n  setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n    const myWidget = this._widgets[widget.getId()];\n    myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n    this.setShouldRender();\n  }\n  removeWidget(widget) {\n    const widgetId = widget.getId();\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      const myWidget = this._widgets[widgetId];\n      delete this._widgets[widgetId];\n      const domNode = myWidget.domNode.domNode;\n      domNode.parentNode.removeChild(domNode);\n      domNode.removeAttribute('monaco-visible-content-widget');\n      this.setShouldRender();\n    }\n  }\n  shouldSuppressMouseDownOnWidget(widgetId) {\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      return this._widgets[widgetId].suppressMouseDown;\n    }\n    return false;\n  }\n  onBeforeRender(viewportData) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].onBeforeRender(viewportData);\n    }\n  }\n  prepareRender(ctx) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].prepareRender(ctx);\n    }\n  }\n  render(ctx) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].render(ctx);\n    }\n  }\n}\nclass Widget {\n  constructor(context, viewDomNode, actual) {\n    this._primaryAnchor = new PositionPair(null, null);\n    this._secondaryAnchor = new PositionPair(null, null);\n    this._context = context;\n    this._viewDomNode = viewDomNode;\n    this._actual = actual;\n    this.domNode = createFastDomNode(this._actual.getDomNode());\n    this.id = this._actual.getId();\n    this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n    this.suppressMouseDown = this._actual.suppressMouseDown || false;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n    this._fixedOverflowWidgets = options.get(41 /* EditorOption.fixedOverflowWidgets */);\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentLeft = layoutInfo.contentLeft;\n    this._lineHeight = options.get(65 /* EditorOption.lineHeight */);\n    this._affinity = null;\n    this._preference = [];\n    this._cachedDomNodeOffsetWidth = -1;\n    this._cachedDomNodeOffsetHeight = -1;\n    this._maxWidth = this._getMaxWidth();\n    this._isVisible = false;\n    this._renderData = null;\n    this.domNode.setPosition(this._fixedOverflowWidgets && this.allowEditorOverflow ? 'fixed' : 'absolute');\n    this.domNode.setDisplay('none');\n    this.domNode.setVisibility('hidden');\n    this.domNode.setAttribute('widgetId', this.id);\n    this.domNode.setMaxWidth(this._maxWidth);\n  }\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(65 /* EditorOption.lineHeight */);\n    if (e.hasChanged(142 /* EditorOption.layoutInfo */)) {\n      const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n      this._contentLeft = layoutInfo.contentLeft;\n      this._contentWidth = layoutInfo.contentWidth;\n      this._maxWidth = this._getMaxWidth();\n    }\n  }\n  updateAnchorViewPosition() {\n    this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n  }\n  _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n    this._affinity = affinity;\n    this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n    this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n    function getValidPositionPair(position, viewModel, affinity) {\n      if (!position) {\n        return new PositionPair(null, null);\n      }\n      // Do not trust that widgets give a valid position\n      const validModelPosition = viewModel.model.validatePosition(position);\n      if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n        const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n        return new PositionPair(position, viewPosition);\n      }\n      return new PositionPair(position, null);\n    }\n  }\n  _getMaxWidth() {\n    return this.allowEditorOverflow ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth : this._contentWidth;\n  }\n  setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n    this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n    this._preference = preference;\n    if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n      // this content widget would like to be visible if possible\n      // we change it from `display:none` to `display:block` even if it\n      // might be outside the viewport such that we can measure its size\n      // in `prepareRender`\n      this.domNode.setDisplay('block');\n    } else {\n      this.domNode.setDisplay('none');\n    }\n    this._cachedDomNodeOffsetWidth = -1;\n    this._cachedDomNodeOffsetHeight = -1;\n  }\n  _layoutBoxInViewport(anchor, width, height, ctx) {\n    // Our visible box is split horizontally by the current line => 2 boxes\n    // a) the box above the line\n    const aboveLineTop = anchor.top;\n    const heightAvailableAboveLine = aboveLineTop;\n    // b) the box under the line\n    const underLineTop = anchor.top + anchor.height;\n    const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n    const aboveTop = aboveLineTop - height;\n    const fitsAbove = heightAvailableAboveLine >= height;\n    const belowTop = underLineTop;\n    const fitsBelow = heightAvailableUnderLine >= height;\n    // And its left\n    let left = anchor.left;\n    if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n      left = ctx.scrollLeft + ctx.viewportWidth - width;\n    }\n    if (left < ctx.scrollLeft) {\n      left = ctx.scrollLeft;\n    }\n    return {\n      fitsAbove,\n      aboveTop,\n      fitsBelow,\n      belowTop,\n      left\n    };\n  }\n  _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n    // Leave some clearance to the left/right\n    const LEFT_PADDING = 15;\n    const RIGHT_PADDING = 15;\n    // Initially, the limits are defined as the dom node limits\n    const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n    const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n    let absoluteLeft = domNodePosition.left + left - window.scrollX;\n    if (absoluteLeft + width > MAX_LIMIT) {\n      const delta = absoluteLeft - (MAX_LIMIT - width);\n      absoluteLeft -= delta;\n      left -= delta;\n    }\n    if (absoluteLeft < MIN_LIMIT) {\n      const delta = absoluteLeft - MIN_LIMIT;\n      absoluteLeft -= delta;\n      left -= delta;\n    }\n    return [left, absoluteLeft];\n  }\n  _layoutBoxInPage(anchor, width, height, ctx) {\n    const aboveTop = anchor.top - height;\n    const belowTop = anchor.top + anchor.height;\n    const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n    const absoluteAboveTop = domNodePosition.top + aboveTop - window.scrollY;\n    const absoluteBelowTop = domNodePosition.top + belowTop - window.scrollY;\n    const windowSize = dom.getClientArea(document.body);\n    const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n    // Leave some clearance to the top/bottom\n    const TOP_PADDING = 22;\n    const BOTTOM_PADDING = 22;\n    const fitsAbove = absoluteAboveTop >= TOP_PADDING;\n    const fitsBelow = absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING;\n    if (this._fixedOverflowWidgets) {\n      return {\n        fitsAbove,\n        aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n        fitsBelow,\n        belowTop: absoluteBelowTop,\n        left: absoluteAboveLeft\n      };\n    }\n    return {\n      fitsAbove,\n      aboveTop,\n      fitsBelow,\n      belowTop,\n      left\n    };\n  }\n  _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n    return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n  }\n  /**\n   * Compute the coordinates above and below the primary and secondary anchors.\n   * The content widget *must* touch the primary anchor.\n   * The content widget should touch if possible the secondary anchor.\n   */\n  _getAnchorsCoordinates(ctx) {\n    var _a, _b;\n    const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n    const secondaryViewPosition = ((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null;\n    const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n    return {\n      primary,\n      secondary\n    };\n    function getCoordinates(position, affinity, lineHeight) {\n      if (!position) {\n        return null;\n      }\n      const horizontalPosition = ctx.visibleRangeForPosition(position);\n      if (!horizontalPosition) {\n        return null;\n      }\n      // Left-align widgets that should appear :before content\n      const left = position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left;\n      const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n      return new AnchorCoordinate(top, left, lineHeight);\n    }\n  }\n  _reduceAnchorCoordinates(primary, secondary, width) {\n    if (!secondary) {\n      return primary;\n    }\n    const fontInfo = this._context.configuration.options.get(49 /* EditorOption.fontInfo */);\n    let left = secondary.left;\n    if (left < primary.left) {\n      left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n    } else {\n      left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n    }\n    return new AnchorCoordinate(primary.top, left, primary.height);\n  }\n  _prepareRenderWidget(ctx) {\n    if (!this._preference || this._preference.length === 0) {\n      return null;\n    }\n    const {\n      primary,\n      secondary\n    } = this._getAnchorsCoordinates(ctx);\n    if (!primary) {\n      return null;\n    }\n    if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n      let preferredDimensions = null;\n      if (typeof this._actual.beforeRender === 'function') {\n        preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n      }\n      if (preferredDimensions) {\n        this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n        this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n      } else {\n        const domNode = this.domNode.domNode;\n        const clientRect = domNode.getBoundingClientRect();\n        this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n        this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n      }\n    }\n    const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n    let placement;\n    if (this.allowEditorOverflow) {\n      placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n    } else {\n      placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n    }\n    // Do two passes, first for perfect fit, second picks first option\n    for (let pass = 1; pass <= 2; pass++) {\n      for (const pref of this._preference) {\n        // placement\n        if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n          if (!placement) {\n            // Widget outside of viewport\n            return null;\n          }\n          if (pass === 2 || placement.fitsAbove) {\n            return {\n              coordinate: new Coordinate(placement.aboveTop, placement.left),\n              position: 1 /* ContentWidgetPositionPreference.ABOVE */\n            };\n          }\n        } else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n          if (!placement) {\n            // Widget outside of viewport\n            return null;\n          }\n          if (pass === 2 || placement.fitsBelow) {\n            return {\n              coordinate: new Coordinate(placement.belowTop, placement.left),\n              position: 2 /* ContentWidgetPositionPreference.BELOW */\n            };\n          }\n        } else {\n          if (this.allowEditorOverflow) {\n            return {\n              coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)),\n              position: 0 /* ContentWidgetPositionPreference.EXACT */\n            };\n          } else {\n            return {\n              coordinate: new Coordinate(anchor.top, anchor.left),\n              position: 0 /* ContentWidgetPositionPreference.EXACT */\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n   */\n  onBeforeRender(viewportData) {\n    if (!this._primaryAnchor.viewPosition || !this._preference) {\n      return;\n    }\n    if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n      // Outside of viewport\n      return;\n    }\n    this.domNode.setMaxWidth(this._maxWidth);\n  }\n  prepareRender(ctx) {\n    this._renderData = this._prepareRenderWidget(ctx);\n  }\n  render(ctx) {\n    if (!this._renderData) {\n      // This widget should be invisible\n      if (this._isVisible) {\n        this.domNode.removeAttribute('monaco-visible-content-widget');\n        this._isVisible = false;\n        this.domNode.setVisibility('hidden');\n      }\n      if (typeof this._actual.afterRender === 'function') {\n        safeInvoke(this._actual.afterRender, this._actual, null);\n      }\n      return;\n    }\n    // This widget should be visible\n    if (this.allowEditorOverflow) {\n      this.domNode.setTop(this._renderData.coordinate.top);\n      this.domNode.setLeft(this._renderData.coordinate.left);\n    } else {\n      this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n      this.domNode.setLeft(this._renderData.coordinate.left);\n    }\n    if (!this._isVisible) {\n      this.domNode.setVisibility('inherit');\n      this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n      this._isVisible = true;\n    }\n    if (typeof this._actual.afterRender === 'function') {\n      safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n    }\n  }\n}\nclass PositionPair {\n  constructor(modelPosition, viewPosition) {\n    this.modelPosition = modelPosition;\n    this.viewPosition = viewPosition;\n  }\n}\nclass Coordinate {\n  constructor(top, left) {\n    this.top = top;\n    this.left = left;\n    this._coordinateBrand = undefined;\n  }\n}\nclass AnchorCoordinate {\n  constructor(top, left, height) {\n    this.top = top;\n    this.left = left;\n    this.height = height;\n    this._anchorCoordinateBrand = undefined;\n  }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n  try {\n    return fn.call(thisArg, ...args);\n  } catch (_a) {\n    // ignore\n    return null;\n  }\n}","map":{"version":3,"names":["dom","createFastDomNode","PartFingerprints","ViewPart","ViewContentWidgets","constructor","context","viewDomNode","_viewDomNode","_widgets","domNode","document","createElement","write","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","dispose","onConfigurationChanged","e","keys","Object","widgetId","onDecorationsChanged","onFlushed","onLineMappingChanged","_updateAnchorsViewPositions","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onZonesChanged","updateAnchorViewPosition","addWidget","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","setWidgetPosition","widget","primaryAnchor","secondaryAnchor","preference","affinity","getId","removeWidget","hasOwnProperty","parentNode","removeChild","removeAttribute","shouldSuppressMouseDownOnWidget","suppressMouseDown","onBeforeRender","viewportData","prepareRender","ctx","render","actual","_primaryAnchor","PositionPair","_secondaryAnchor","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","modelPosition","getValidPositionPair","viewModel","position","validModelPosition","model","validatePosition","coordinatesConverter","modelPositionIsVisible","viewPosition","convertModelPositionToViewPosition","undefined","window","innerWidth","documentElement","offsetWidth","body","length","_layoutBoxInViewport","anchor","width","height","aboveLineTop","top","heightAvailableAboveLine","underLineTop","heightAvailableUnderLine","viewportHeight","aboveTop","fitsAbove","belowTop","fitsBelow","left","scrollLeft","viewportWidth","_layoutHorizontalSegmentInPage","windowSize","domNodePosition","LEFT_PADDING","RIGHT_PADDING","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","scrollX","delta","_layoutBoxInPage","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","absoluteAboveLeft","TOP_PADDING","BOTTOM_PADDING","_prepareRenderWidgetAtExactPositionOverflowing","topLeft","Coordinate","_getAnchorsCoordinates","_a","_b","primary","getCoordinates","secondaryViewPosition","lineNumber","secondary","lineHeight","horizontalPosition","visibleRangeForPosition","column","getVerticalOffsetForLineNumber","scrollTop","AnchorCoordinate","_reduceAnchorCoordinates","fontInfo","typicalFullwidthCharacterWidth","_prepareRenderWidget","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","placement","pass","pref","coordinate","startLineNumber","endLineNumber","afterRender","setLeft","bigNumbersDelta","_coordinateBrand","_anchorCoordinateBrand","fn","thisArg","args","call"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(41 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(65 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(65 /* EditorOption.lineHeight */);\n        if (e.hasChanged(142 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(142 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        let absoluteLeft = domNodePosition.left + left - window.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - window.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - window.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(49 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}