{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n  id: 'editor',\n  order: 5,\n  type: 'object',\n  title: nls.localize('editorConfigurationTitle', \"Editor\"),\n  scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */\n});\n\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), {\n  properties: {\n    'editor.tabSize': {\n      type: 'number',\n      default: EDITOR_MODEL_DEFAULTS.tabSize,\n      minimum: 1,\n      markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n    },\n    'editor.indentSize': {\n      'anyOf': [{\n        type: 'string',\n        enum: ['tabSize']\n      }, {\n        type: 'number',\n        minimum: 1\n      }],\n      default: 'tabSize',\n      markdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or `\\\"tabSize\\\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    'editor.insertSpaces': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n      markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n    },\n    'editor.detectIndentation': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n      markdownDescription: nls.localize('detectIndentation', \"Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.\", '`#editor.tabSize#`', '`#editor.insertSpaces#`')\n    },\n    'editor.trimAutoWhitespace': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n      description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n    },\n    'editor.largeFileOptimizations': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n      description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n    },\n    'editor.wordBasedSuggestions': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n    },\n    'editor.wordBasedSuggestionsMode': {\n      enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n      default: 'matchingDocuments',\n      enumDescriptions: [nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'), nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'), nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')],\n      description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n    },\n    'editor.semanticHighlighting.enabled': {\n      enum: [true, false, 'configuredByTheme'],\n      enumDescriptions: [nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'), nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'), nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')],\n      default: 'configuredByTheme',\n      description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n    },\n    'editor.stablePeek': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double-clicking their content or when hitting `Escape`.\")\n    },\n    'editor.maxTokenizationLineLength': {\n      type: 'integer',\n      default: 20000,\n      description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n    },\n    'editor.experimental.asyncTokenization': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('editor.experimental.asyncTokenization', \"Controls whether the tokenization should happen asynchronously on a web worker.\"),\n      tags: ['experimental']\n    },\n    'editor.experimental.asyncTokenizationLogging': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('editor.experimental.asyncTokenizationLogging', \"Controls whether async tokenization should be logged. For debugging only.\")\n    },\n    'editor.experimental.asyncTokenizationVerification': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('editor.experimental.asyncTokenizationVerification', \"Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.\")\n    },\n    'editor.language.brackets': {\n      type: ['array', 'null'],\n      default: null,\n      description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'editor.language.colorizedBracketPairs': {\n      type: ['array', 'null'],\n      default: null,\n      description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'diffEditor.maxComputationTime': {\n      type: 'number',\n      default: 5000,\n      description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n    },\n    'diffEditor.maxFileSize': {\n      type: 'number',\n      default: 50,\n      description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n    },\n    'diffEditor.renderSideBySide': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n    },\n    'diffEditor.renderMarginRevertIcon': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('renderMarginRevertIcon', \"When enabled, the diff editor shows arrows in its glyph margin to revert changes.\")\n    },\n    'diffEditor.ignoreTrimWhitespace': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n    },\n    'diffEditor.renderIndicators': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n    },\n    'diffEditor.codeLens': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n    },\n    'diffEditor.wordWrap': {\n      type: 'string',\n      enum: ['off', 'on', 'inherit'],\n      default: 'inherit',\n      markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize('wordWrap.inherit', \"Lines will wrap according to the {0} setting.\", '`#editor.wordWrap#`')]\n    },\n    'diffEditor.diffAlgorithm': {\n      type: 'string',\n      enum: ['legacy', 'advanced'],\n      default: 'advanced',\n      markdownEnumDescriptions: [nls.localize('diffAlgorithm.legacy', \"Uses the legacy diffing algorithm.\"), nls.localize('diffAlgorithm.advanced', \"Uses the advanced diffing algorithm.\")],\n      tags: ['experimental']\n    },\n    'diffEditor.experimental.collapseUnchangedRegions': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('collapseUnchangedRegions', \"Controls whether the diff editor shows unchanged regions. Only works when {0} is set.\", '`#diffEditor.experimental.useVersion2#`')\n    },\n    'diffEditor.experimental.showMoves': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('showMoves', \"Controls whether the diff editor should show detected code moves. Only works when {0} is set.\", '`#diffEditor.experimental.useVersion2#`')\n    },\n    'diffEditor.experimental.useVersion2': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('useVersion2', \"Controls whether the diff editor uses the new or the old implementation.\"),\n      tags: ['experimental']\n    },\n    'diffEditor.experimental.showEmptyDecorations': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('showEmptyDecorations', \"Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.\")\n    }\n  }\n});\nfunction isConfigurationPropertySchema(x) {\n  return typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined';\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n  const schema = editorOption.schema;\n  if (typeof schema !== 'undefined') {\n    if (isConfigurationPropertySchema(schema)) {\n      // This is a single schema contribution\n      editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n    } else {\n      for (const key in schema) {\n        if (Object.hasOwnProperty.call(schema, key)) {\n          editorConfiguration.properties[key] = schema[key];\n        }\n      }\n    }\n  }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n  if (cachedEditorConfigurationKeys === null) {\n    cachedEditorConfigurationKeys = Object.create(null);\n    Object.keys(editorConfiguration.properties).forEach(prop => {\n      cachedEditorConfigurationKeys[prop] = true;\n    });\n  }\n  return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`editor.${key}`] || false;\n}\nexport function isDiffEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`diffEditor.${key}`] || false;\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);","map":{"version":3,"names":["editorOptionsRegistry","EDITOR_MODEL_DEFAULTS","nls","Extensions","Registry","editorConfigurationBaseNode","Object","freeze","id","order","type","title","localize","scope","editorConfiguration","assign","properties","default","tabSize","minimum","markdownDescription","enum","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enumDescriptions","tags","items","markdownEnumDescriptions","isConfigurationPropertySchema","x","anyOf","editorOption","schema","name","key","hasOwnProperty","call","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","forEach","prop","isEditorConfigurationKey","editorConfigurationKeys","isDiffEditorConfigurationKey","configurationRegistry","as","Configuration","registerConfiguration"],"sources":["/Users/aaron/Desktop/SDE/online_judgement/yuoj-frontend-master/node_modules/monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n});\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\n        'editor.tabSize': {\n            type: 'number',\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\n            minimum: 1,\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n        },\n        'editor.indentSize': {\n            'anyOf': [\n                {\n                    type: 'string',\n                    enum: ['tabSize']\n                },\n                {\n                    type: 'number',\n                    minimum: 1\n                }\n            ],\n            default: 'tabSize',\n            markdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or `\\\"tabSize\\\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        'editor.insertSpaces': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n        },\n        'editor.detectIndentation': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.\", '`#editor.tabSize#`', '`#editor.insertSpaces#`')\n        },\n        'editor.trimAutoWhitespace': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n        },\n        'editor.largeFileOptimizations': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n        },\n        'editor.wordBasedSuggestions': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n        },\n        'editor.wordBasedSuggestionsMode': {\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n            default: 'matchingDocuments',\n            enumDescriptions: [\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\n            ],\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n        },\n        'editor.semanticHighlighting.enabled': {\n            enum: [true, false, 'configuredByTheme'],\n            enumDescriptions: [\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\n            ],\n            default: 'configuredByTheme',\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n        },\n        'editor.stablePeek': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double-clicking their content or when hitting `Escape`.\")\n        },\n        'editor.maxTokenizationLineLength': {\n            type: 'integer',\n            default: 20000,\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n        },\n        'editor.experimental.asyncTokenization': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenization', \"Controls whether the tokenization should happen asynchronously on a web worker.\"),\n            tags: ['experimental'],\n        },\n        'editor.experimental.asyncTokenizationLogging': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenizationLogging', \"Controls whether async tokenization should be logged. For debugging only.\"),\n        },\n        'editor.experimental.asyncTokenizationVerification': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenizationVerification', \"Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.\"),\n        },\n        'editor.language.brackets': {\n            type: ['array', 'null'],\n            default: null,\n            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'editor.language.colorizedBracketPairs': {\n            type: ['array', 'null'],\n            default: null,\n            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'diffEditor.maxComputationTime': {\n            type: 'number',\n            default: 5000,\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n        },\n        'diffEditor.maxFileSize': {\n            type: 'number',\n            default: 50,\n            description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n        },\n        'diffEditor.renderSideBySide': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n        },\n        'diffEditor.renderMarginRevertIcon': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderMarginRevertIcon', \"When enabled, the diff editor shows arrows in its glyph margin to revert changes.\")\n        },\n        'diffEditor.ignoreTrimWhitespace': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n        },\n        'diffEditor.renderIndicators': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n        },\n        'diffEditor.codeLens': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n        },\n        'diffEditor.wordWrap': {\n            type: 'string',\n            enum: ['off', 'on', 'inherit'],\n            default: 'inherit',\n            markdownEnumDescriptions: [\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the {0} setting.\", '`#editor.wordWrap#`'),\n            ]\n        },\n        'diffEditor.diffAlgorithm': {\n            type: 'string',\n            enum: ['legacy', 'advanced'],\n            default: 'advanced',\n            markdownEnumDescriptions: [\n                nls.localize('diffAlgorithm.legacy', \"Uses the legacy diffing algorithm.\"),\n                nls.localize('diffAlgorithm.advanced', \"Uses the advanced diffing algorithm.\"),\n            ],\n            tags: ['experimental'],\n        },\n        'diffEditor.experimental.collapseUnchangedRegions': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('collapseUnchangedRegions', \"Controls whether the diff editor shows unchanged regions. Only works when {0} is set.\", '`#diffEditor.experimental.useVersion2#`'),\n        },\n        'diffEditor.experimental.showMoves': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('showMoves', \"Controls whether the diff editor should show detected code moves. Only works when {0} is set.\", '`#diffEditor.experimental.useVersion2#`')\n        },\n        'diffEditor.experimental.useVersion2': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('useVersion2', \"Controls whether the diff editor uses the new or the old implementation.\"),\n            tags: ['experimental'],\n        },\n        'diffEditor.experimental.showEmptyDecorations': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('showEmptyDecorations', \"Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.\"),\n        }\n    } });\nfunction isConfigurationPropertySchema(x) {\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n    const schema = editorOption.schema;\n    if (typeof schema !== 'undefined') {\n        if (isConfigurationPropertySchema(schema)) {\n            // This is a single schema contribution\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n        }\n        else {\n            for (const key in schema) {\n                if (Object.hasOwnProperty.call(schema, key)) {\n                    editorConfiguration.properties[key] = schema[key];\n                }\n            }\n        }\n    }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n    if (cachedEditorConfigurationKeys === null) {\n        cachedEditorConfigurationKeys = Object.create(null);\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\n            cachedEditorConfigurationKeys[prop] = true;\n        });\n    }\n    return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`editor.${key}`] || false);\n}\nexport function isDiffEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}